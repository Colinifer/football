dffumb <- data.frame(Team = nfl.json[[1]][[1]]$abbr,
t(sapply(nfl.json[[1]][[1]]$stats$fumbles, c)))
}
if (is.null(dffumb)) {
# Initialize a new variable with the player IDs
dfpass$playerID <- rownames(dfpass)
dfrush$playerID <- rownames(dfrush)
dfrec$playerID <- rownames(dfrec)
dfkicking$playerID <- rownames(dfkicking)
dfpuntret$playerID <- rownames(dfpuntret)
dfkickret$playerID <- rownames(dfkickret)
dfdef$playerID <- rownames(dfdef)
# This stage is where we merge all the dataframes together so each player
# has one line
final.df <- Reduce(function(x, y)
{merge(x, y, by = c("Team", "playerID", "name"),all=TRUE, sort = FALSE)},
list(dfpass, dfrush, dfrec, dfkickret, dfpuntret, dfkicking, dfdef))
# Adding Fumble columns with 0's due to no occurance of fumbles in game
final.df$totalfumbs <- 0
final.df$recfumbs <- 0
final.df$totalrecfumbs <- 0
final.df$fumbyds <- 0
final.df$fumbslost <- 0
}
else {
# Renaming for dffumb Columns
colnames(dffumb) <- c("Team", "name", "totalfumbs", "recfumbs",
"totalrecfumbs","fumbyds", "fumbslost")
# Initialize a new variable with the player IDs
dfpass$playerID <- rownames(dfpass)
dfrush$playerID <- rownames(dfrush)
dfrec$playerID <- rownames(dfrec)
dfkicking$playerID <- rownames(dfkicking)
dfpuntret$playerID <- rownames(dfpuntret)
dfkickret$playerID <- rownames(dfkickret)
dffumb$playerID <- rownames(dffumb)
dfdef$playerID <- rownames(dfdef)
# This stage is where we merge all the dataframes together so each player
# has one line
final.df <- Reduce(function(x,y) {
merge(x, y, by = c("Team", "playerID", "name"), all = TRUE, sort = FALSE)}
, list(dfpass, dfrush, dfrec, dfkickret, dfpuntret,
dfkicking, dfdef, dffumb))
}
final.df <- data.frame(Team = final.df[,1],
sapply(final.df[,-1],
function(x) ifelse((x == "NULL" | is.na(x)),
0, x)))
rownames(final.df) <- NULL
# GameID
game.id <- stringr::str_extract(urlstring, pattern = "[0-9]{10}")
# Date of Game
datestep1 <- stringr::str_extract(urlstring, pattern = "/[0-9]{10}/")
datestep2 <- stringr::str_extract(datestep1, pattern = "[0-9]{8}")
year <- substr(datestep2, start = 1, stop = 4)
month <- substr(datestep2, start = 5, stop = 6)
day <- substr(datestep2, start = nchar(datestep2)-1, stop = nchar(datestep2))
date <- as.Date(paste(month, day, year, sep = "/"), format = "%m/%d/%Y")
# Output dataframe which has the game.id, date of game, and the player info
# and statistics
final.df2 <- data.frame(game.id, date, final.df)
# Unlist the listed variables in order to return the output dataframe in a
# friendlier format
final.df2 <- data.frame(lapply(final.df2, unlist))
# Counter for games
final.df2$games <- 1
# Output dataframe arranged by date and Team name
final.df2 %>% dplyr::arrange(date, Team)
}
# Everygame in a Given Season
#' Boxscore for Each Game in the Season - One line per player per game
#' @description This function outputs a single dataframe containing all rushing,
#' passing, receiving, fumble, and defensive statistics for each player in
#' each game.  Each player is assigned one line associated wih their statisitcs
#' per each game they record a measured statistic
#'
#' @param Season (numeric) A 4-digit year associated with a given season
#' @param Week (numeric) A number corresponding to the number of weeks of data
#' you want to be scraped and included in the output. If you input 3, the first
#' three weeks of player statistics will be scraped from the associated season.
#' @return A single line for each player in each game they played in.  The
#' output is the same as the player_game function but is run for every game in
#' the specified season
#' @examples
#' # Player-Game function over the entire season in 2010
#' playerstats.2010 <- season_player_game(2010)
#' head(playerstats.2010)
#'
#' # Plot a graph of different play types
#' library(ggplot2)
#' ggplot(playerstats.2010, aes(x = PlayType)) + geom_bar()
#' @export
season_player_game <- function(Season, Weeks = 16) {
game_ids <- extracting_gameids(Season)
if (Weeks %in% 3:15) {
game_ids <- game_ids[1:(16*Weeks)-1]
} else if (Weeks %in% 1:2) {
game_ids <- game_ids[1:(16*Weeks)]
}
playergame.season.unformatted <- lapply(game_ids, FUN = player_game)
# Rowbinding all the games from the specified season
suppressWarnings(playergame.season <- dplyr::bind_rows(playergame.season.unformatted))
# Final output dataframe
data.frame(Season = Season, playergame.season)
}
# Aggregated for Each Player over the Season
#' Detailed Player Aggregate Season Statistics
#' @description This function outputs a dataframe with the season statistics for
#' each player who recorded atleast one measured statistic in any game throughout
#' the specified season.  This function gives one line per player with the
#' following statistics: Passing, Rushing, Receiving, Kick Return,
#' Punt Return, Fumbles, and Defense
#' @param Season (numeric) A 4-digit year associated with a given season
#' @details This function calls season_player_game and then aggregates
#' across an entire season to gather season totals and season max statistics
#' @return Returns a dataframe with a single line for each player aggregating
#' their total season statistics
#' @examples
#' # Returns the Season-Total Statistics for Each Player in the 2015 Season
#' agg_player_season(2015)
#' @export
agg_player_season <- function(Season, Weeks = 16) {
# Use the season_playergame function to generate a dataset with all the games
# in a given season which we will aggregate over
playerdata.year <- season_player_game(Season, Weeks = Weeks)
# Use dplyr to aggregate
# Here we use the sum function for cumulative yards
season.sum.agg <-  dplyr::group_by(playerdata.year,
Season, Team, playerID, name)
season.sum.agg <- dplyr::summarise_each(season.sum.agg,
dplyr::funs(sum), -date, -rushlng, -rushlngtd
, -reclng, -reclngtd, -game.id,
-puntret.lng, -puntret.lngtd,
-kick.ret.lng, -kickret.lngtd)
# Here we find the max "long run" and max "long reception"
season.max.agg <- dplyr::group_by(playerdata.year, Season, Team, playerID, name)
season.max.agg <- dplyr::summarise_each(season.max.agg, dplyr::funs(max),
rushlng, rushlngtd, reclng, reclngtd,
puntret.lng, puntret.lngtd,
kick.ret.lng, kickret.lngtd, -games)
# Merging the Two datasets
season.stats <- merge(season.sum.agg, season.max.agg,
by = c("Season", "Team", "playerID", "name"))
season.stats$Season <- Season
# Final Output
season.stats
}
Â© 2019 GitHub, Inc.
Terms
Privacy
Security
Status
Help
Contact GitHub
Pricing
API
Training
Blog
About
season_player_game(userYear)
library(nflscrapR)
devtools::install_github(repo = "maksimhorowitz/nflscrapR")
install.packages("devtools")
library(nflscrapR)
devtools::install_github(repo = "maksimhorowitz/nflscrapR")
nstall.packages("devtools", "tidyverse", "readr", "pander", "na.tools", "ggimage", "devtools", "teamcolors", "glue", "animate", "dplyr")
innstall.packages("devtools", "tidyverse", "readr", "pander", "na.tools", "ggimage", "devtools", "teamcolors", "glue", "animate", "dplyr")
install.packages("devtools", "tidyverse", "readr", "pander", "na.tools", "ggimage", "devtools", "teamcolors", "glue", "animate", "dplyr")
install.packages("devtools", "tidyverse", "readr", "pander", "na.tools", "ggimage", "devtools", "teamcolors", "glue", "animate", "dplyr")
?install.packages
installed.packages()
library(nflscrapR)
library(tidyverse)
library(readr)
library(pander)
library(dplyr)
library(na.tools)
library(ggimage)
library(teamcolors)
library(plyr)
library(readr)
library(glue)
library(animate)
install.packages(c("ggimage", "na.tools", "pander", "readr", "teamcolors", "tidyverse"))
install.packages(c("devtools", "tidyverse", "readr", "pander", "na.tools", "ggimage", "devtools", "teamcolors", "glue", "animate", "dplyr")
)
install.packages(c("devtools", "tidyverse", "readr", "pander", "na.tools", "ggimage", "devtools", "teamcolors", "glue", "animate", "dplyr"))
##install.packages(c("devtools", "tidyverse", "readr", "pander", "na.tools", "ggimage", "devtools", "teamcolors", "glue", "animate", "dplyr"))
##devtools::install_github(repo = "maksimhorowitz/nflscrapR")
library(nflscrapR)
library(tidyverse)
library(readr)
library(pander)
library(dplyr)
library(na.tools)
library(ggimage)
library(teamcolors)
library(plyr)
library(readr)
library(glue)
library(animate)
##reset
setwd("~/")
gid <- paste(getwd())
gid
device <- ""
if (gid == "/Volumes/HDD/Users/colinwelsh") {
##Maverick - MBP
setwd("~/Documents/dev/football")
device <- "Maverick (MBP)"
} else if (gid == "/Users/ColinWelsh") {
##Goose - iMac
setwd("~/Documents/dev/football")
device <- "Goose (iMac)"
##add Goose
}
print(paste(device, "is ready for some football", sep = " "))
rm(gid, device)
# other dependent variables
userYear <- 2019 ##necessary for saved
userWeek <- 10 ##not necessary at the moment
fgame_ids <- paste("data/games/reg_season/reg_games_", userYear, ".csv", sep ="")
season2019 <- season_player_game(2019)
View(season2019)
View(players2019)
View(season2019)
tail(pbp2019)
# set custom variables
userYear <- 2019 ##necessary for saved
userWeek <- 10 ##not necessary at the moment
today <- Sys.Date()
# test date
date <- 2019
##  date <- format(today, format="%Y%m%d")
fgame_ids <- paste("data/games/reg_season/reg_games_", userYear, ".csv", sep ="")
game_ids <- read.csv(fgame_ids, check.names = FALSE)
currentGameIDs <- game_ids$game_id
#pull games in 2019 season that match today's date
currentGames <- grep(date, currentGameIDs)
games_in_play <- currentGameIDs[currentGames]
##can't figure this out yet
#
#  games_in_play <- game_ids$state_of_game[currentGames] != "POST"
#
#  nplay <- length(games_in_play)
#  nplayLoop <- 1
#
# scrape pbp of active games
# if 0 games, scrape scores
for (x in games_in_play)
{
f <- paste("data/games/", userYear, "/", x, ".csv", sep = "")
fplayers <-  paste("data/players/", userYear, "/", x, "players", ".csv", sep = "")
if (file.exists(fplayers)==TRUE & grepl("END GAME", y$desc[nrow(y)]) == TRUE)
{
xplayers <- player_game(x)
write.csv(xplayers, fplayers, row.names = FALSE)
} else {
xplayers <- player_game(x)
write.csv(xplayers, fplayers, row.names = FALSE)
}
if (file.exists(f)==TRUE)
{
#read game csv
y <- read.csv(f, check.names=FALSE)
tail(y)
#check if y$desc contains "END GAME"
#if x has END GAME change state_of_game to POST
if (grepl("END GAME", y$desc[nrow(y)]) == TRUE)
{
print(paste("Game", x, "is over.", sep = " "))
game_ids[game_ids$game_id == x, "state_of_game"] <- "POST"
game_ids[game_ids$game_id == x, "away_score"] <- y$total_away_score[nrow(y)]
game_ids[game_ids$game_id == x, "home_score"] <- y$total_home_score[nrow(y)]
print(paste("Changing the state of game for", x, "to POST", sep = " "))
write.csv(game_ids, fgame_ids, row.names = FALSE)
}
else
{
#scrape
print(paste("Scraping game ", x, sep = ""))
print(paste(game_ids[game_ids$game_id == x, "away_team"], "vs", game_ids[game_ids$game_id == x, "home_team"], sep = " "))
y <- scrape_json_play_by_play(x)
tail(y)
game_ids$X <- NULL ## annoying glitch
if (grepl("END GAME", y$desc[nrow(y)]) == TRUE) {
print(paste("Game", x, "is over.", sep = " "))
print(paste(game_ids[game_ids$game_id == x, "away_team"], "vs", game_ids[game_ids$game_id == x, "home_team"], sep = " "))
game_ids[game_ids$game_id == x, "state_of_game"] <- "POST"
game_ids[game_ids$game_id == x, "away_score"] <- y$total_away_score[nrow(y)]
game_ids[game_ids$game_id == x, "home_score"] <- y$total_home_score[nrow(y)]
print(paste("Changing the state of game for ", x, " to POST", sep = ""))
write.csv(game_ids, fgame_ids, row.names=FALSE)
}
write.csv(y, file = paste("data/games/", userYear,"/", x, ".csv", sep = ""), row.names=FALSE)
}
}
else
{
print(paste("Scraping game", x, sep = " "))
print(
paste(
game_ids[
game_ids$game_id == x, "away_team"],
"vs",
game_ids[game_ids$game_id == x, "home_team"],
sep = " "
)
)
y <- scrape_json_play_by_play(x)
tail(y)
write.csv(y, file = paste("data/games/", userYear,"/", x, ".csv", sep = ""), row.names=FALSE)
}
xawayscore <- y$total_away_score[nrow(y)]
xawayteam <- y$away_team[1]
xhomescore <- y$total_home_score[nrow(y)]
xhometeam <- y$home_team[1]
print(paste(xawayteam, ": ", xawayscore, " @ ", xhometeam, ": ", xhomescore, sep = ""))
print(paste("Last play:", y$desc[nrow(y)], sep=""))
}
# set custom variables
userYear <- 2019 ##necessary for saved
userWeek <- 10 ##not necessary at the moment
today <- Sys.Date()
# test date
date <- 20191
##  date <- format(today, format="%Y%m%d")
fgame_ids <- paste("data/games/reg_season/reg_games_", userYear, ".csv", sep ="")
game_ids <- read.csv(fgame_ids, check.names = FALSE)
currentGameIDs <- game_ids$game_id
#pull games in 2019 season that match today's date
currentGames <- grep(date, currentGameIDs)
games_in_play <- currentGameIDs[currentGames]
##can't figure this out yet
#
#  games_in_play <- game_ids$state_of_game[currentGames] != "POST"
#
#  nplay <- length(games_in_play)
#  nplayLoop <- 1
#
# scrape pbp of active games
# if 0 games, scrape scores
for (x in games_in_play)
{
f <- paste("data/games/", userYear, "/", x, ".csv", sep = "")
fplayers <-  paste("data/players/", userYear, "/", x, "players", ".csv", sep = "")
if (file.exists(fplayers)==TRUE & grepl("END GAME", y$desc[nrow(y)]) == TRUE)
{
xplayers <- player_game(x)
write.csv(xplayers, fplayers, row.names = FALSE)
} else {
xplayers <- player_game(x)
write.csv(xplayers, fplayers, row.names = FALSE)
}
if (file.exists(f)==TRUE)
{
#read game csv
y <- read.csv(f, check.names=FALSE)
tail(y)
#check if y$desc contains "END GAME"
#if x has END GAME change state_of_game to POST
if (grepl("END GAME", y$desc[nrow(y)]) == TRUE)
{
print(paste("Game", x, "is over.", sep = " "))
game_ids[game_ids$game_id == x, "state_of_game"] <- "POST"
game_ids[game_ids$game_id == x, "away_score"] <- y$total_away_score[nrow(y)]
game_ids[game_ids$game_id == x, "home_score"] <- y$total_home_score[nrow(y)]
print(paste("Changing the state of game for", x, "to POST", sep = " "))
write.csv(game_ids, fgame_ids, row.names = FALSE)
}
else
{
#scrape
print(paste("Scraping game ", x, sep = ""))
print(paste(game_ids[game_ids$game_id == x, "away_team"], "vs", game_ids[game_ids$game_id == x, "home_team"], sep = " "))
y <- scrape_json_play_by_play(x)
tail(y)
game_ids$X <- NULL ## annoying glitch
if (grepl("END GAME", y$desc[nrow(y)]) == TRUE) {
print(paste("Game", x, "is over.", sep = " "))
print(paste(game_ids[game_ids$game_id == x, "away_team"], "vs", game_ids[game_ids$game_id == x, "home_team"], sep = " "))
game_ids[game_ids$game_id == x, "state_of_game"] <- "POST"
game_ids[game_ids$game_id == x, "away_score"] <- y$total_away_score[nrow(y)]
game_ids[game_ids$game_id == x, "home_score"] <- y$total_home_score[nrow(y)]
print(paste("Changing the state of game for ", x, " to POST", sep = ""))
write.csv(game_ids, fgame_ids, row.names=FALSE)
}
write.csv(y, file = paste("data/games/", userYear,"/", x, ".csv", sep = ""), row.names=FALSE)
}
}
else
{
print(paste("Scraping game", x, sep = " "))
print(
paste(
game_ids[
game_ids$game_id == x, "away_team"],
"vs",
game_ids[game_ids$game_id == x, "home_team"],
sep = " "
)
)
y <- scrape_json_play_by_play(x)
tail(y)
write.csv(y, file = paste("data/games/", userYear,"/", x, ".csv", sep = ""), row.names=FALSE)
}
xawayscore <- y$total_away_score[nrow(y)]
xawayteam <- y$away_team[1]
xhomescore <- y$total_home_score[nrow(y)]
xhometeam <- y$home_team[1]
print(paste(xawayteam, ": ", xawayscore, " @ ", xhometeam, ": ", xhomescore, sep = ""))
print(paste("Last play:", y$desc[nrow(y)], sep=""))
}
# set custom variables
userYear <- 2019 ##necessary for saved
userWeek <- 10 ##not necessary at the moment
today <- Sys.Date()
# test date
date <- 201911
##  date <- format(today, format="%Y%m%d")
fgame_ids <- paste("data/games/reg_season/reg_games_", userYear, ".csv", sep ="")
game_ids <- read.csv(fgame_ids, check.names = FALSE)
currentGameIDs <- game_ids$game_id
#pull games in 2019 season that match today's date
currentGames <- grep(date, currentGameIDs)
games_in_play <- currentGameIDs[currentGames]
##can't figure this out yet
#
#  games_in_play <- game_ids$state_of_game[currentGames] != "POST"
#
#  nplay <- length(games_in_play)
#  nplayLoop <- 1
#
# scrape pbp of active games
# if 0 games, scrape scores
for (x in games_in_play)
{
f <- paste("data/games/", userYear, "/", x, ".csv", sep = "")
fplayers <-  paste("data/players/", userYear, "/", x, "players", ".csv", sep = "")
if (file.exists(fplayers)==TRUE & grepl("END GAME", y$desc[nrow(y)]) == TRUE)
{
xplayers <- player_game(x)
write.csv(xplayers, fplayers, row.names = FALSE)
} else {
xplayers <- player_game(x)
write.csv(xplayers, fplayers, row.names = FALSE)
}
if (file.exists(f)==TRUE)
{
#read game csv
y <- read.csv(f, check.names=FALSE)
tail(y)
#check if y$desc contains "END GAME"
#if x has END GAME change state_of_game to POST
if (grepl("END GAME", y$desc[nrow(y)]) == TRUE)
{
print(paste("Game", x, "is over.", sep = " "))
game_ids[game_ids$game_id == x, "state_of_game"] <- "POST"
game_ids[game_ids$game_id == x, "away_score"] <- y$total_away_score[nrow(y)]
game_ids[game_ids$game_id == x, "home_score"] <- y$total_home_score[nrow(y)]
print(paste("Changing the state of game for", x, "to POST", sep = " "))
write.csv(game_ids, fgame_ids, row.names = FALSE)
}
else
{
#scrape
print(paste("Scraping game ", x, sep = ""))
print(paste(game_ids[game_ids$game_id == x, "away_team"], "vs", game_ids[game_ids$game_id == x, "home_team"], sep = " "))
y <- scrape_json_play_by_play(x)
tail(y)
game_ids$X <- NULL ## annoying glitch
if (grepl("END GAME", y$desc[nrow(y)]) == TRUE) {
print(paste("Game", x, "is over.", sep = " "))
print(paste(game_ids[game_ids$game_id == x, "away_team"], "vs", game_ids[game_ids$game_id == x, "home_team"], sep = " "))
game_ids[game_ids$game_id == x, "state_of_game"] <- "POST"
game_ids[game_ids$game_id == x, "away_score"] <- y$total_away_score[nrow(y)]
game_ids[game_ids$game_id == x, "home_score"] <- y$total_home_score[nrow(y)]
print(paste("Changing the state of game for ", x, " to POST", sep = ""))
write.csv(game_ids, fgame_ids, row.names=FALSE)
}
write.csv(y, file = paste("data/games/", userYear,"/", x, ".csv", sep = ""), row.names=FALSE)
}
}
else
{
print(paste("Scraping game", x, sep = " "))
print(
paste(
game_ids[
game_ids$game_id == x, "away_team"],
"vs",
game_ids[game_ids$game_id == x, "home_team"],
sep = " "
)
)
y <- scrape_json_play_by_play(x)
tail(y)
write.csv(y, file = paste("data/games/", userYear,"/", x, ".csv", sep = ""), row.names=FALSE)
}
xawayscore <- y$total_away_score[nrow(y)]
xawayteam <- y$away_team[1]
xhomescore <- y$total_home_score[nrow(y)]
xhometeam <- y$home_team[1]
print(paste(xawayteam, ": ", xawayscore, " @ ", xhometeam, ": ", xhomescore, sep = ""))
print(paste("Last play:", y$desc[nrow(y)], sep=""))
}
tail(pbp2019)
?readRDS
install.packages("tidyverse")
install.packages("dplyr")
install.packages("na.tools")
install.packages("ggimage")
