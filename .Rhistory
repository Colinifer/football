nfl_logos_df <- read_csv("https://raw.githubusercontent.com/statsbylopez/BlogPosts/master/nfl_teamlogos.csv")
chart <- chart_data %>% left_join(nfl_logos_df, by = c("posteam" = "team_code"))
chart %>%
ggplot(aes(x = success_rate, y = epa_per_db)) +
geom_image(aes(image = url), size = 0.05) +
labs(x = "Success rate",
y = "EPA per play",
caption = "Data from nflscrapR",
title = "Dropback success rate & EPA/play",
subtitle = "2019") +
theme_bw() +
theme(axis.title = element_text(size = 12),
axis.text = element_text(size = 10),
plot.title = element_text(size = 16),
plot.subtitle = element_text(size = 14),
plot.caption = element_text(size = 12))
chart_data <- pbp_rp %>%
group_by(posteam) %>%
filter(down<=2) %>%
summarise(
n_dropbacks = sum(pass),
n_rush = sum(rush),
epa_per_db = sum(epa * pass) / n_dropbacks,
epa_per_rush = sum(epa * rush) / n_rush,
success_per_db = sum(success * pass) / n_dropbacks,
success_per_rush = sum(success * rush) / n_rush
)
chart <- chart_data %>% left_join(nfl_logos_df, by = c("posteam" = "team_code"))
chart %>%
ggplot(aes(x = epa_per_rush, y = epa_per_db)) +
geom_image(aes(image = url), size = 0.05) +
labs(x = "Rush EPA/play",
y = "Pass EPA/play",
caption = "Data from nflscrapR",
title = "Early-down rush and pass EPA/play",
subtitle = "2019") +
theme_bw() +
geom_abline(slope=1, intercept=0, alpha=.2) +
theme(axis.title = element_text(size = 12),
axis.text = element_text(size = 10),
plot.title = element_text(size = 16),
plot.subtitle = element_text(size = 14),
plot.caption = element_text(size = 12))
chart %>%
ggplot(aes(x = success_per_rush, y = success_per_db)) +
geom_image(aes(image = url), size = 0.05) +
labs(x = "Rush success rate",
y = "Pass success rate",
caption = "Data from nflscrapR",
title = "Early-down rush and pass success rate",
subtitle = "2019") +
theme_bw() +
geom_abline(slope=1, intercept=0, alpha=.2) +
theme(axis.title = element_text(size = 12),
axis.text = element_text(size = 10),
plot.title = element_text(size = 16),
plot.subtitle = element_text(size = 14),
plot.caption = element_text(size = 12))
pbp_rp %>% filter(play_type=="no_play")
%>% select(desc, pass, passer_player_name, rusher_player_name, receiver_player_name) %>% head()
pbp_players <- pbp_rp %>%
mutate(
passer_player_name = ifelse(play_type == "no_play" & pass == 1,
str_extract(desc, "(?<=\\s)[A-Z][a-z]*\\.\\s?[A-Z][A-z]+(\\s(I{2,3})|(IV))?(?=\\s((pass)|(sack)|(scramble)))"),
passer_player_name),
receiver_player_name = ifelse(play_type == "no_play" & str_detect(desc, "pass"),
str_extract(desc,
"(?<=to\\s)[A-Z][a-z]*\\.\\s?[A-Z][A-z]+(\\s(I{2,3})|(IV))?"),
receiver_player_name),
rusher_player_name = ifelse(play_type == "no_play" & rush == 1,
str_extract(desc, "(?<=\\s)[A-Z][a-z]*\\.\\s?[A-Z][A-z]+(\\s(I{2,3})|(IV))?(?=\\s((left end)|(left tackle)|(left guard)|		(up the middle)|(right guard)|(right tackle)|(right end)))"),
rusher_player_name)
)
qbs <- pbp_players %>%
mutate(
name = ifelse(!is_na(passer_player_name), passer_player_name, rusher_player_name),
rusher = rusher_player_name,
receiver = receiver_player_name,
play = 1
) %>%
group_by(name, posteam) %>%
summarize (
n_dropbacks = sum(pass),
n_rush = sum(rush),
n_plays = sum(play),
epa_per_play = sum(epa)/n_plays,
success_per_play =sum(success)/n_plays
) %>%
filter(n_dropbacks>=100)
library(ggrepel)
qbs %>%
ggplot(aes(x = success_per_play, y = epa_per_play)) +
geom_hline(yintercept = mean(qbs$epa_per_play), color = "red", linetype = "dashed") +
geom_vline(xintercept =  mean(qbs$success_per_play), color = "red", linetype = "dashed") +
geom_point(color = ifelse(qbs$posteam == "SF", "red", "black"), cex=qbs$n_plays/60, alpha=1/4) +
geom_text_repel(aes(label=name),
force=1, point.padding=0,
segment.size=0.1) +
labs(x = "Success rate",
y = "EPA per play",
caption = "Data from nflscrapR",
title = "QB success rate and EPA/play",
subtitle = "2018, min 100 pass attempts, includes all QB's rush and pass plays") +
theme_bw() +
theme(axis.title = element_text(size = 12),
axis.text = element_text(size = 10),
plot.title = element_text(size = 16, hjust = 0.5),
plot.subtitle = element_text(size = 14, hjust = 0.5),
plot.caption = element_text(size = 12))
first <- 2019 #first season to grab. min available=2009
last <- 2019 # most recent season
datalist = list()
for (yr in first:last) {
pbp <- read_csv(url(paste0("https://github.com/ryurko/nflscrapR-data/raw/master/play_by_play_data/regular_season/reg_pbp_", yr, ".csv")))
games <- read_csv(url(paste0("https://raw.githubusercontent.com/ryurko/nflscrapR-data/master/games_data/regular_season/reg_games_", yr, ".csv")))
pbp <- pbp %>% inner_join(games %>% distinct(game_id, week, season)) %>% select(-fumble_recovery_2_yards)
datalist[[yr]] <- pbp # add it to your list
}
pbp_all <- dplyr::bind_rows(datalist)
pbp_all %>% group_by(home_team) %>%summarize(n=n(), seasons=n_distinct(season), minyr=min(season), maxyr=max(season)) %>%
arrange(seasons)
pbp_all <- pbp_all %>%
mutate_at(vars(home_team, away_team, posteam, defteam), funs(case_when(
. %in% "JAX" ~ "JAC",
. %in% "STL" ~ "LA",
. %in% "SD" ~ "LAC",
TRUE ~ .
)))
saveRDS(pbp_all, file="ben_mutations.rds")
pbp_all <- readRDS("ben_mutations.rds")
pbp_all_rp <- pbp_all %>%
filter(!is_na(epa), !is_na(posteam), play_type=="no_play" | play_type=="pass" | play_type=="run") %>%
mutate(
pass = if_else(str_detect(desc, "( pass)|(sacked)|(scramble)"), 1, 0),
rush = if_else(str_detect(desc, "(left end)|(left tackle)|(left guard)|(up the middle)|(right guard)|(right tackle)|(right end)") & pass == 0, 1, 0),
success = ifelse(epa>0, 1 , 0),
passer_player_name = ifelse(play_type == "no_play" & pass == 1,
str_extract(desc, "(?<=\\s)[A-Z][a-z]*\\.\\s?[A-Z][A-z]+(\\s(I{2,3})|(IV))?(?=\\s((pass)|(sack)|(scramble)))"),
passer_player_name),
receiver_player_name = ifelse(play_type == "no_play" & str_detect(desc, "pass"),
str_extract(desc, "(?<=to\\s)[A-Z][a-z]*\\.\\s?[A-Z][A-z]+(\\s(I{2,3})|(IV))?"),
receiver_player_name),
rusher_player_name = ifelse(play_type == "no_play" & rush == 1,
str_extract(desc, "(?<=\\s)[A-Z][a-z]*\\.\\s?[A-Z][A-z]+(\\s(I{2,3})|(IV))?(?=\\s((left end)|(left tackle)|(left guard)|		      (up the middle)|(right guard)|(right tackle)|(right end)))"),
rusher_player_name),
name = ifelse(!is_na(passer_player_name), passer_player_name, rusher_player_name),
yards_gained=ifelse(play_type=="no_play",NA,yards_gained),
play=1
) %>%
filter(pass==1 | rush==1)
tail(pbp_all_rp)
##install.packages(c("devtools", "tidyverse", "readr", "pander", "na.tools", "ggimage", "devtools", "teamcolors", "glue", "animate", "dplyr"))
##devtools::install_github(repo = "maksimhorowitz/nflscrapR")
library(nflscrapR)
library(tidyverse)
library(readr)
library(pander)
library(dplyr)
library(na.tools)
library(ggimage)
library(teamcolors)
library(plyr)
library(readr)
library(glue)
library(animate)
##reset
setwd("~/")
gid <- paste(getwd())
gid
device <- ""
if (gid == "/Volumes/HDD/Users/colinwelsh") {
##Maverick - MBP
setwd("~/Documents/dev/football")
device <- "Maverick (MBP)"
} else if (gid == "/Users/ColinWelsh") {
##Goose - iMac
setwd("~/Documents/dev/football")
device <- "Goose (iMac)"
##add Goose
}
print(paste(device, "is ready for some football", sep = " "))
rm(gid, device)
# other dependent variables
userYear <- 2019 ##necessary for saved
userWeek <- 10 ##not necessary at the moment
fgame_ids <- paste("data/games/reg_season/reg_games_", userYear, ".csv", sep ="")
# set custom variables
userYear <- 2019 ##necessary for saved
userWeek <- 11 ##not necessary at the moment
today <- Sys.Date()
# test date
date <- 201911
##  date <- format(today, format="%Y%m%d")
fgame_ids <- paste("data/games/reg_season/reg_games_", userYear, ".csv", sep ="")
game_ids <- read.csv(fgame_ids, check.names = FALSE)
currentGameIDs <- game_ids$game_id
#pull games in 2019 season that match today's date
currentGames <- grep(date, currentGameIDs)
games_in_play <- currentGameIDs[currentGames]
##can't figure this out yet
#
#  games_in_play <- game_ids$state_of_game[currentGames] != "POST"
#
#  nplay <- length(games_in_play)
#  nplayLoop <- 1
#
# scrape pbp of active games
# if 0 games, scrape scores
for (x in games_in_play)
{
f <- paste("data/games/", userYear, "/", x, ".csv", sep = "")
fplayers <-  paste("data/players/", userYear, "/", x, "players", ".csv", sep = "")
if (file.exists(fplayers)==TRUE & grepl("END GAME", y$desc[nrow(y)]) == TRUE)
{
xplayers <- player_game(x)
write.csv(xplayers, fplayers, row.names = FALSE)
} else {
xplayers <- player_game(x)
write.csv(xplayers, fplayers, row.names = FALSE)
}
if (file.exists(f)==TRUE)
{
#read game csv
y <- read.csv(f, check.names=FALSE)
tail(y)
#check if y$desc contains "END GAME"
#if x has END GAME change state_of_game to POST
if (grepl("END GAME", y$desc[nrow(y)]) == TRUE)
{
print(paste("Game", x, "is over.", sep = " "))
game_ids[game_ids$game_id == x, "state_of_game"] <- "POST"
game_ids[game_ids$game_id == x, "away_score"] <- y$total_away_score[nrow(y)]
game_ids[game_ids$game_id == x, "home_score"] <- y$total_home_score[nrow(y)]
print(paste("Changing the state of game for", x, "to POST", sep = " "))
write.csv(game_ids, fgame_ids, row.names = FALSE)
}
else
{
#scrape
print(paste("Scraping game ", x, sep = ""))
print(paste(game_ids[game_ids$game_id == x, "away_team"], "vs", game_ids[game_ids$game_id == x, "home_team"], sep = " "))
y <- scrape_json_play_by_play(x)
tail(y)
game_ids$X <- NULL ## annoying glitch
if (grepl("END GAME", y$desc[nrow(y)]) == TRUE) {
print(paste("Game", x, "is over.", sep = " "))
print(paste(game_ids[game_ids$game_id == x, "away_team"], "vs", game_ids[game_ids$game_id == x, "home_team"], sep = " "))
game_ids[game_ids$game_id == x, "state_of_game"] <- "POST"
game_ids[game_ids$game_id == x, "away_score"] <- y$total_away_score[nrow(y)]
game_ids[game_ids$game_id == x, "home_score"] <- y$total_home_score[nrow(y)]
print(paste("Changing the state of game for ", x, " to POST", sep = ""))
write.csv(game_ids, fgame_ids, row.names=FALSE)
}
write.csv(y, file = paste("data/games/", userYear,"/", x, ".csv", sep = ""), row.names=FALSE)
}
}
else
{
print(paste("Scraping game", x, sep = " "))
print(
paste(
game_ids[
game_ids$game_id == x, "away_team"],
"vs",
game_ids[game_ids$game_id == x, "home_team"],
sep = " "
)
)
y <- scrape_json_play_by_play(x)
tail(y)
write.csv(y, file = paste("data/games/", userYear,"/", x, ".csv", sep = ""), row.names=FALSE)
}
xawayscore <- y$total_away_score[nrow(y)]
xawayteam <- y$away_team[1]
xhomescore <- y$total_home_score[nrow(y)]
xhometeam <- y$home_team[1]
print(paste(xawayteam, ": ", xawayscore, " @ ", xhometeam, ": ", xhomescore, sep = ""))
print(paste("Last play:", y$desc[nrow(y)], sep=""))
}
pbp2019 <- list.files(paste("data/games_data/", userYear, "/", sep = ""),
pattern = "*.csv", full.names = TRUE) %>%
lapply(read_csv) %>%
bind_rows
pbp2019
write.csv(pbp2019, file = paste("data/season_total/pbp", userYear,".csv", sep = ""), row.names=FALSE)
## Players Merge
players2019 <- list.files(paste("data/players/", userYear, "/", sep = ""),
pattern = "*.csv", full.names = TRUE) %>%
lapply(read_csv) %>%
bind_rows
players2019
write.csv(players2019, file = paste("data/season_total/players", userYear,".csv", sep = ""), row.names=FALSE)
for (x in teamAbbr$nflscrapr_abbrev) {
## doesn't work yet
##  print(paste("Getting roster for the", userYear, teamAbbr$full_name == x))
xroster <- season_rosters(userYear, teams = x)
froster <- paste("data/teams/", userYear, "/", x, userYear, "roster", ".csv", sep = "")
write.csv(xroster, file = froster, row.names = FALSE)
}
teams <- list.files(paste("data/players/", userYear, "/", sep = ""),
pattern = "*.csv", full.names = TRUE) %>%
lapply(read_csv) %>%
bind_rows
players2019
write.csv(teams, file = paste("data/season_total/players", userYear,".csv", sep = ""), row.names=FALSE)
##install.packages(c("devtools", "tidyverse", "readr", "pander", "na.tools", "ggimage", "devtools", "teamcolors", "glue", "animate", "dplyr"))
##devtools::install_github(repo = "maksimhorowitz/nflscrapR")
library(nflscrapR)
library(tidyverse)
library(readr)
library(pander)
library(dplyr)
library(na.tools)
library(ggimage)
library(teamcolors)
library(plyr)
library(readr)
library(glue)
library(animate)
##reset
setwd("~/")
gid <- paste(getwd())
gid
device <- ""
if (gid == "/Volumes/HDD/Users/colinwelsh") {
##Maverick - MBP
setwd("~/Documents/dev/football")
device <- "Maverick (MBP)"
} else if (gid == "/Users/ColinWelsh") {
##Goose - iMac
setwd("~/Documents/dev/football")
device <- "Goose (iMac)"
##add Goose
}
print(paste(device, "is ready for some football", sep = " "))
rm(gid, device)
# other dependent variables
userYear <- 2019 ##necessary for saved
userWeek <- 10 ##not necessary at the moment
fgame_ids <- paste("data/games/reg_season/reg_games_", userYear, ".csv", sep ="")
fgame_ids <- paste("data/games/reg_season/reg_games_", userYear, ".csv", sep ="")
game_ids <- read.csv(fgame_ids, check.names = FALSE)
currentGameIDs <- game_ids$game_id
#pull games in 2019 season that match today's date
currentGames <- grep(date, currentGameIDs)
games_in_play <- currentGameIDs[currentGames]
##can't figure this out yet
#
#  games_in_play <- game_ids$state_of_game[currentGames] != "POST"
#
#  nplay <- length(games_in_play)
#  nplayLoop <- 1
#
# scrape pbp of active games
# if 0 games, scrape scores
for (x in games_in_play)
{
f <- paste("data/games/", userYear, "/", x, ".csv", sep = "")
fplayers <-  paste("data/players/", userYear, "/", x, "players", ".csv", sep = "")
if (file.exists(fplayers)==TRUE & grepl("END GAME", y$desc[nrow(y)]) == TRUE)
{
xplayers <- player_game(x)
write.csv(xplayers, fplayers, row.names = FALSE)
} else {
xplayers <- player_game(x)
write.csv(xplayers, fplayers, row.names = FALSE)
}
if (file.exists(f)==TRUE)
{
#read game csv
y <- read.csv(f, check.names=FALSE)
tail(y)
#check if y$desc contains "END GAME"
#if x has END GAME change state_of_game to POST
if (grepl("END GAME", y$desc[nrow(y)]) == TRUE)
{
print(paste("Game", x, "is over.", sep = " "))
game_ids[game_ids$game_id == x, "state_of_game"] <- "POST"
game_ids[game_ids$game_id == x, "away_score"] <- y$total_away_score[nrow(y)]
game_ids[game_ids$game_id == x, "home_score"] <- y$total_home_score[nrow(y)]
print(paste("Changing the state of game for", x, "to POST", sep = " "))
write.csv(game_ids, fgame_ids, row.names = FALSE)
}
else
{
#scrape
print(paste("Scraping game ", x, sep = ""))
print(paste(game_ids[game_ids$game_id == x, "away_team"], "vs", game_ids[game_ids$game_id == x, "home_team"], sep = " "))
y <- scrape_json_play_by_play(x)
tail(y)
game_ids$X <- NULL ## annoying glitch
if (grepl("END GAME", y$desc[nrow(y)]) == TRUE) {
print(paste("Game", x, "is over.", sep = " "))
print(paste(game_ids[game_ids$game_id == x, "away_team"], "vs", game_ids[game_ids$game_id == x, "home_team"], sep = " "))
game_ids[game_ids$game_id == x, "state_of_game"] <- "POST"
game_ids[game_ids$game_id == x, "away_score"] <- y$total_away_score[nrow(y)]
game_ids[game_ids$game_id == x, "home_score"] <- y$total_home_score[nrow(y)]
print(paste("Changing the state of game for ", x, " to POST", sep = ""))
write.csv(game_ids, fgame_ids, row.names=FALSE)
}
write.csv(y, file = paste("data/games/", userYear,"/", x, ".csv", sep = ""), row.names=FALSE)
}
}
else
{
print(paste("Scraping game", x, sep = " "))
print(
paste(
game_ids[
game_ids$game_id == x, "away_team"],
"vs",
game_ids[game_ids$game_id == x, "home_team"],
sep = " "
)
)
y <- scrape_json_play_by_play(x)
tail(y)
write.csv(y, file = paste("data/games/", userYear,"/", x, ".csv", sep = ""), row.names=FALSE)
}
xawayscore <- y$total_away_score[nrow(y)]
xawayteam <- y$away_team[1]
xhomescore <- y$total_home_score[nrow(y)]
xhometeam <- y$home_team[1]
print(paste(xawayteam, ": ", xawayscore, " @ ", xhometeam, ": ", xhomescore, sep = ""))
print(paste("Last play:", y$desc[nrow(y)], sep=""))
}
fgame_ids <- paste("data/games/reg_season/reg_games_", userYear, ".csv", sep ="")
game_ids <- read.csv(fgame_ids, check.names = FALSE)
currentGameIDs <- game_ids$game_id
#pull games in 2019 season that match today's date
currentGames <- grep(date, currentGameIDs)
games_in_play <- currentGameIDs[currentGames]
##can't figure this out yet
#
#  games_in_play <- game_ids$state_of_game[currentGames] != "POST"
#
#  nplay <- length(games_in_play)
#  nplayLoop <- 1
#
# scrape pbp of active games
# if 0 games, scrape scores
for (x in games_in_play)
{
f <- paste("data/games/", userYear, "/", x, ".csv", sep = "")
fplayers <-  paste("data/players/", userYear, "/", x, "players", ".csv", sep = "")
if (file.exists(fplayers)==TRUE & grepl("END GAME", y$desc[nrow(y)]) == TRUE)
{
xplayers <- player_game(x)
write.csv(xplayers, fplayers, row.names = FALSE)
} else {
xplayers <- player_game(x)
write.csv(xplayers, fplayers, row.names = FALSE)
}
if (file.exists(f)==TRUE)
{
#read game csv
y <- read.csv(f, check.names=FALSE)
tail(y)
#check if y$desc contains "END GAME"
#if x has END GAME change state_of_game to POST
if (grepl("END GAME", y$desc[nrow(y)]) == TRUE)
{
print(paste("Game", x, "is over.", sep = " "))
game_ids[game_ids$game_id == x, "state_of_game"] <- "POST"
game_ids[game_ids$game_id == x, "away_score"] <- y$total_away_score[nrow(y)]
game_ids[game_ids$game_id == x, "home_score"] <- y$total_home_score[nrow(y)]
print(paste("Changing the state of game for", x, "to POST", sep = " "))
write.csv(game_ids, fgame_ids, row.names = FALSE)
}
else
{
#scrape
print(paste("Scraping game ", x, sep = ""))
print(paste(game_ids[game_ids$game_id == x, "away_team"], "vs", game_ids[game_ids$game_id == x, "home_team"], sep = " "))
y <- scrape_json_play_by_play(x)
tail(y)
game_ids$X <- NULL ## annoying glitch
if (grepl("END GAME", y$desc[nrow(y)]) == TRUE) {
print(paste("Game", x, "is over.", sep = " "))
print(paste(game_ids[game_ids$game_id == x, "away_team"], "vs", game_ids[game_ids$game_id == x, "home_team"], sep = " "))
game_ids[game_ids$game_id == x, "state_of_game"] <- "POST"
game_ids[game_ids$game_id == x, "away_score"] <- y$total_away_score[nrow(y)]
game_ids[game_ids$game_id == x, "home_score"] <- y$total_home_score[nrow(y)]
print(paste("Changing the state of game for ", x, " to POST", sep = ""))
write.csv(game_ids, fgame_ids, row.names=FALSE)
}
write.csv(y, file = paste("data/games/", userYear,"/", x, ".csv", sep = ""), row.names=FALSE)
}
}
else
{
print(paste("Scraping game", x, sep = " "))
print(
paste(
game_ids[
game_ids$game_id == x, "away_team"],
"vs",
game_ids[game_ids$game_id == x, "home_team"],
sep = " "
)
)
y <- scrape_json_play_by_play(x)
tail(y)
write.csv(y, file = paste("data/games/", userYear,"/", x, ".csv", sep = ""), row.names=FALSE)
}
xawayscore <- y$total_away_score[nrow(y)]
xawayteam <- y$away_team[1]
xhomescore <- y$total_home_score[nrow(y)]
xhometeam <- y$home_team[1]
print(paste(xawayteam, ": ", xawayscore, " @ ", xhometeam, ": ", xhomescore, sep = ""))
print(paste("Last play:", y$desc[nrow(y)], sep=""))
}
