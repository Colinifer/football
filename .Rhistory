View(sleeper_api_players)
pluck(sleeper_api_players, row_n)
sleeper_api_players %>% unnest_wider(sleeper_api_players)
sleeper_api_players %>% unnest(sleeper_api_players)
sleeper_api_players %>% names()
sleeper_api_players %>% hoist(names(sleeper_api_players), position = "position", college = "college")
sleeper_api_players %>% hoist(position = "position", college = "college")
eeper_api_players %>% hoist(sleeper_api_players, position = "position", college = "college")
sleeper_api_players %>% hoist(sleeper_api_players, position = "position", college = "college")
sleeper_api_players[1]
sleeper_api_players[[1]]
tibble(user = gh_users)
# Packages & Init Setup ---------------------------------------------------
# devtools::install_github("dynastyprocess/ffscrapr")
# devtools::install_github("jthomasmock/espnscrapeR")
proj_name <- "football"
pkgs <- c(
"devtools",
"tidyverse",
"nflfastR",
"espnscrapeR",
"DBI",
"odbc",
"RMariaDB",
"distill",
"httr",
"readr",
"pander",
"furrr",
"na.tools",
"ggimage",
"teamcolors",
"glue",
"dplyr",
"jsonlite",
"RJSONIO",
"tictoc",
"animation",
"gt",
"reactable",
"png",
"DT",
"ggthemes",
"ggforce",
"ggridges",
"ggrepel",
"ggpmisc",
"ggbeeswarm",
"cowplot",
"gridExtra",
"grid",
"extrafont",
"shadowtext",
"tidytext",
"RCurl"
)
installed_packages <- pkgs %in%
rownames(installed.packages())
if (any(installed_packages == FALSE)) {
install.packages(pkgs[!installed_packages])
}
lapply(pkgs, library, character.only = TRUE)
# library("nflscrapR") # doesn't work anymore
library("nflfastR")
# library("ffscrapr")
# Detach all packages
# lapply(paste0('package:', names(sessionInfo()$otherPkgs)), detach, character.only=TRUE, unload=TRUE)
rm(pkgs, installed_packages)
source("../initR/init.R")
fx.setdir(proj_name)
# Create standard objects -------------------------------------------------
# Connect to DB
source("../initR/con.R")
dbListTables(con)
dbDisconnect(con)
# source("fantasy_football/ff_init.R")
install.packages(c("broom", "car", "cpp11", "ggfortify", "htmlwidgets", "quantreg", "reactable", "readr", "rmarkdown", "survival", "systemfonts", "xfun"))
# Packages & Init Setup ---------------------------------------------------
# devtools::install_github("dynastyprocess/ffscrapr")
# devtools::install_github("jthomasmock/espnscrapeR")
proj_name <- "football"
pkgs <- c(
"devtools",
"tidyverse",
"nflfastR",
"espnscrapeR",
"DBI",
"odbc",
"RMariaDB",
"distill",
"httr",
"readr",
"pander",
"furrr",
"na.tools",
"ggimage",
"teamcolors",
"glue",
"dplyr",
"jsonlite",
"RJSONIO",
"tictoc",
"animation",
"gt",
"reactable",
"png",
"DT",
"ggthemes",
"ggforce",
"ggridges",
"ggrepel",
"ggpmisc",
"ggbeeswarm",
"cowplot",
"gridExtra",
"grid",
"extrafont",
"shadowtext",
"tidytext",
"RCurl"
)
installed_packages <- pkgs %in%
rownames(installed.packages())
if (any(installed_packages == FALSE)) {
install.packages(pkgs[!installed_packages])
}
lapply(pkgs, library, character.only = TRUE)
# library("nflscrapR") # doesn't work anymore
library("nflfastR")
# library("ffscrapr")
# Detach all packages
# lapply(paste0('package:', names(sessionInfo()$otherPkgs)), detach, character.only=TRUE, unload=TRUE)
rm(pkgs, installed_packages)
source("../initR/init.R")
fx.setdir(proj_name)
# Create standard objects -------------------------------------------------
# Connect to DB
source("../initR/con.R")
dbListTables(con)
dbDisconnect(con)
# source("fantasy_football/ff_init.R")
sleeper_api_players <- jsonlite::fromJSON(url('https://api.sleeper.app/v1/players/nfl'), flatten = T)
# Sleeper API
sleeper_api_players_url <- 'https://api.sleeper.app/v1/players/nfl'
sleeper_api_players <- jsonlite::fromJSON(url('https://api.sleeper.app/v1/players/nfl'), flatten = T)
sleeper_api_players
sleeper_api_players %>% view()
View(sleeper_api_players)
sleeper_api_players[["4034"]]
sleeper_api_players[["4034"]]
sleeper_api_players[["3198"]]
sleep.players_rows <- names(sleeper_api_players)
sleep.players_cols <- character()
for(nR in sleep.players_rows){
sleep.players_cols_names <- names(sleeper_api_players[[nR]])
sleep.players_cols <- c(sleep.players_cols, sleep.players_cols_names[!(sleep.players_cols_names %in% sleep.players_cols)])
}
players_columns
sleep.players_cols
getPlayersFromSleeper <- function(){
nflPlayers <- jsonlite::fromJSON("https://api.sleeper.app/v1/players/nfl", flatten = TRUE)
#nflPlayers[[1]]
nflPlayersRows <- names(nflPlayers)
nflPlayerCols <- character()
for(nR in nflPlayersRows){
nflColNames <- names(nflPlayers[[nR]])
nflPlayerCols <- c(nflPlayerCols, nflColNames[!(nflColNames %in% nflPlayerCols)])
}
pL <- unlist(nflPlayers[["4034"]])
pL1 <- unlist(nflPlayers[["3198"]])
pL <- rbind(pL,pL1)
pL2 <- as.data.frame(pL, stringsAsFactors=FALSE)
for(i in 1:ncol(pL2)){#i=1
if(!is.na(suppressWarnings(any(as.numeric(pL2[,i]))))) pL2[,i] <- as.numeric(pL2[,i])
}
for(nC in nflPlayerCols){
if(!(nC %in% colnames(pL2))){
pL2[,nC] <- NA
}
}
allPlayers <- pL2[0,]
for(nI in 1:length(nflPlayersRows)){#nI=1
nP <- nflPlayersRows[nI]
pL <- unlist(nflPlayers[[nP]])
for(i in 1:ncol(allPlayers)){#i=1
cName <- colnames(allPlayers)[i]
if(cName %in% names(pL)){
if(is.na(suppressWarnings(as.numeric(pL[cName])))){
allPlayers[nI,i] <- pL[cName]
}else{
allPlayers[nI,i] <- as.numeric(pL[cName])
}
}
}
}
#sPlayers <- correctSleeperNames(allPlayers)
sPlayers <- allPlayers#[!is.na(allPlayers$position) & !is.na(allPlayers$team),]
sPlayers$name <- paste(sPlayers$first_name,sPlayers$last_name)#x=1
sPlayers <- correctSleeperNames(sPlayers)
sPlayers <- updateTeamNames(sPlayers)
if(nrow(sPlayers) > 0){
sPlayers$pId <- sapply(1:nrow(sPlayers), function(x){#x=1
if(!is.na(sPlayers[x,'position']) && sPlayers[x,'position'] == "DEF"){
paste(sPlayers[x,'last_name'], sPlayers[x,'team'], "DST", sep="|")
}else{
paste(sPlayers[x,'name'], sPlayers[x,'team'], sPlayers[x,'position'], sep="|")
}
})
}
return(sPlayers)
}
getPlayersFromSleeper()
raw_json <- jsonlite::fromJSON("https://api.sleeper.app/v1/players/nfl")
message("Parse raw data...")
roster <-
purrr::map_dfr(raw_json, function(x) purrr::map(x, function(y) ifelse(is.null(y), NA, y))) %>%
dplyr::na_if("") %>%
dplyr::mutate_if(is.character, stringr::str_trim) %>%
dplyr::filter(!(is.na(team) & is.na(gsis_id)), !player_id %in% nflfastR::teams_colors_logos$team_abbr, first_name != "Duplicate") %>%
dplyr::left_join(readRDS("R/na_map.rds"), by = c("sportradar_id" = "id")) %>%
dplyr::mutate(
gsis_id = dplyr::if_else(is.na(gsis_id), gsis, gsis_id),
update_dt = lubridate::now("America/New_York"),
season = dplyr::if_else(
lubridate::month(update_dt) < 3,
lubridate::year(update_dt) - 1,
lubridate::year(update_dt)
),
index = 1:dplyr::n(),
headshot_url = dplyr::if_else(is.na(espn_id), NA_character_, as.character(glue::glue("https://a.espncdn.com/combiner/i?img=/i/headshots/nfl/players/full/{espn_id}.png")))
)
rm(raw_json)
readRDS(url("https://github.com/mrcaseb/nflfastR-roster/blob/18743a3ec379962c6f016b96113b2dd7d31cb689/R/na_map.rds?raw=true"))
na_map <- readRDS(url("https://github.com/mrcaseb/nflfastR-roster/blob/18743a3ec379962c6f016b96113b2dd7d31cb689/R/na_map.rds?raw=true"))
message("Parse raw data...")
roster <-
purrr::map_dfr(sleeper_api_players, function(x) purrr::map(x, function(y) ifelse(is.null(y), NA, y))) %>%
dplyr::na_if("") %>%
dplyr::mutate_if(is.character, stringr::str_trim) %>%
dplyr::filter(!(is.na(team) & is.na(gsis_id)), !player_id %in% nflfastR::teams_colors_logos$team_abbr, first_name != "Duplicate") %>%
dplyr::left_join(na_map, by = c("sportradar_id" = "id")) %>%
dplyr::mutate(
gsis_id = dplyr::if_else(is.na(gsis_id), gsis, gsis_id),
update_dt = lubridate::now("America/New_York"),
season = dplyr::if_else(
lubridate::month(update_dt) < 3,
lubridate::year(update_dt) - 1,
lubridate::year(update_dt)
),
index = 1:dplyr::n(),
headshot_url = dplyr::if_else(is.na(espn_id), NA_character_, as.character(glue::glue("https://a.espncdn.com/combiner/i?img=/i/headshots/nfl/players/full/{espn_id}.png")))
)
View(roster)
na_map <- readRDS(url("https://github.com/mrcaseb/nflfastR-roster/blob/R/na_map.rds?raw=true"))
# devtools::install_github("dynastyprocess/ffscrapr")
# devtools::install_github("jthomasmock/espnscrapeR")
proj_name <- "football"
pkgs <- c(
"devtools",
"tidyverse",
"nflfastR",
"espnscrapeR",
"DBI",
"odbc",
"RMariaDB",
"distill",
"httr",
"readr",
"pander",
"furrr",
"na.tools",
"ggimage",
"teamcolors",
"glue",
"dplyr",
"jsonlite",
"RJSONIO",
"tictoc",
"animation",
"gt",
"reactable",
"png",
"DT",
"ggthemes",
"ggforce",
"ggridges",
"ggrepel",
"ggpmisc",
"ggbeeswarm",
"cowplot",
"gridExtra",
"grid",
"extrafont",
"shadowtext",
"tidytext",
"RCurl"
)
installed_packages <- pkgs %in%
rownames(installed.packages())
if (any(installed_packages == FALSE)) {
install.packages(pkgs[!installed_packages])
}
lapply(pkgs, library, character.only = TRUE)
# library("nflscrapR") # doesn't work anymore
library("nflfastR")
# library("ffscrapr")
# Detach all packages
# lapply(paste0('package:', names(sessionInfo()$otherPkgs)), detach, character.only=TRUE, unload=TRUE)
rm(pkgs, installed_packages)
source("../initR/init.R")
fx.setdir(proj_name)
# Create standard objects -------------------------------------------------
# Connect to DB
source("../initR/con.R")
dbListTables(con)
dbDisconnect(con)
devtools::install_github("jthomasmock/espnscrapeR")
proj_name <- "football"
pkgs <- c(
"devtools",
"tidyverse",
"nflfastR",
"espnscrapeR",
"DBI",
"odbc",
"RMariaDB",
"distill",
"httr",
"readr",
"pander",
"furrr",
"na.tools",
"ggimage",
"teamcolors",
"glue",
"dplyr",
"jsonlite",
"RJSONIO",
"tictoc",
"animation",
"gt",
"reactable",
"png",
"DT",
"ggthemes",
"ggforce",
"ggridges",
"ggrepel",
"ggpmisc",
"ggbeeswarm",
"cowplot",
"gridExtra",
"grid",
"extrafont",
"shadowtext",
"tidytext",
"RCurl"
)
installed_packages <- pkgs %in%
rownames(installed.packages())
if (any(installed_packages == FALSE)) {
install.packages(pkgs[!installed_packages])
}
lapply(pkgs, library, character.only = TRUE)
library(tidyverse)
library(httr)
library(jsonlite)
# library(sqldf)
library(gt)
detach(package:purrr)
library(purrr)
library(glue)
# Create variables --------------------------------------------------------
# ESPN Fantasy Football
ff_fantasy_key <- "fantasy_football/data/fantasy_key.csv"
swid  <-  "{2BA315B4-5941-4B1C-A315-B459416B1CC1}"
espn_s2 <- "AEBtGuDXUCKk6SpqlY71qdBDW%2BYc5KGa80m%2F0EVX9NCF%2FIFBM5b8ZMKgrMovpUeUqFTp4M%2BrPbM1I4rT1Ra2oXbM847nUp25DBY9Q%2FsAPChAykF5VNEZ05VjF6Vu3thAU0WkzQeBbjkdzNGqfbmPtMNzrBy8oV7fcAlwh4X89q4XlfPNED8ppKynNj5admyBk7WaqNzQtZJLlStpyOjz3F3d5BwUtQ8kh390OPB5HEEPfiH4%2FBftKqsLF%2BlyhTFaDiM%3D"
kona_v3_environment <- '{"leagueId":1034400,"seasonId":null}'
kona_v3_teamcontrol <- '{"leagueId":1034400,"seasonId":2020,"teamId":8}'
# league_id <- c("1034400", "62746259", "39973580")
# team_id <- c("8", "9", "10")
# league_name <- c("Colin's Minions", "Drinker's Slushy Beer", "Family League 3.0")
# team_name <- c("Rhule Tide", "Golden Rhule", "Matt Rhules")
# fantasy_key <- data.frame(league_id, league_name, team_id, team_name)
# fantasy_key %>% write_csv(ff_fantasy_key)
cookies = c(`SWID` = swid,
`espn_s2` = espn_s2)
# 'kona_v3_environment_season_ffl' = kona_v3_environment,
# 'kona_v3_teamcontrol_ffl' = kona_v3_teamcontrol)
cookie <- paste(names(cookies), cookies, sep = "=", collapse = ";")
fantasy_key <- ff_fantasy_key %>% read_csv()
base = "https://fantasy.espn.com/apis/v3/games/ffl/seasons/"
year = Sys.Date() %>% format(format = "%Y")
mid = "/segments/0/leagues/"
leagueID <- fantasy_key$league_id[3]
tail = "?view=mDraftDetail&view=mLiveScoring&view=mMatchupScore&view=mPendingTransactions&view=mPositionalRatings&view=mSettings&view=mTeam&view=modular&view=mNav&view=mMatchupScore"
player_tail = "?view=kona_player_info"
wl_tail = "?view=proTeamSchedules_wl"
user_agent = "Mozilla/5.0 (Macintosh; Intel Mac OS X 10.14; rv:79.0) Gecko/20100101 Firefox/79.0"
x_fantasy_filter <-
c(
'{"players":{"filterSlotIds":{"value":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,23,24]},"filterRanksForScoringPeriodIds":{"value":[2]},"limit":100,"offset":0,"sortPercOwned":{"sortAsc":false,"sortPriority":1},"sortDraftRanks":{"sortPriority":100,"sortAsc":true,"value":"STANDARD"},"filterRanksForRankTypes":{"value":["PPR"]},"filterRanksForSlotIds":{"value":[0,2,4,6,17,16]},"filterStatsForTopScoringPeriodIds":{"value":2,"additionalValue":["002020","102020","002019","1120202","022020"]}}}',
'{"players":{"filterSlotIds":{"value":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,23,24]},"filterRanksForScoringPeriodIds":{"value":[2]},"limit":100,"offset":100,"sortAppliedStatTotal":{"sortAsc":false,"sortPriority":1,"value":"002020"},"sortDraftRanks":{"sortPriority":100,"sortAsc":true,"value":"STANDARD"},"filterRanksForRankTypes":{"value":["PPR"]},"filterRanksForSlotIds":{"value":[0,2,4,6,17,16]},"filterStatsForTopScoringPeriodIds":{"value":2,"additionalValue":["002020","102020","002019","1120202","022020"]}}}',
'{"players":{"filterSlotIds":{"value":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,23,24]},"filterRanksForScoringPeriodIds":{"value":[2]},"limit":100,"offset":200,"sortAppliedStatTotal":{"sortAsc":false,"sortPriority":1,"value":"002020"},"sortDraftRanks":{"sortPriority":100,"sortAsc":true,"value":"STANDARD"},"filterRanksForRankTypes":{"value":["PPR"]},"filterRanksForSlotIds":{"value":[0,2,4,6,17,16]},"filterStatsForTopScoringPeriodIds":{"value":2,"additionalValue":["002020","102020","002019","1120202","022020"]}}}',
'{"players":{"filterSlotIds":{"value":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,23,24]},"filterRanksForScoringPeriodIds":{"value":[2]},"limit":100,"offset":300,"sortAppliedStatTotal":{"sortAsc":false,"sortPriority":1,"value":"002020"},"sortDraftRanks":{"sortPriority":100,"sortAsc":true,"value":"STANDARD"},"filterRanksForRankTypes":{"value":["PPR"]},"filterRanksForSlotIds":{"value":[0,2,4,6,17,16]},"filterStatsForTopScoringPeriodIds":{"value":2,"additionalValue":["002020","102020","002019","1120202","022020"]}}}'
)
# Scrape free agents from all leagues
source('fantasy_football/fa_scrape.R')
league_id <- c("1034400", "62746259", "39973580")
team_id <- c("8", "9", "10")
league_name <- c("Colin's Minions", "Drinker's Slushy Beer", "Family League 3.0")
team_name <- c("Rhule Tide", "Golden Rhule", "Matt Rhules")
fantasy_key <- data.frame(league_id, league_name, team_id, team_name)
fantasy_key %>% write_rds(ff_fantasy_key)
ff_fantasy_key <- "fantasy_football/data/fantasy_key.rds"
league_id <- c("1034400", "62746259", "39973580")
team_id <- c("8", "9", "10")
league_name <- c("Colin's Minions", "Drinker's Slushy Beer", "Family League 3.0")
team_name <- c("Rhule Tide", "Golden Rhule", "Matt Rhules")
fantasy_key <- data.frame(league_id, league_name, team_id, team_name)
fantasy_key %>% write_rds(ff_fantasy_key)
ff_fantasy_key <- "fantasy_football/data/fantasy_key.csv"
league_id <- c("1034400", "62746259", "39973580")
team_id <- c("8", "9", "10")
league_name <- c("Colin's Minions", "Drinker's Slushy Beer", "Family League 3.0")
team_name <- c("Rhule Tide", "Golden Rhule", "Matt Rhules")
fantasy_key <- data.frame(league_id, league_name, team_id, team_name)
fantasy_key %>% write_csv(ff_fantasy_key)
# ESPN Fantasy Football
swid  <-  "{2BA315B4-5941-4B1C-A315-B459416B1CC1}"
espn_s2 <- "AEBtGuDXUCKk6SpqlY71qdBDW%2BYc5KGa80m%2F0EVX9NCF%2FIFBM5b8ZMKgrMovpUeUqFTp4M%2BrPbM1I4rT1Ra2oXbM847nUp25DBY9Q%2FsAPChAykF5VNEZ05VjF6Vu3thAU0WkzQeBbjkdzNGqfbmPtMNzrBy8oV7fcAlwh4X89q4XlfPNED8ppKynNj5admyBk7WaqNzQtZJLlStpyOjz3F3d5BwUtQ8kh390OPB5HEEPfiH4%2FBftKqsLF%2BlyhTFaDiM%3D"
kona_v3_environment <- '{"leagueId":1034400,"seasonId":null}'
kona_v3_teamcontrol <- '{"leagueId":1034400,"seasonId":2020,"teamId":8}'
# ff_fantasy_key <- "fantasy_football/data/fantasy_key.rds"
# league_id <- c("1034400", "62746259", "39973580")
# team_id <- c("8", "9", "10")
# league_name <- c("Colin's Minions", "Drinker's Slushy Beer", "Family League 3.0")
# team_name <- c("Rhule Tide", "Golden Rhule", "Matt Rhules")
# fantasy_key <- data.frame(league_id, league_name, team_id, team_name)
# fantasy_key %>% write_rds(ff_fantasy_key)
cookies = c(`SWID` = swid,
`espn_s2` = espn_s2)
# 'kona_v3_environment_season_ffl' = kona_v3_environment,
# 'kona_v3_teamcontrol_ffl' = kona_v3_teamcontrol)
cookie <- paste(names(cookies), cookies, sep = "=", collapse = ";")
fantasy_key <- ff_fantasy_key %>% read_csv()
base = "https://fantasy.espn.com/apis/v3/games/ffl/seasons/"
year = Sys.Date() %>% format(format = "%Y")
mid = "/segments/0/leagues/"
leagueID <- fantasy_key$league_id[3]
tail = "?view=mDraftDetail&view=mLiveScoring&view=mMatchupScore&view=mPendingTransactions&view=mPositionalRatings&view=mSettings&view=mTeam&view=modular&view=mNav&view=mMatchupScore"
player_tail = "?view=kona_player_info"
wl_tail = "?view=proTeamSchedules_wl"
user_agent = "Mozilla/5.0 (Macintosh; Intel Mac OS X 10.14; rv:79.0) Gecko/20100101 Firefox/79.0"
x_fantasy_filter <-
c(
'{"players":{"filterSlotIds":{"value":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,23,24]},"filterRanksForScoringPeriodIds":{"value":[2]},"limit":100,"offset":0,"sortPercOwned":{"sortAsc":false,"sortPriority":1},"sortDraftRanks":{"sortPriority":100,"sortAsc":true,"value":"STANDARD"},"filterRanksForRankTypes":{"value":["PPR"]},"filterRanksForSlotIds":{"value":[0,2,4,6,17,16]},"filterStatsForTopScoringPeriodIds":{"value":2,"additionalValue":["002020","102020","002019","1120202","022020"]}}}',
'{"players":{"filterSlotIds":{"value":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,23,24]},"filterRanksForScoringPeriodIds":{"value":[2]},"limit":100,"offset":100,"sortAppliedStatTotal":{"sortAsc":false,"sortPriority":1,"value":"002020"},"sortDraftRanks":{"sortPriority":100,"sortAsc":true,"value":"STANDARD"},"filterRanksForRankTypes":{"value":["PPR"]},"filterRanksForSlotIds":{"value":[0,2,4,6,17,16]},"filterStatsForTopScoringPeriodIds":{"value":2,"additionalValue":["002020","102020","002019","1120202","022020"]}}}',
'{"players":{"filterSlotIds":{"value":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,23,24]},"filterRanksForScoringPeriodIds":{"value":[2]},"limit":100,"offset":200,"sortAppliedStatTotal":{"sortAsc":false,"sortPriority":1,"value":"002020"},"sortDraftRanks":{"sortPriority":100,"sortAsc":true,"value":"STANDARD"},"filterRanksForRankTypes":{"value":["PPR"]},"filterRanksForSlotIds":{"value":[0,2,4,6,17,16]},"filterStatsForTopScoringPeriodIds":{"value":2,"additionalValue":["002020","102020","002019","1120202","022020"]}}}',
'{"players":{"filterSlotIds":{"value":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,23,24]},"filterRanksForScoringPeriodIds":{"value":[2]},"limit":100,"offset":300,"sortAppliedStatTotal":{"sortAsc":false,"sortPriority":1,"value":"002020"},"sortDraftRanks":{"sortPriority":100,"sortAsc":true,"value":"STANDARD"},"filterRanksForRankTypes":{"value":["PPR"]},"filterRanksForSlotIds":{"value":[0,2,4,6,17,16]},"filterStatsForTopScoringPeriodIds":{"value":2,"additionalValue":["002020","102020","002019","1120202","022020"]}}}'
)
# Scrape free agents from all leagues
source('fantasy_football/fa_scrape.R')
# nflfastR roster
nflfastr.rosters <-
readRDS(
url(
'https://github.com/mrcaseb/nflfastR-roster/blob/master/data/nflfastR-roster.rds?raw=true'
)
)
nflfastr.rosters %>%
filter(pbp_id > 0)
# Sleeper API
sleeper_api_players_url <-
'https://api.sleeper.app/v1/players/nfl'
sleeper_api_players <-
jsonlite::fromJSON(url('https://api.sleeper.app/v1/players/nfl'), flatten = T)
na_map <-
readRDS(
url(
"https://github.com/mrcaseb/nflfastR-roster/blob/master/R/na_map.rds?raw=true"
)
)
# source("https://github.com/mrcaseb/nflfastR-roster/blob/master/R/update_roster.R")
sleep.players <-
purrr::map_dfr(sleeper_api_players, function(x)
purrr::map(x, function(y)
ifelse(is.null(y), NA, y))) %>%
dplyr::na_if("") %>%
dplyr::mutate_if(is.character, stringr::str_trim) %>%
dplyr::filter(
!(is.na(team) &
is.na(gsis_id)),
!player_id %in% nflfastR::teams_colors_logos$team_abbr,
first_name != "Duplicate"
) %>%
dplyr::left_join(na_map, by = c("sportradar_id" = "id")) %>%
dplyr::mutate(
gsis_id = dplyr::if_else(is.na(gsis_id), gsis, gsis_id),
update_dt = lubridate::now("America/New_York"),
season = dplyr::if_else(
lubridate::month(update_dt) < 3,
lubridate::year(update_dt) - 1,
lubridate::year(update_dt)
),
index = 1:dplyr::n(),
headshot_url = dplyr::if_else(is.na(espn_id), NA_character_, as.character(
glue::glue(
"https://a.espncdn.com/combiner/i?img=/i/headshots/nfl/players/full/{espn_id}.png"
)
))
)
