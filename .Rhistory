addTargets <- function(x) {
## create targets dataframe
targets <- filter(xpbp, PlayType == "Pass" & Receiver != "NA")
## add targets to stats
for (z in xreceivers) {
xplayers[xplayers$playerID == z, "targets"] <- sum(targets$Receiver_ID == z)
}
## bring targets column next to the receptions
xplayers <- xplayers[,c(1:20,ncol(xplayers),22:ncol(xplayers)-1)]
write.csv(xplayers, fplayers, row.names = FALSE)
}
targets <- filter(xpbp, PlayType == "Pass" & Receiver != "NA")
xreceivers
# set custom variables
userYear <- 2019 ##necessary for saved
userWeek <- 16 ##not necessary at the moment
today <- Sys.Date()
# test date
date <- 201912
##  date <- format(today, format="%Y%m%d")
fgame_ids <- paste("data/games/reg_season/reg_games_", userYear, ".csv", sep ="")
## read Game IDs
game_ids <- read.csv(fgame_ids, check.names = FALSE)
## save Game IDs
# write.csv(game_ids, file = fgame_ids, row.names = FALSE)
y <- data.frame()
currentGameIDs <- game_ids$game_id
#pull games in 2019 season that match today's date
currentGames <- grep(date, currentGameIDs)
games_in_play <- currentGameIDs[currentGames]
##can't figure this out yet
#
#  games_in_play <- game_ids$state_of_game[currentGames] != "POST"
#
#  nplay <- length(games_in_play)
#  nplayLoop <- 1
#
# scrape pbp of active games
# if 0 games, scrape scores
for (x in games_in_play)
{
f <- paste("data/games/", userYear, "/", x, ".csv", sep = "")
fplayers <-  paste("data/players/", userYear, "/", x, "players", ".csv", sep = "")
if (file.exists(f)==TRUE)
{
#read game csv
y <- read.csv(f, check.names=FALSE)
tail(y)
#check if y$desc contains "END GAME"
#if x has END GAME change state_of_game to POST
if (grepl("END GAME", y$desc[nrow(y)]) == TRUE)
{
print(paste("Game", x, "is over.", sep = " "))
game_ids[game_ids$game_id == x, "state_of_game"] <- "POST"
game_ids[game_ids$game_id == x, "away_score"] <- y$total_away_score[nrow(y)]
game_ids[game_ids$game_id == x, "home_score"] <- y$total_home_score[nrow(y)]
print(paste("Changing the state of game for", x, "to POST", sep = " "))
write.csv(game_ids, fgame_ids, row.names = FALSE)
}
else
{
#scrape
print(paste("Scraping game ", x, sep = ""))
print(paste(game_ids[game_ids$game_id == x, "away_team"], "vs", game_ids[game_ids$game_id == x, "home_team"], sep = " "))
y <- scrape_json_play_by_play(x)
tail(y)
game_ids$X <- NULL ## annoying glitch
if (grepl("END GAME", y$desc[nrow(y)]) == TRUE) {
print(paste("Game", x, "is over.", sep = " "))
print(paste(game_ids[game_ids$game_id == x, "away_team"], "vs", game_ids[game_ids$game_id == x, "home_team"], sep = " "))
game_ids[game_ids$game_id == x, "state_of_game"] <- "POST"
game_ids[game_ids$game_id == x, "away_score"] <- y$total_away_score[nrow(y)]
game_ids[game_ids$game_id == x, "home_score"] <- y$total_home_score[nrow(y)]
print(paste("Changing the state of game for ", x, " to POST", sep = ""))
write.csv(game_ids, fgame_ids, row.names=FALSE)
}
write.csv(y, file = paste("data/games/", userYear,"/", x, ".csv", sep = ""), row.names=FALSE)
}
}
else
{
print(paste("Scraping game", x, sep = " "))
print(
paste(
game_ids[
game_ids$game_id == x, "away_team"],
"vs",
game_ids[game_ids$game_id == x, "home_team"],
sep = " "
)
)
y <- scrape_json_play_by_play(x)
tail(y)
write.csv(y, file = paste("data/games/", userYear,"/", x, ".csv", sep = ""), row.names=FALSE)
}
xawayscore <- y$total_away_score[nrow(y)]
xawayteam <- y$away_team[1]
xhomescore <- y$total_home_score[nrow(y)]
xhometeam <- y$home_team[1]
print(paste(xawayteam, ": ", xawayscore, " @ ", xhometeam, ": ", xhomescore, sep = ""))
print(paste("Last play:", y$desc[nrow(y)], sep=""))
## add to the normal scrape functions
if (file.exists(fplayers)==TRUE & grepl("END GAME", y$desc[nrow(y)]) == TRUE)
{
xplayers <- player_game(x)
write.csv(xplayers, fplayers, row.names = FALSE)
print(paste("X =", x))
xpbp <- game_play_by_play(x)
addTargets(x)
} else {
## scrape player stats
xplayers <- player_game(x)
print(paste("X =", x))
xpbp <- game_play_by_play(x)
addTargets(x)
}
addTargets(x)
}
source("functions/addTargets.R")
# set custom variables
userYear <- 2019 ##necessary for saved
userWeek <- 16 ##not necessary at the moment
today <- Sys.Date()
# test date
date <- 201912
##  date <- format(today, format="%Y%m%d")
fgame_ids <- paste("data/games/reg_season/reg_games_", userYear, ".csv", sep ="")
## read Game IDs
game_ids <- read.csv(fgame_ids, check.names = FALSE)
## save Game IDs
# write.csv(game_ids, file = fgame_ids, row.names = FALSE)
y <- data.frame()
currentGameIDs <- game_ids$game_id
#pull games in 2019 season that match today's date
currentGames <- grep(date, currentGameIDs)
games_in_play <- currentGameIDs[currentGames]
##can't figure this out yet
#
#  games_in_play <- game_ids$state_of_game[currentGames] != "POST"
#
#  nplay <- length(games_in_play)
#  nplayLoop <- 1
#
# scrape pbp of active games
# if 0 games, scrape scores
for (x in games_in_play)
{
f <- paste("data/games/", userYear, "/", x, ".csv", sep = "")
fplayers <-  paste("data/players/", userYear, "/", x, "players", ".csv", sep = "")
if (file.exists(f)==TRUE)
{
#read game csv
y <- read.csv(f, check.names=FALSE)
tail(y)
#check if y$desc contains "END GAME"
#if x has END GAME change state_of_game to POST
if (grepl("END GAME", y$desc[nrow(y)]) == TRUE)
{
print(paste("Game", x, "is over.", sep = " "))
game_ids[game_ids$game_id == x, "state_of_game"] <- "POST"
game_ids[game_ids$game_id == x, "away_score"] <- y$total_away_score[nrow(y)]
game_ids[game_ids$game_id == x, "home_score"] <- y$total_home_score[nrow(y)]
print(paste("Changing the state of game for", x, "to POST", sep = " "))
write.csv(game_ids, fgame_ids, row.names = FALSE)
}
else
{
#scrape
print(paste("Scraping game ", x, sep = ""))
print(paste(game_ids[game_ids$game_id == x, "away_team"], "vs", game_ids[game_ids$game_id == x, "home_team"], sep = " "))
y <- scrape_json_play_by_play(x)
tail(y)
game_ids$X <- NULL ## annoying glitch
if (grepl("END GAME", y$desc[nrow(y)]) == TRUE) {
print(paste("Game", x, "is over.", sep = " "))
print(paste(game_ids[game_ids$game_id == x, "away_team"], "vs", game_ids[game_ids$game_id == x, "home_team"], sep = " "))
game_ids[game_ids$game_id == x, "state_of_game"] <- "POST"
game_ids[game_ids$game_id == x, "away_score"] <- y$total_away_score[nrow(y)]
game_ids[game_ids$game_id == x, "home_score"] <- y$total_home_score[nrow(y)]
print(paste("Changing the state of game for ", x, " to POST", sep = ""))
write.csv(game_ids, fgame_ids, row.names=FALSE)
}
write.csv(y, file = paste("data/games/", userYear,"/", x, ".csv", sep = ""), row.names=FALSE)
}
}
else
{
print(paste("Scraping game", x, sep = " "))
print(
paste(
game_ids[
game_ids$game_id == x, "away_team"],
"vs",
game_ids[game_ids$game_id == x, "home_team"],
sep = " "
)
)
y <- scrape_json_play_by_play(x)
tail(y)
write.csv(y, file = paste("data/games/", userYear,"/", x, ".csv", sep = ""), row.names=FALSE)
}
xawayscore <- y$total_away_score[nrow(y)]
xawayteam <- y$away_team[1]
xhomescore <- y$total_home_score[nrow(y)]
xhometeam <- y$home_team[1]
print(paste(xawayteam, ": ", xawayscore, " @ ", xhometeam, ": ", xhomescore, sep = ""))
print(paste("Last play:", y$desc[nrow(y)], sep=""))
## add to the normal scrape functions
if (file.exists(fplayers)==TRUE & grepl("END GAME", y$desc[nrow(y)]) == TRUE)
{
xplayers <- player_game(x)
write.csv(xplayers, fplayers, row.names = FALSE)
print(paste("X =", x))
xpbp <- game_play_by_play(x)
addTargets(x)
} else {
## scrape player stats
xplayers <- player_game(x)
print(paste("X =", x))
xpbp <- game_play_by_play(x)
addTargets(x)
}
addTargets(x)
}
# set custom variables
userYear <- 2019 ##necessary for saved
userWeek <- 16 ##not necessary at the moment
today <- Sys.Date()
# test date
date <- 2019
##  date <- format(today, format="%Y%m%d")
fgame_ids <- paste("data/games/reg_season/reg_games_", userYear, ".csv", sep ="")
## read Game IDs
game_ids <- read.csv(fgame_ids, check.names = FALSE)
## save Game IDs
# write.csv(game_ids, file = fgame_ids, row.names = FALSE)
y <- data.frame()
currentGameIDs <- game_ids$game_id
#pull games in 2019 season that match today's date
currentGames <- grep(date, currentGameIDs)
games_in_play <- currentGameIDs[currentGames]
##can't figure this out yet
#
#  games_in_play <- game_ids$state_of_game[currentGames] != "POST"
#
#  nplay <- length(games_in_play)
#  nplayLoop <- 1
#
# scrape pbp of active games
# if 0 games, scrape scores
for (x in games_in_play)
{
f <- paste("data/games/", userYear, "/", x, ".csv", sep = "")
fplayers <-  paste("data/players/", userYear, "/", x, "players", ".csv", sep = "")
if (file.exists(f)==TRUE)
{
#read game csv
y <- read.csv(f, check.names=FALSE)
tail(y)
#check if y$desc contains "END GAME"
#if x has END GAME change state_of_game to POST
if (grepl("END GAME", y$desc[nrow(y)]) == TRUE)
{
print(paste("Game", x, "is over.", sep = " "))
game_ids[game_ids$game_id == x, "state_of_game"] <- "POST"
game_ids[game_ids$game_id == x, "away_score"] <- y$total_away_score[nrow(y)]
game_ids[game_ids$game_id == x, "home_score"] <- y$total_home_score[nrow(y)]
print(paste("Changing the state of game for", x, "to POST", sep = " "))
write.csv(game_ids, fgame_ids, row.names = FALSE)
}
else
{
#scrape
print(paste("Scraping game ", x, sep = ""))
print(paste(game_ids[game_ids$game_id == x, "away_team"], "vs", game_ids[game_ids$game_id == x, "home_team"], sep = " "))
y <- scrape_json_play_by_play(x)
tail(y)
game_ids$X <- NULL ## annoying glitch
if (grepl("END GAME", y$desc[nrow(y)]) == TRUE) {
print(paste("Game", x, "is over.", sep = " "))
print(paste(game_ids[game_ids$game_id == x, "away_team"], "vs", game_ids[game_ids$game_id == x, "home_team"], sep = " "))
game_ids[game_ids$game_id == x, "state_of_game"] <- "POST"
game_ids[game_ids$game_id == x, "away_score"] <- y$total_away_score[nrow(y)]
game_ids[game_ids$game_id == x, "home_score"] <- y$total_home_score[nrow(y)]
print(paste("Changing the state of game for ", x, " to POST", sep = ""))
write.csv(game_ids, fgame_ids, row.names=FALSE)
}
write.csv(y, file = paste("data/games/", userYear,"/", x, ".csv", sep = ""), row.names=FALSE)
}
}
else
{
print(paste("Scraping game", x, sep = " "))
print(
paste(
game_ids[
game_ids$game_id == x, "away_team"],
"vs",
game_ids[game_ids$game_id == x, "home_team"],
sep = " "
)
)
y <- scrape_json_play_by_play(x)
tail(y)
write.csv(y, file = paste("data/games/", userYear,"/", x, ".csv", sep = ""), row.names=FALSE)
}
xawayscore <- y$total_away_score[nrow(y)]
xawayteam <- y$away_team[1]
xhomescore <- y$total_home_score[nrow(y)]
xhometeam <- y$home_team[1]
print(paste(xawayteam, ": ", xawayscore, " @ ", xhometeam, ": ", xhomescore, sep = ""))
print(paste("Last play:", y$desc[nrow(y)], sep=""))
## add to the normal scrape functions
if (file.exists(fplayers)==TRUE & grepl("END GAME", y$desc[nrow(y)]) == TRUE)
{
xplayers <- player_game(x)
write.csv(xplayers, fplayers, row.names = FALSE)
print(paste("X =", x))
xpbp <- game_play_by_play(x)
addTargets(x)
} else {
## scrape player stats
xplayers <- player_game(x)
print(paste("X =", x))
xpbp <- game_play_by_play(x)
addTargets(x)
}
addTargets(x)
}
head(targets)
tail(y)
f
fplayers
fgame_ids
pbp2019
pbp2019 <- list.files(paste("data/games_data/", userYear, "/", sep = ""),
pattern = "*.csv", full.names = TRUE) %>%
lapply(read_csv) %>%
bind_rows
pbp2019
write.csv(pbp2019, file = paste("data/season_total/pbp", userYear,".csv", sep = ""), row.names=FALSE)
pbp2019 <- list.files(paste("data/games_data/", userYear, "/", sep = ""),
pattern = "*.csv", full.names = TRUE) %>%
lapply(read_csv) %>%
bind_rows
pbp2019 <- list.files(paste("data/games/", userYear, "/", sep = ""),
pattern = "*.csv", full.names = TRUE) %>%
lapply(read_csv) %>%
bind_rows
pbp2019
write.csv(pbp2019, file = paste("data/season_total/pbp", userYear,".csv", sep = ""), row.names=FALSE)
list.files(paste("data/games/", userYear, "/", sep = ""),
pattern = "*.csv", full.names = TRUE)
bind_rows()
?bind_rows
x
games_in_play
# set custom variables
userYear <- 2019 ##necessary for saved
userWeek <- 16 ##not necessary at the moment
today <- Sys.Date()
# test date
date <- 20191223
##  date <- format(today, format="%Y%m%d")
fgame_ids <- paste("data/games/reg_season/reg_games_", userYear, ".csv", sep ="")
## read Game IDs
game_ids <- read.csv(fgame_ids, check.names = FALSE)
## save Game IDs
# write.csv(game_ids, file = fgame_ids, row.names = FALSE)
y <- data.frame()
currentGameIDs <- game_ids$game_id
#pull games in 2019 season that match today's date
currentGames <- grep(date, currentGameIDs)
games_in_play <- currentGameIDs[currentGames]
paste("data/games/reg_season/reg_games_", userYear, ".csv", sep ="")
fgame_ids
game_ids
view(game_ids)
game_ids$game_url[240]
# set custom variables
userYear <- 2019 ##necessary for saved
userWeek <- 16 ##not necessary at the moment
today <- Sys.Date()
# test date
date <- 201912
##  date <- format(today, format="%Y%m%d")
fgame_ids <- paste("data/games/reg_season/reg_games_", userYear, ".csv", sep ="")
## read Game IDs
game_ids <- read.csv(fgame_ids, check.names = FALSE)
## save Game IDs
# write.csv(game_ids, file = fgame_ids, row.names = FALSE)
y <- data.frame()
currentGameIDs <- game_ids$game_id
#pull games in 2019 season that match today's date
currentGames <- grep(date, currentGameIDs)
games_in_play <- currentGameIDs[currentGames]
##can't figure this out yet
#
#  games_in_play <- game_ids$state_of_game[currentGames] != "POST"
#
#  nplay <- length(games_in_play)
#  nplayLoop <- 1
#
# scrape pbp of active games
# if 0 games, scrape scores
for (x in games_in_play)
{
f <- paste("data/games/", userYear, "/", x, ".csv", sep = "")
fplayers <-  paste("data/players/", userYear, "/", x, "players", ".csv", sep = "")
if (file.exists(f)==TRUE)
{
#read game csv
y <- read.csv(f, check.names=FALSE)
tail(y)
#check if y$desc contains "END GAME"
#if x has END GAME change state_of_game to POST
if (grepl("END GAME", y$desc[nrow(y)]) == TRUE)
{
print(paste("Game", x, "is over.", sep = " "))
game_ids[game_ids$game_id == x, "state_of_game"] <- "POST"
game_ids[game_ids$game_id == x, "away_score"] <- y$total_away_score[nrow(y)]
game_ids[game_ids$game_id == x, "home_score"] <- y$total_home_score[nrow(y)]
print(paste("Changing the state of game for", x, "to POST", sep = " "))
write.csv(game_ids, fgame_ids, row.names = FALSE)
}
else
{
#scrape
print(paste("Scraping game ", x, sep = ""))
print(paste(game_ids[game_ids$game_id == x, "away_team"], "vs", game_ids[game_ids$game_id == x, "home_team"], sep = " "))
y <- scrape_json_play_by_play(x)
tail(y)
game_ids$X <- NULL ## annoying glitch
if (grepl("END GAME", y$desc[nrow(y)]) == TRUE) {
print(paste("Game", x, "is over.", sep = " "))
print(paste(game_ids[game_ids$game_id == x, "away_team"], "vs", game_ids[game_ids$game_id == x, "home_team"], sep = " "))
game_ids[game_ids$game_id == x, "state_of_game"] <- "POST"
game_ids[game_ids$game_id == x, "away_score"] <- y$total_away_score[nrow(y)]
game_ids[game_ids$game_id == x, "home_score"] <- y$total_home_score[nrow(y)]
print(paste("Changing the state of game for ", x, " to POST", sep = ""))
write.csv(game_ids, fgame_ids, row.names=FALSE)
}
write.csv(y, file = paste("data/games/", userYear,"/", x, ".csv", sep = ""), row.names=FALSE)
}
}
else
{
print(paste("Scraping game", x, sep = " "))
print(
paste(
game_ids[
game_ids$game_id == x, "away_team"],
"vs",
game_ids[game_ids$game_id == x, "home_team"],
sep = " "
)
)
y <- scrape_json_play_by_play(x)
tail(y)
write.csv(y, file = paste("data/games/", userYear,"/", x, ".csv", sep = ""), row.names=FALSE)
}
xawayscore <- y$total_away_score[nrow(y)]
xawayteam <- y$away_team[1]
xhomescore <- y$total_home_score[nrow(y)]
xhometeam <- y$home_team[1]
print(paste(xawayteam, ": ", xawayscore, " @ ", xhometeam, ": ", xhomescore, sep = ""))
print(paste("Last play:", y$desc[nrow(y)], sep=""))
## add to the normal scrape functions
if (file.exists(fplayers)==TRUE & grepl("END GAME", y$desc[nrow(y)]) == TRUE)
{
xplayers <- player_game(x)
write.csv(xplayers, fplayers, row.names = FALSE)
print(paste("X =", x))
xpbp <- game_play_by_play(x)
addTargets(x)
} else {
## scrape player stats
xplayers <- player_game(x)
print(paste("X =", x))
xpbp <- game_play_by_play(x)
addTargets(x)
}
addTargets(x)
}
view(xplayers)
addTargets <- function(x) {
## create targets dataframe
targets <- filter(xpbp, PlayType == "Pass" & Receiver != "NA")
xreceivers <- unique(targets$Receiver_ID)
## add targets to stats
for (z in xreceivers) {
xplayers[xplayers$playerID == z, "targets"] <- sum(targets$Receiver_ID == z)
}
## bring targets column next to the receptions
xplayers <- xplayers[,c(1:20,ncol(xplayers),22:ncol(xplayers)-1)]
write.csv(xplayers, fplayers, row.names = FALSE)
}
view(xpbp)
filter(xpbp, PlayType == "Pass" & Receiver != "NA")
targets
view(targets)
unique(targets$Receiver_ID)
targets
view(targets)
sum(targets$Receiver_ID == z)
xreceivers
z
sum(targets$Receiver_ID == z)
xplayers[xplayers$playerID == z, "targets"]
ncol(xplayers)
write.csv(xplayers, fplayers, row.names = FALSE)
x
