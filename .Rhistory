ggplot(aes(x = off_epa_per_des_run, y = def_epa_per_des_run)) +
geom_image(aes(image = url), size = 0.05) +
labs(x = "Offensive EPA per designed run",
y = "Defensive EPA per designed run",
caption = "Data from nflscrapR",
title = "Offensive and Defensive EPA per designed run for each team",
subtitle = chartTitle) +
geom_hline(yintercept = 0, color = "red", linetype = "dashed") +
geom_vline(xintercept = 0, color = "red", linetype = "dashed") +
theme_bw() +
theme(axis.title = element_text(size = 12),
axis.text = element_text(size = 10),
plot.title = element_text(size = 16),
plot.subtitle = element_text(size = 14),
plot.caption = element_text(size = 12))
chart_summary_data %>%
ggplot(aes(x = off_des_runs_sr, y = def_des_runs_sr)) +
geom_image(aes(image = url), size = 0.05) +
labs(x = "Offensive designed run success rate",
y = "Defensive designed run success rate",
caption = "Data from nflscrapR",
title = "Offensive and Defensive designed run success rates for each team",
subtitle = chartTitle) +
geom_hline(yintercept = 0.5, color = "red", linetype = "dashed") +
geom_vline(xintercept = 0.5, color = "red", linetype = "dashed") +
theme_bw() +
theme(axis.title = element_text(size = 12),
axis.text = element_text(size = 10),
plot.title = element_text(size = 16),
plot.subtitle = element_text(size = 14),
plot.caption = element_text(size = 12))
# Fun one - sacks:
chart_summary_data %>%
ggplot(aes(x = off_epa_per_sack, y = def_epa_per_sack)) +
geom_image(aes(image = url), size = 0.05) +
labs(x = "Offensive EPA per sack",
y = "Defensive EPA per sack",
caption = "Data from nflscrapR",
title = "Offensive and Defensive EPA per sack for each team",
subtitle = chartTitle) +
geom_hline(yintercept = 0, color = "red", linetype = "dashed") +
geom_vline(xintercept = 0, color = "red", linetype = "dashed") +
theme_bw() +
theme(axis.title = element_text(size = 12),
axis.text = element_text(size = 10),
plot.title = element_text(size = 16),
plot.subtitle = element_text(size = 14),
plot.caption = element_text(size = 12))
# Without fumbles:
chart_summary_data %>%
ggplot(aes(x = off_epa_per_sack_no_fumbles, y = def_epa_per_sack_no_fumbles)) +
geom_image(aes(image = url), size = 0.05) +
labs(x = "Offensive EPA per sack (lost fumbles excluded)",
y = "Defensive EPA per sack (lost fumbles excluded)",
caption = "Data from nflscrapR",
title = "Offensive and Defensive EPA per sack (lost fumbles excluded) for each team",
subtitle = chartTitle) +
geom_hline(yintercept = 0, color = "red", linetype = "dashed") +
geom_vline(xintercept = 0, color = "red", linetype = "dashed") +
theme_bw() +
theme(axis.title = element_text(size = 12),
axis.text = element_text(size = 10),
plot.title = element_text(size = 16),
plot.subtitle = element_text(size = 14),
plot.caption = element_text(size = 12))
# Special teams time, first punting:
chart_summary_data %>%
ggplot(aes(x = off_epa_per_punt, y = def_epa_per_punt)) +
geom_image(aes(image = url), size = 0.05) +
labs(x = "Offensive EPA per punt",
y = "Defensive EPA per punt",
caption = "Data from nflscrapR",
title = "Offensive and Defensive EPA per punt for each team",
subtitle = chartTitle) +
geom_hline(yintercept = 0, color = "red", linetype = "dashed") +
geom_vline(xintercept = 0, color = "red", linetype = "dashed") +
theme_bw() +
theme(axis.title = element_text(size = 12),
axis.text = element_text(size = 10),
plot.title = element_text(size = 16),
plot.subtitle = element_text(size = 14),
plot.caption = element_text(size = 12))
# Kickoffs
chart_summary_data %>%
ggplot(aes(x = off_epa_per_ko, y = def_epa_per_ko)) +
geom_image(aes(image = url), size = 0.05) +
labs(x = "Offensive EPA per kickoff",
y = "Defensive EPA per kickoff",
caption = "Data from nflscrapR",
title = "Offensive and Defensive EPA per kickoff for each team",
subtitle = paste("Through week", userWeek, "of", userYear, "NFL season", sep = " ")) +
geom_hline(yintercept = 0, color = "red", linetype = "dashed") +
geom_vline(xintercept = 0, color = "red", linetype = "dashed") +
theme_bw() +
theme(axis.title = element_text(size = 12),
axis.text = element_text(size = 10),
plot.title = element_text(size = 16),
plot.subtitle = element_text(size = 14),
plot.caption = element_text(size = 12))
offense_epa_19
paste("data/games_data/", userYear, "/pbp", userYear, ".csv", sep = "")
scrape_season_play_by_play(userYear)
View(pbp_19)
pbp_19 <- scrape_season_play_by_play(userYear)
pbp2019 <- read.csv("~/Documents/dev/football/data/games_data/2019/pbp2019.csv", header=FALSE)
View(pbp2019)
View(pbp_19)
rm pbp_19
View(pbp_19)
rm(pbp_19)
# set custom variables
userYear <- 2019 ##necessary for saved
userWeek <- 7 ##not necessary at the moment
today <- Sys.Date()
# test date
date <- 201910
#date <- format(today, format="%Y%m%d")
game_ids <- read.csv("data/games_data/reg_season/reg_games_2019.csv", check.names = FALSE)
currentGameIDs <- game_ids$game_id
#pull games in 2019 season that match today's date
currentGames <- grep(date, currentGameIDs)
games_in_play <- currentGameIDs[currentGames]
##can't figure this out yet
#
#  games_in_play <- game_ids$state_of_game[currentGames] != "POST"
#
#  nplay <- length(games_in_play)
#  nplayLoop <- 1
#
# scrape pbp of active games
# if 0 games, scrape scores
for (x in games_in_play) {
f <- paste("data/games_data/", userYear, "/", x, ".csv", sep = "")
if (file.exists(f)==TRUE) {
#read game csv
y <- read.csv(f, check.names=FALSE)
#check if y$desc contains "END GAME"
#if x has END GAME change state_of_game to POST
if(grepl("END GAME", y$desc[nrow(y)]) == TRUE) {
print(paste("Game", x, "is over.", sep = " "))
} else {
#scrape
print(paste("Scraping game ", x, sep = ""))
y <- scrape_json_play_by_play(x)
game_ids$X <- NULL ## annoying glitch
if(grepl("END GAME", y$desc[nrow(y)]) == TRUE) {
print(paste("Game", x, "is over.", sep = " "))
game_ids[game_ids$game_id == x, "state_of_game"] <- "POST"
print(paste("Changing the state of game for ", x, " to POST", sep = ""))
write.csv(game_ids, "data/games_data/reg_season/reg_games_2019.csv", row.names=FALSE)
}
write.csv(y, file = paste("data/games_data/", userYear,"/", x, ".csv", sep = ""), row.names=FALSE)
print(paste("Last play:", y$desc[nrow(y)], sep=""))
}
}
else {
print(paste("Scraping game", x, sep = " "))
y <- scrape_json_play_by_play(x)
write.csv(y, file = paste("data/games_data/", userYear,"/", x, ".csv", sep = ""), row.names=FALSE)
}
}
## graph new scrape
x <- 2019101306
y <- scrape_json_play_by_play(x)
homeTeam_abbr <- game_ids[game_ids$game_id == x, "home_team"]
awayTeam_abbr <- game_ids[game_ids$game_id == x, "away_team"]
homeTeam_abbr <- y$home_team[1]
awayTeam_abbr <- y$away_team[1]
teamAbbr <- read.csv(paste("data/games_data/", userYear, "/team_abbr.csv", sep = ""))
homeTeamInt <- grep(homeTeam_abbr, teamAbbr$nflscrapr_abbrev)
awayTeamInt <- grep(awayTeam_abbr, teamAbbr$nflscrapr_abbrev)
# awayTeamInt <- 24 # if Rams
homeTeam_fullname <- teamAbbr$full_name[homeTeamInt]
awayTeam_fullname <- teamAbbr$full_name[awayTeamInt]
homeTeam_logo <- teamAbbr[teamAbbr$nflscrapr_abbrev == homeTeam_abbr, "logo"]
awayTeam_logo <- teamAbbr[teamAbbr$nflscrapr_abbrev == awayTeam_abbr, "logo"]
# awayImage <- download.file(paste("", awayTeam_logo, "", sep = ""), destfile = "tmp.png")
# homeImage <- download.file(paste("", homeTeam_logo, "", sep = ""), destfile = "tmp1.png")
game_ids[game_ids$game_id == x, "state_of_game"]
# note: home/awayTeam currently grabs abbrev name, need to get full name.
# note: Pull out the Home and Away colors:
# note: Make this dynamic across games and add to loop
nfl_teamcolors <- teamcolors %>% filter(league == "nfl")
awayTeam_color <- nfl_teamcolors %>%
filter(name == awayTeam_fullname) %>%
pull(primary)
homeTeam_color <- nfl_teamcolors %>%
filter(name == homeTeam_fullname) %>%
pull(primary)
# Now generate the win probability chart:
y %>%
filter(!is.na(away_wp),
!is.na(home_wp)) %>%
dplyr::select(game_seconds_remaining,
away_wp,
home_wp) %>%
gather(team, wpa, -game_seconds_remaining) %>%
ggplot(aes(x = game_seconds_remaining, y = wpa, color = team)) +
geom_line(size = 2) +
geom_hline(yintercept = 0.5, color = "gray", linetype = "dashed") +
scale_color_manual(labels = c(awayTeam_abbr, homeTeam_abbr),
values = c(awayTeam_color, homeTeam_color),
guide = FALSE) +
scale_x_reverse(breaks = seq(0, 3600, 300)) +
annotate("text", x = 3000, y = .75, label = awayTeam_abbr, color = awayTeam_color, size = 8) +
#  annotation_custom(awayImage ) +
annotate("text", x = 3000, y = .25, label = homeTeam_abbr, color = homeTeam_color, size = 8) +
#  annotation_custom(homeImage ) +
geom_vline(xintercept = 900, linetype = "dashed", black) +
geom_vline(xintercept = 1800, linetype = "dashed", black) +
geom_vline(xintercept = 2700, linetype = "dashed", black) +
geom_vline(xintercept = 0, linetype = "dashed", black) +
labs(
x = "Time Remaining (seconds)",
y = "Win Probability",
title = paste("Week", userWeek, "Win Probability Chart", sep = " "),
subtitle = paste(awayTeam_fullname, "vs.", homeTeam_fullname, sep = " "),
caption = "Data from nflscrapR"
) + theme_bw()
##  game_ids[game_ids$game_id == 2019093000, "state_of_game"] <- "PRE"
##  write.csv(game_ids, "data/games_data/reg_season/reg_games_2019.csv")
##print the last 3 plays
## note: class/function this somehow??
print("Last play:")
print(paste("EPA Added:", y$epa[nrow(y)-2], ",", y$desc[nrow(y)-2], sep = " "))
print(paste("EPA Added:", y$epa[nrow(y)-1], ",", y$desc[nrow(y)-1], sep = " "))
print(paste("EPA Added:", y$epa[nrow(y)], ",", y$desc[nrow(y)], sep = " "))
print(paste(awayTeam_fullname, "Win Probability:", y$away_wp[nrow(y)], sep=" "))
print(paste(homeTeam_fullname, "Win Probability:", y$home_wp[nrow(y)], sep = " "))
## note: print winner and score
##  endGame == TRUE
sum(y$penalty_yards[!is.na(y$penalty_yards)] & y$penalty_team == "DAL")
y$penalty_team=="DAL"[penalty_yards[!is.na(y$penalty_yards)]]
game_ids[game_ids$game_id == x, "state_of_game"]
2019102009
View(y)
game_ids[game_ids$game_id == 2019102009, "home_team"
game_ids[game_ids$game_id == 2019102009, "home_team"]
print(paste(game_ids[game_ids$game_id == x, "away_team"], "vs", game_ids[game_ids$game_id == x, "home_team"], sep = " "))
for (x in games_in_play) {
f <- paste("data/games_data/", userYear, "/", x, ".csv", sep = "")
if (file.exists(f)==TRUE) {
#read game csv
y <- read.csv(f, check.names=FALSE)
#check if y$desc contains "END GAME"
#if x has END GAME change state_of_game to POST
if(grepl("END GAME", y$desc[nrow(y)]) == TRUE) {
print(paste("Game", x, "is over.", sep = " "))
} else {
#scrape
print(paste("Scraping game ", x, sep = ""))
y <- scrape_json_play_by_play(x)
game_ids$X <- NULL ## annoying glitch
if(grepl("END GAME", y$desc[nrow(y)]) == TRUE) {
print(paste("Game", x, "is over.", sep = " "))
print(
paste(
game_ids[
game_ids$game_id == x, "away_team"],
"vs",
game_ids[game_ids$game_id == x, "home_team"],
sep = " "
)
)
game_ids[game_ids$game_id == x, "state_of_game"] <- "POST"
print(paste("Changing the state of game for ", x, " to POST", sep = ""))
write.csv(game_ids, "data/games_data/reg_season/reg_games_2019.csv", row.names=FALSE)
}
write.csv(y, file = paste("data/games_data/", userYear,"/", x, ".csv", sep = ""), row.names=FALSE)
print(paste("Last play:", y$desc[nrow(y)], sep=""))
}
}
else {
print(paste("Scraping game", x, sep = " "))
print(
paste(
game_ids[
game_ids$game_id == x, "away_team"],
"vs",
game_ids[game_ids$game_id == x, "home_team"],
sep = " "
)
)
y <- scrape_json_play_by_play(x)
write.csv(y, file = paste("data/games_data/", userYear,"/", x, ".csv", sep = ""), row.names=FALSE)
}
}
for (x in games_in_play) {
f <- paste("data/games_data/", userYear, "/", x, ".csv", sep = "")
if (file.exists(f)==TRUE) {
#read game csv
y <- read.csv(f, check.names=FALSE)
#check if y$desc contains "END GAME"
#if x has END GAME change state_of_game to POST
if(grepl("END GAME", y$desc[nrow(y)]) == TRUE) {
print(paste("Game", x, "is over.", sep = " "))
} else {
#scrape
print(paste("Scraping game ", x, sep = ""))
print(
paste(
game_ids[
game_ids$game_id == x, "away_team"],
"vs",
game_ids[game_ids$game_id == x, "home_team"],
sep = " "
)
)
y <- scrape_json_play_by_play(x)
game_ids$X <- NULL ## annoying glitch
if(grepl("END GAME", y$desc[nrow(y)]) == TRUE) {
print(paste("Game", x, "is over.", sep = " "))
print(
paste(
game_ids[
game_ids$game_id == x, "away_team"],
"vs",
game_ids[game_ids$game_id == x, "home_team"],
sep = " "
)
)
game_ids[game_ids$game_id == x, "state_of_game"] <- "POST"
print(paste("Changing the state of game for ", x, " to POST", sep = ""))
write.csv(game_ids, "data/games_data/reg_season/reg_games_2019.csv", row.names=FALSE)
}
write.csv(y, file = paste("data/games_data/", userYear,"/", x, ".csv", sep = ""), row.names=FALSE)
print(paste("Last play:", y$desc[nrow(y)], sep=""))
}
}
else {
print(paste("Scraping game", x, sep = " "))
print(
paste(
game_ids[
game_ids$game_id == x, "away_team"],
"vs",
game_ids[game_ids$game_id == x, "home_team"],
sep = " "
)
)
y <- scrape_json_play_by_play(x)
write.csv(y, file = paste("data/games_data/", userYear,"/", x, ".csv", sep = ""), row.names=FALSE)
}
}
x <- 2019102009
y <- scrape_json_play_by_play(x)
homeTeam_abbr <- game_ids[game_ids$game_id == x, "home_team"]
awayTeam_abbr <- game_ids[game_ids$game_id == x, "away_team"]
homeTeam_abbr <- y$home_team[1]
awayTeam_abbr <- y$away_team[1]
teamAbbr <- read.csv(paste("data/games_data/", userYear, "/team_abbr.csv", sep = ""))
homeTeamInt <- grep(homeTeam_abbr, teamAbbr$nflscrapr_abbrev)
awayTeamInt <- grep(awayTeam_abbr, teamAbbr$nflscrapr_abbrev)
# awayTeamInt <- 24 # if Rams
homeTeam_fullname <- teamAbbr$full_name[homeTeamInt]
awayTeam_fullname <- teamAbbr$full_name[awayTeamInt]
homeTeam_logo <- teamAbbr[teamAbbr$nflscrapr_abbrev == homeTeam_abbr, "logo"]
awayTeam_logo <- teamAbbr[teamAbbr$nflscrapr_abbrev == awayTeam_abbr, "logo"]
# awayImage <- download.file(paste("", awayTeam_logo, "", sep = ""), destfile = "tmp.png")
# homeImage <- download.file(paste("", homeTeam_logo, "", sep = ""), destfile = "tmp1.png")
game_ids[game_ids$game_id == x, "state_of_game"]
# note: home/awayTeam currently grabs abbrev name, need to get full name.
# note: Pull out the Home and Away colors:
# note: Make this dynamic across games and add to loop
nfl_teamcolors <- teamcolors %>% filter(league == "nfl")
awayTeam_color <- nfl_teamcolors %>%
filter(name == awayTeam_fullname) %>%
pull(primary)
homeTeam_color <- nfl_teamcolors %>%
filter(name == homeTeam_fullname) %>%
pull(primary)
# Now generate the win probability chart:
y %>%
filter(!is.na(away_wp),
!is.na(home_wp)) %>%
dplyr::select(game_seconds_remaining,
away_wp,
home_wp) %>%
gather(team, wpa, -game_seconds_remaining) %>%
ggplot(aes(x = game_seconds_remaining, y = wpa, color = team)) +
geom_line(size = 2) +
geom_hline(yintercept = 0.5, color = "gray", linetype = "dashed") +
scale_color_manual(labels = c(awayTeam_abbr, homeTeam_abbr),
values = c(awayTeam_color, homeTeam_color),
guide = FALSE) +
scale_x_reverse(breaks = seq(0, 3600, 300)) +
annotate("text", x = 3000, y = .75, label = awayTeam_abbr, color = awayTeam_color, size = 8) +
#  annotation_custom(awayImage ) +
annotate("text", x = 3000, y = .25, label = homeTeam_abbr, color = homeTeam_color, size = 8) +
#  annotation_custom(homeImage ) +
geom_vline(xintercept = 900, linetype = "dashed", black) +
geom_vline(xintercept = 1800, linetype = "dashed", black) +
geom_vline(xintercept = 2700, linetype = "dashed", black) +
geom_vline(xintercept = 0, linetype = "dashed", black) +
labs(
x = "Time Remaining (seconds)",
y = "Win Probability",
title = paste("Week", userWeek, "Win Probability Chart", sep = " "),
subtitle = paste(awayTeam_fullname, "vs.", homeTeam_fullname, sep = " "),
caption = "Data from nflscrapR"
) + theme_bw()
##  game_ids[game_ids$game_id == 2019093000, "state_of_game"] <- "PRE"
##  write.csv(game_ids, "data/games_data/reg_season/reg_games_2019.csv")
##print the last 3 plays
## note: class/function this somehow??
print("Last play:")
print(paste("EPA Added:", y$epa[nrow(y)-2], ",", y$desc[nrow(y)-2], sep = " "))
print(paste("EPA Added:", y$epa[nrow(y)-1], ",", y$desc[nrow(y)-1], sep = " "))
print(paste("EPA Added:", y$epa[nrow(y)], ",", y$desc[nrow(y)], sep = " "))
print(paste(awayTeam_fullname, "Win Probability:", y$away_wp[nrow(y)], sep=" "))
print(paste(homeTeam_fullname, "Win Probability:", y$home_wp[nrow(y)], sep = " "))
x <- 2019102009
y <- scrape_json_play_by_play(x)
homeTeam_abbr <- game_ids[game_ids$game_id == x, "home_team"]
awayTeam_abbr <- game_ids[game_ids$game_id == x, "away_team"]
homeTeam_abbr <- y$home_team[1]
awayTeam_abbr <- y$away_team[1]
teamAbbr <- read.csv(paste("data/games_data/", userYear, "/team_abbr.csv", sep = ""))
homeTeamInt <- grep(homeTeam_abbr, teamAbbr$nflscrapr_abbrev)
awayTeamInt <- grep(awayTeam_abbr, teamAbbr$nflscrapr_abbrev)
# awayTeamInt <- 24 # if Rams
homeTeam_fullname <- teamAbbr$full_name[homeTeamInt]
awayTeam_fullname <- teamAbbr$full_name[awayTeamInt]
homeTeam_logo <- teamAbbr[teamAbbr$nflscrapr_abbrev == homeTeam_abbr, "logo"]
awayTeam_logo <- teamAbbr[teamAbbr$nflscrapr_abbrev == awayTeam_abbr, "logo"]
# awayImage <- download.file(paste("", awayTeam_logo, "", sep = ""), destfile = "tmp.png")
# homeImage <- download.file(paste("", homeTeam_logo, "", sep = ""), destfile = "tmp1.png")
game_ids[game_ids$game_id == x, "state_of_game"]
# note: home/awayTeam currently grabs abbrev name, need to get full name.
# note: Pull out the Home and Away colors:
# note: Make this dynamic across games and add to loop
nfl_teamcolors <- teamcolors %>% filter(league == "nfl")
awayTeam_color <- nfl_teamcolors %>%
filter(name == awayTeam_fullname) %>%
pull(primary)
homeTeam_color <- nfl_teamcolors %>%
filter(name == homeTeam_fullname) %>%
pull(primary)
# Now generate the win probability chart:
y %>%
filter(!is.na(away_wp),
!is.na(home_wp)) %>%
dplyr::select(game_seconds_remaining,
away_wp,
home_wp) %>%
gather(team, wpa, -game_seconds_remaining) %>%
ggplot(aes(x = game_seconds_remaining, y = wpa, color = team)) +
geom_line(size = 2) +
geom_hline(yintercept = 0.5, color = "gray", linetype = "dashed") +
scale_color_manual(labels = c(awayTeam_abbr, homeTeam_abbr),
values = c(awayTeam_color, homeTeam_color),
guide = FALSE) +
scale_x_reverse(breaks = seq(0, 3600, 300)) +
annotate("text", x = 3000, y = .75, label = awayTeam_abbr, color = awayTeam_color, size = 8) +
#  annotation_custom(awayImage ) +
annotate("text", x = 3000, y = .25, label = homeTeam_abbr, color = homeTeam_color, size = 8) +
#  annotation_custom(homeImage ) +
geom_vline(xintercept = 900, linetype = "dashed", black) +
geom_vline(xintercept = 1800, linetype = "dashed", black) +
geom_vline(xintercept = 2700, linetype = "dashed", black) +
geom_vline(xintercept = 0, linetype = "dashed", black) +
labs(
x = "Time Remaining (seconds)",
y = "Win Probability",
title = paste("Week", userWeek, "Win Probability Chart", sep = " "),
subtitle = paste(awayTeam_fullname, "vs.", homeTeam_fullname, sep = " "),
caption = "Data from nflscrapR"
) + theme_bw()
##  game_ids[game_ids$game_id == 2019093000, "state_of_game"] <- "PRE"
##  write.csv(game_ids, "data/games_data/reg_season/reg_games_2019.csv")
##print the last 3 plays
## note: class/function this somehow??
print("Last play:")
print(paste("EPA Added:", y$epa[nrow(y)-2], ",", y$desc[nrow(y)-2], sep = " "))
print(paste("EPA Added:", y$epa[nrow(y)-1], ",", y$desc[nrow(y)-1], sep = " "))
print(paste("EPA Added:", y$epa[nrow(y)], ",", y$desc[nrow(y)], sep = " "))
print(paste(awayTeam_fullname, "Win Probability:", y$away_wp[nrow(y)], sep=" "))
print(paste(homeTeam_fullname, "Win Probability:", y$home_wp[nrow(y)], sep = " "))
x2 <- 2019092600
f2 <- paste("data/games_data/", userYear, "/", x2, ".csv", sep = "")
#read game csv
y2 <- read_csv(f2)
write.csv(y2, f2)
y2colnames <- colnames(y2)
y3 <- select(y2, home_team, away_team, desc, play_type, game_seconds_remaining, wp, wpa)
chart_data <- pbp_rp %>%
group_by(posteam) %>%
filter(down<=2) %>%
summarise(
n_dropbacks = sum(pass),
n_rush = sum(rush),
epa_per_db = sum(epa * pass) / n_dropbacks,
epa_per_rush = sum(epa * rush) / n_rush,
success_per_db = sum(success * pass) / n_dropbacks,
success_per_rush = sum(success * rush) / n_rush
)
chart <- chart_data %>% left_join(nfl_logos_df, by = c("posteam" = "team_code"))
chart %>%
ggplot(aes(x = epa_per_rush, y = epa_per_db)) +
geom_image(aes(image = url), size = 0.05) +
labs(x = "Rush EPA/play",
y = "Pass EPA/play",
caption = "Data from nflscrapR",
title = "Early-down rush and pass EPA/play",
subtitle = "2018") +
theme_bw() +
geom_abline(slope=1, intercept=0, alpha=.2) +
theme(axis.title = element_text(size = 12),
axis.text = element_text(size = 10),
plot.title = element_text(size = 16),
plot.subtitle = element_text(size = 14),
plot.caption = element_text(size = 12))
