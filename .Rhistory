install.packages(c("broom", "devtools", "DT", "fs", "gganimate", "httr", "knitr", "magick", "pkgbuild", "processx", "RcppArmadillo", "remotes", "roxygen2", "survival", "tidytext", "xfun"))
proj_name <- "football"
pkgs <- c(
"devtools",
"tidyverse",
"DBI",
"odbc",
"RMariaDB",
"readr",
"pander",
"furrr",
"na.tools",
"ggimage",
"teamcolors",
"glue",
"dplyr",
"jsonlite",
"RJSONIO",
"tictoc",
"animation",
"gt",
"DT",
"ggthemes",
"ggforce",
"ggridges",
"ggrepel",
"ggbeeswarm",
"extrafont",
"tidytext",
"RCurl"
)
installed_packages <- pkgs %in%
rownames(installed.packages())
if (any(installed_packages == FALSE)) {
install.packages(pkgs[!installed_packages])
}
lapply(pkgs, library, character.only = TRUE)
# library("nflscrapR") # doesn't work anymore
library("nflfastR")
# library("ffscrapr")
##reset
setwd("~/")
gid <- paste(getwd())
gid
device <- ""
if (gid == "/Volumes/HDD/Users/colinwelsh") {
## Maverick - MBP
setwd("~/Documents/dev/football")
device <- "Maverick (MBP)"
} else if (gid == "/Users/ColinWelsh") {
## Goose - iMac
setwd("~/Documents/dev/football")
device <- "Goose (iMac)"
} else if (gid == "/home/rstudio-user") {
## RStudio Cloud
setwd("/cloud/project")
device <- "RStudio Cloud"
}
print(paste(device, "is ready for some football", sep = " "))
rm(gid)
# Create standard objects -------------------------------------------------
source("../initR/con.R") # set condition based on device to update local vs remote connections to document
length(dbListTables(con))
ir(paste0('../NFL-ajreinhard/Sportradar/2019)
dir(paste0('../NFL-ajreinhard/Sportradar/2019)
)
)
)
dir(paste0('../NFL-ajreinhard/Sportradar/2019')
)
yr <- 2019
all_json <- c(dir(paste0('../NFL-ajreinhard/Sportradar/',yr), full=T),dir(paste0('../NFL-ajreinhard/Sportradar/2019/post/',yr), full=T))
all_col_names <- c('qtr', 'drv', 'play_ref', 'play_id', 'play_type', 'playtime', 'playclock', 'screen_pass', 'hash_mark', 'play_direction', 'men_in_box',
'blitz', 'left_tightends', 'right_tightends', 'qb_at_snap', 'play_action', 'run_pass_option', 'running_lane', 'rush_yards_after_contact',
'broken_tackles', 'players_rushed', 'pass_route', 'qb_on_target', 'qb_hurry', 'qb_knockdown', 'pocket_time', 'pocket_location', 'rec_drop',
'rec_catchable', 'def_tar_ID.reference', 'incompletion_type', 'pass_batted', 'rec_yards_after_contact', 'rec_broken_tackles', 'game_file',
'squib_kick', 'onside_attempt', 'onside_success')
df_list <- lapply(all_json, function(x) {
pbp_json <- fromJSON(x)
full_pbp <- lapply(pbp_json$periods, function(qtr) {
lapply(qtr$pbp, function(drv) {
lapply(drv$events, function(ply) {
stat_types <- sapply(ply$statistics, function(x) x$stat_type)
rush_stat <- NA
pass_stat <- NA
rec_stat <- NA
kick_stat <- NA
def_tar_ID <- NA
if (!is.na(match('rush',stat_types))) {
rush_stat <- match('rush',stat_types)
}
if (!is.na(match('pass',stat_types))) {
pass_stat <- match('pass',stat_types)
}
if (!is.na(match('receive',stat_types))) {
rec_stat <- match('receive',stat_types)
}
if (!is.na(match('kick',stat_types))) {
kick_stat <- match('kick',stat_types)
}
if (!is.na(match('defense',stat_types))) {
def_stat <- match('defense',stat_types)
def_tar_ID <- def_stat[match(1,sapply(def_stat, function(x) ply$statistics[[x]]$def_target))]
}
return(c(
'qtr'=qtr$number,
'drv'=drv$sequence,
'play_ref'=ply$reference,
'play_id'=ply$id,
'play_type'=ply$play_type,
'play_direction'=ply$play_direction,
'playtime'=ply$wall_clock,
'playclock'=ply$play_clock,
'men_in_box'=ply$men_in_box,
'screen_pass'=ply$screen_pass,
'blitz'=ply$blitz,
'players_rushed'=ply$players_rushed,
'hash_mark'=ply$hash_mark,
'left_tightends'=ply$left_tightends,
'right_tightends'=ply$right_tightends,
'running_lane'=ply$running_lane,
'qb_at_snap'=ply$qb_at_snap,
'play_action'=ply$play_action,
'run_pass_option'=ply$run_pass_option,
'rush_yards_after_contact'=ply$statistics[[rush_stat]]$yards_after_contact,
'broken_tackles'=ply$statistics[[rush_stat]]$broken_tackles,
'pass_route'=ply$pass_route,
'incompletion_type'=ply$statistics[[pass_stat]]$incompletion_type,
'qb_on_target'=ply$statistics[[pass_stat]]$on_target_throw,
'pass_batted'=ply$statistics[[pass_stat]]$batted_pass,
'qb_hurry'=ply$statistics[[pass_stat]]$hurry,
'qb_knockdown'=ply$statistics[[pass_stat]]$knockdown,
'pocket_time'=ply$statistics[[pass_stat]]$pocket_time,
'pocket_location'=ply$pocket_location,
'rec_drop'=ply$statistics[[rec_stat]]$dropped,
'rec_catchable'=ply$statistics[[rec_stat]]$catchable,
'rec_yards_after_contact'=ply$statistics[[rec_stat]]$yards_after_contact,
'rec_broken_tackles'=ply$statistics[[rec_stat]]$broken_tackles,
'def_tar_ID'=ply$statistics[[def_tar_ID]]$player['reference'],
'squib_kick'=ply$statistics[[kick_stat]]$squib_kick,
'onside_attempt'=ply$statistics[[kick_stat]]$onside_attempt,
'onside_success'=ply$statistics[[kick_stat]]$onside_success
))
})
})
})
df_list <- lapply(all_json, function(x) {
pbp_json <- fromJSON(x)
full_pbp <- lapply(pbp_json$periods, function(qtr) {
lapply(qtr$pbp, function(drv) {
lapply(drv$events, function(ply) {
stat_types <- sapply(ply$statistics, function(x) x$stat_type)
rush_stat <- NA
pass_stat <- NA
rec_stat <- NA
kick_stat <- NA
def_tar_ID <- NA
if (!is.na(match('rush',stat_types))) {
rush_stat <- match('rush',stat_types)
}
if (!is.na(match('pass',stat_types))) {
pass_stat <- match('pass',stat_types)
}
if (!is.na(match('receive',stat_types))) {
rec_stat <- match('receive',stat_types)
}
if (!is.na(match('kick',stat_types))) {
kick_stat <- match('kick',stat_types)
}
if (!is.na(match('defense',stat_types))) {
def_stat <- match('defense',stat_types)
def_tar_ID <- def_stat[match(1,sapply(def_stat, function(x) ply$statistics[[x]]$def_target))]
}
return(c(
'qtr'=qtr$number,
'drv'=drv$sequence,
'play_ref'=ply$reference,
'play_id'=ply$id,
'play_type'=ply$play_type,
'play_direction'=ply$play_direction,
'playtime'=ply$wall_clock,
'playclock'=ply$play_clock,
'men_in_box'=ply$men_in_box,
'screen_pass'=ply$screen_pass,
'blitz'=ply$blitz,
'players_rushed'=ply$players_rushed,
'hash_mark'=ply$hash_mark,
'left_tightends'=ply$left_tightends,
'right_tightends'=ply$right_tightends,
'running_lane'=ply$running_lane,
'qb_at_snap'=ply$qb_at_snap,
'play_action'=ply$play_action,
'run_pass_option'=ply$run_pass_option,
'rush_yards_after_contact'=ply$statistics[[rush_stat]]$yards_after_contact,
'broken_tackles'=ply$statistics[[rush_stat]]$broken_tackles,
'pass_route'=ply$pass_route,
'incompletion_type'=ply$statistics[[pass_stat]]$incompletion_type,
'qb_on_target'=ply$statistics[[pass_stat]]$on_target_throw,
'pass_batted'=ply$statistics[[pass_stat]]$batted_pass,
'qb_hurry'=ply$statistics[[pass_stat]]$hurry,
'qb_knockdown'=ply$statistics[[pass_stat]]$knockdown,
'pocket_time'=ply$statistics[[pass_stat]]$pocket_time,
'pocket_location'=ply$pocket_location,
'rec_drop'=ply$statistics[[rec_stat]]$dropped,
'rec_catchable'=ply$statistics[[rec_stat]]$catchable,
'rec_yards_after_contact'=ply$statistics[[rec_stat]]$yards_after_contact,
'rec_broken_tackles'=ply$statistics[[rec_stat]]$broken_tackles,
'def_tar_ID'=ply$statistics[[def_tar_ID]]$player['reference'],
'squib_kick'=ply$statistics[[kick_stat]]$squib_kick,
'onside_attempt'=ply$statistics[[kick_stat]]$onside_attempt,
'onside_success'=ply$statistics[[kick_stat]]$onside_success
))
})
})
})
full_pbp <- unlist(unlist(full_pbp,recursive = F),recursive = F)
full_pbp <- lapply(full_pbp, function(ply) {
return(ply[match(all_col_names, names(ply))])
})
full_pbp_df <- data.frame(do.call(rbind, full_pbp),stringsAsFactors = F)
names(full_pbp_df) <- all_col_names
#full_pbp_df$game_file <- gsub('.json','',strsplit(gsub('2019','',x),'/')[[1]][3])
full_pbp_df$game_file <- gsub('.json','',sapply(strsplit(gsub('2019','',x),'/'), function(y) rev(y)[1]))
#full_pbp_df$game_year <- strsplit(x,'/')[[1]][2]
return(full_pbp_df)
})
df_list <- lapply(all_json, function(x) {
pbp_json <- fromJSON(x)
full_pbp <- lapply(pbp_json$periods, function(qtr) {
lapply(qtr$pbp, function(drv) {
lapply(drv$events, function(ply) {
stat_types <- sapply(ply$statistics, function(x) x$stat_type)
rush_stat <- NA
pass_stat <- NA
rec_stat <- NA
kick_stat <- NA
def_tar_ID <- NA
if (!is.na(match('rush',stat_types))) {
rush_stat <- match('rush',stat_types)
}
if (!is.na(match('pass',stat_types))) {
pass_stat <- match('pass',stat_types)
}
if (!is.na(match('receive',stat_types))) {
rec_stat <- match('receive',stat_types)
}
if (!is.na(match('kick',stat_types))) {
kick_stat <- match('kick',stat_types)
}
if (!is.na(match('defense',stat_types))) {
def_stat <- match('defense',stat_types)
def_tar_ID <- def_stat[match(1,sapply(def_stat, function(x) ply$statistics[[x]]$def_target))]
}
return(c(
'qtr'=qtr$number,
'drv'=drv$sequence,
'play_ref'=ply$reference,
'play_id'=ply$id,
'play_type'=ply$play_type,
'play_direction'=ply$play_direction,
'playtime'=ply$wall_clock,
'playclock'=ply$play_clock,
'men_in_box'=ply$men_in_box,
'screen_pass'=ply$screen_pass,
'blitz'=ply$blitz,
'players_rushed'=ply$players_rushed,
'hash_mark'=ply$hash_mark,
'left_tightends'=ply$left_tightends,
'right_tightends'=ply$right_tightends,
'running_lane'=ply$running_lane,
'qb_at_snap'=ply$qb_at_snap,
'play_action'=ply$play_action,
'run_pass_option'=ply$run_pass_option,
'rush_yards_after_contact'=ply$statistics[[rush_stat]]$yards_after_contact,
'broken_tackles'=ply$statistics[[rush_stat]]$broken_tackles,
'pass_route'=ply$pass_route,
'incompletion_type'=ply$statistics[[pass_stat]]$incompletion_type,
'qb_on_target'=ply$statistics[[pass_stat]]$on_target_throw,
'pass_batted'=ply$statistics[[pass_stat]]$batted_pass,
'qb_hurry'=ply$statistics[[pass_stat]]$hurry,
'qb_knockdown'=ply$statistics[[pass_stat]]$knockdown,
'pocket_time'=ply$statistics[[pass_stat]]$pocket_time,
'pocket_location'=ply$pocket_location,
'rec_drop'=ply$statistics[[rec_stat]]$dropped,
'rec_catchable'=ply$statistics[[rec_stat]]$catchable,
'rec_yards_after_contact'=ply$statistics[[rec_stat]]$yards_after_contact,
'rec_broken_tackles'=ply$statistics[[rec_stat]]$broken_tackles,
'def_tar_ID'=ply$statistics[[def_tar_ID]]$player['reference'],
'squib_kick'=ply$statistics[[kick_stat]]$squib_kick,
'onside_attempt'=ply$statistics[[kick_stat]]$onside_attempt,
'onside_success'=ply$statistics[[kick_stat]]$onside_success
))
})
})
})
full_pbp <- unlist(unlist(full_pbp,recursive = F),recursive = F)
full_pbp <- lapply(full_pbp, function(ply) {
return(ply[match(all_col_names, names(ply))])
})
full_pbp_df <- data.frame(do.call(rbind, full_pbp),stringsAsFactors = F)
names(full_pbp_df) <- all_col_names
#full_pbp_df$game_file <- gsub('.json','',strsplit(gsub('2019','',x),'/')[[1]][3])
full_pbp_df$game_file <- gsub('.json','',sapply(strsplit(gsub('2019','',x),'/'), function(y) rev(y)[1]))
#full_pbp_df$game_year <- strsplit(x,'/')[[1]][2]
return(full_pbp_df)
})
all_gm_df <- do.call(rbind, df_list)
write.csv(all_gm_df, paste0('Sportradar/Sportradar_',yr,'.csv'), row.names=F)
df_list <- lapply(all_json, function(x) {
pbp_json <- fromJSON(x)
full_pbp <- lapply(pbp_json$periods, function(qtr) {
lapply(qtr$pbp, function(drv) {
lapply(drv$events, function(ply) {
stat_types <- sapply(ply$statistics, function(x) x$stat_type)
rush_stat <- NA
pass_stat <- NA
rec_stat <- NA
kick_stat <- NA
def_tar_ID <- NA
if (!is.na(match('rush',stat_types))) {
rush_stat <- match('rush',stat_types)
}
if (!is.na(match('pass',stat_types))) {
pass_stat <- match('pass',stat_types)
}
if (!is.na(match('receive',stat_types))) {
rec_stat <- match('receive',stat_types)
}
if (!is.na(match('kick',stat_types))) {
kick_stat <- match('kick',stat_types)
}
if (!is.na(match('defense',stat_types))) {
def_stat <- match('defense',stat_types)
def_tar_ID <- def_stat[match(1,sapply(def_stat, function(x) ply$statistics[[x]]$def_target))]
}
return(c(
'qtr'=qtr$number,
'drv'=drv$sequence,
'play_ref'=ply$reference,
'play_id'=ply$id,
'play_type'=ply$play_type,
'play_direction'=ply$play_direction,
'playtime'=ply$wall_clock,
'playclock'=ply$play_clock,
'men_in_box'=ply$men_in_box,
'screen_pass'=ply$screen_pass,
'blitz'=ply$blitz,
'players_rushed'=ply$players_rushed,
'hash_mark'=ply$hash_mark,
'left_tightends'=ply$left_tightends,
'right_tightends'=ply$right_tightends,
'running_lane'=ply$running_lane,
'qb_at_snap'=ply$qb_at_snap,
'play_action'=ply$play_action,
'run_pass_option'=ply$run_pass_option,
'rush_yards_after_contact'=ply$statistics[[rush_stat]]$yards_after_contact,
'broken_tackles'=ply$statistics[[rush_stat]]$broken_tackles,
'pass_route'=ply$pass_route,
'incompletion_type'=ply$statistics[[pass_stat]]$incompletion_type,
'qb_on_target'=ply$statistics[[pass_stat]]$on_target_throw,
'pass_batted'=ply$statistics[[pass_stat]]$batted_pass,
'qb_hurry'=ply$statistics[[pass_stat]]$hurry,
'qb_knockdown'=ply$statistics[[pass_stat]]$knockdown,
'pocket_time'=ply$statistics[[pass_stat]]$pocket_time,
'pocket_location'=ply$pocket_location,
'rec_drop'=ply$statistics[[rec_stat]]$dropped,
'rec_catchable'=ply$statistics[[rec_stat]]$catchable,
'rec_yards_after_contact'=ply$statistics[[rec_stat]]$yards_after_contact,
'rec_broken_tackles'=ply$statistics[[rec_stat]]$broken_tackles,
'def_tar_ID'=ply$statistics[[def_tar_ID]]$player['reference'],
'squib_kick'=ply$statistics[[kick_stat]]$squib_kick,
'onside_attempt'=ply$statistics[[kick_stat]]$onside_attempt,
'onside_success'=ply$statistics[[kick_stat]]$onside_success
))
})
})
})
full_pbp <- unlist(unlist(full_pbp,recursive = F),recursive = F)
full_pbp <- lapply(full_pbp, function(ply) {
return(ply[match(all_col_names, names(ply))])
})
full_pbp_df <- data.frame(do.call(rbind, full_pbp),stringsAsFactors = F)
names(full_pbp_df) <- all_col_names
#full_pbp_df$game_file <- gsub('.json','',strsplit(gsub('2019','',x),'/')[[1]][3])
full_pbp_df$game_file <- gsub('.json','',sapply(strsplit(gsub('2019','',x),'/'), function(y) rev(y)[1]))
#full_pbp_df$game_year <- strsplit(x,'/')[[1]][2]
return(full_pbp_df)
})
all_gm_df <- do.call(rbind, df_list)
write.csv(all_gm_df, paste0('Sportradar/Sportradar_',yr,'.csv'), row.names=F)
df_list <- lapply(all_json, function(x) {
pbp_json <- fromJSON(x)
full_pbp <- lapply(pbp_json$periods, function(qtr) {
lapply(qtr$pbp, function(drv) {
lapply(drv$events, function(ply) {
stat_types <- sapply(ply$statistics, function(x) x$stat_type)
rush_stat <- NA
pass_stat <- NA
rec_stat <- NA
kick_stat <- NA
def_tar_ID <- NA
if (!is.na(match('rush',stat_types))) {
rush_stat <- match('rush',stat_types)
}
if (!is.na(match('pass',stat_types))) {
pass_stat <- match('pass',stat_types)
}
if (!is.na(match('receive',stat_types))) {
rec_stat <- match('receive',stat_types)
}
if (!is.na(match('kick',stat_types))) {
kick_stat <- match('kick',stat_types)
}
if (!is.na(match('defense',stat_types))) {
def_stat <- match('defense',stat_types)
def_tar_ID <- def_stat[match(1,sapply(def_stat, function(x) ply$statistics[[x]]$def_target))]
}
return(c(
'qtr'=qtr$number,
'drv'=drv$sequence,
'play_ref'=ply$reference,
'play_id'=ply$id,
'play_type'=ply$play_type,
'play_direction'=ply$play_direction,
'playtime'=ply$wall_clock,
'playclock'=ply$play_clock,
'men_in_box'=ply$men_in_box,
'screen_pass'=ply$screen_pass,
'blitz'=ply$blitz,
'players_rushed'=ply$players_rushed,
'hash_mark'=ply$hash_mark,
'left_tightends'=ply$left_tightends,
'right_tightends'=ply$right_tightends,
'running_lane'=ply$running_lane,
'qb_at_snap'=ply$qb_at_snap,
'play_action'=ply$play_action,
'run_pass_option'=ply$run_pass_option,
'rush_yards_after_contact'=ply$statistics[[rush_stat]]$yards_after_contact,
'broken_tackles'=ply$statistics[[rush_stat]]$broken_tackles,
'pass_route'=ply$pass_route,
'incompletion_type'=ply$statistics[[pass_stat]]$incompletion_type,
'qb_on_target'=ply$statistics[[pass_stat]]$on_target_throw,
'pass_batted'=ply$statistics[[pass_stat]]$batted_pass,
'qb_hurry'=ply$statistics[[pass_stat]]$hurry,
'qb_knockdown'=ply$statistics[[pass_stat]]$knockdown,
'pocket_time'=ply$statistics[[pass_stat]]$pocket_time,
'pocket_location'=ply$pocket_location,
'rec_drop'=ply$statistics[[rec_stat]]$dropped,
'rec_catchable'=ply$statistics[[rec_stat]]$catchable,
'rec_yards_after_contact'=ply$statistics[[rec_stat]]$yards_after_contact,
'rec_broken_tackles'=ply$statistics[[rec_stat]]$broken_tackles,
'def_tar_ID'=ply$statistics[[def_tar_ID]]$player['reference'],
'squib_kick'=ply$statistics[[kick_stat]]$squib_kick,
'onside_attempt'=ply$statistics[[kick_stat]]$onside_attempt,
'onside_success'=ply$statistics[[kick_stat]]$onside_success
))
})
})
})
full_pbp <- unlist(unlist(full_pbp,recursive = F),recursive = F)
full_pbp <- lapply(full_pbp, function(ply) {
return(ply[match(all_col_names, names(ply))])
})
full_pbp_df <- data.frame(do.call(rbind, full_pbp),stringsAsFactors = F)
names(full_pbp_df) <- all_col_names
#full_pbp_df$game_file <- gsub('.json','',strsplit(gsub('2019','',x),'/')[[1]][3])
full_pbp_df$game_file <- gsub('.json','',sapply(strsplit(gsub('2019','',x),'/'), function(y) rev(y)[1]))
#full_pbp_df$game_year <- strsplit(x,'/')[[1]][2]
return(full_pbp_df)
})
full_pbp_df
all_gm_df <- do.call(rbind, df_list)
pkgs <- c(
"devtools",
"tidyverse",
"DBI",
"odbc",
"RMariaDB",
"readr",
"pander",
"furrr",
"na.tools",
"ggimage",
"teamcolors",
"glue",
"dplyr",
"jsonlite",
"RJSONIO",
"tictoc",
"animation",
"gt",
"DT",
"ggthemes",
"ggforce",
"ggridges",
"ggrepel",
"ggbeeswarm",
"extrafont",
"shadowtext",
"tidytext",
"RCurl"
)
installed_packages <- pkgs %in%
rownames(installed.packages())
if (any(installed_packages == FALSE)) {
install.packages(pkgs[!installed_packages])
}
lapply(pkgs, library, character.only = TRUE)
getwd()
team_df <- read.csv('/plots/assets/nfl_logo.csv', stringsAsFactors = F)
team_df <- read.csv('plots/assets/nfl_logo.csv', stringsAsFactors = F)
pff_id <- read.csv('data/players/All_Player_Info.csv', stringsAsFactors = F)
