ncol = n
)
mat <- mat - min(mat)
mat <- mat / max(mat)
mat <- 1 + mat * n
mat <- matrix(data = alpha(col, mat/(n+1)), ncol = n)
grid::rasterGrob(
image = mat,
width = unit(1, "npc"),
height = unit(1, "npc"),
interpolate = TRUE
)
}
# gets the limits of the x axis from a plot
axis_limits_x <- function(p) {
if (!is.null(ggplot_build(p)$layout$coord$limits$x)) {
return(ggplot_build(p)$layout$coord$limits$x)
} else if (!is.null(ggplot_build(p)$layout$panel_scales_x[[1]]$range_c$range)) {
return(ggplot_build(p)$layout$panel_scales_x[[1]]$range_c$range)
} else {
return(ggplot_build(p)$layout$panel_scales_x[[1]]$range$range)
}
}
# gets the limits of the y axis from a plot
axis_limits_y <- function(p) {
if (!is.null(ggplot_build(p)$layout$coord$limits$y)) {
return(ggplot_build(p)$layout$coord$limits$y)
} else if (!is.null(ggplot_build(p)$layout$panel_scales_y[[1]]$range_c$range)) {
return(ggplot_build(p)$layout$panel_scales_y[[1]]$range_c$range)
} else {
return(ggplot_build(p)$layout$panel_scales_y[[1]]$range$range)
}
}
# reads in an image as a grob and allows for some image alterations
grob_img_adj<-function(img_url, alpha = 0, whitewash = 0) {
return(lapply(img_url, function(x) {
if(is.na(x)) {
return(NULL)
}else{
img <- image_read(x)[[1]]
img[1,,] <- as.raw(255 - (255 - as.integer(img[1,,])) * (1-whitewash))
img[2,,] <- as.raw(255 - (255 - as.integer(img[2,,])) * (1-whitewash))
img[3,,] <- as.raw(255 - (255 - as.integer(img[3,,])) * (1-whitewash))
img[4,,] <- as.raw(as.integer(img[4,,]) * (1-alpha))
return(grid::rasterGrob(image = image_read(img)))
}
}))
}
# used to create branded videos
Scene2 <- ggproto(
"Scene2",
gganimate:::Scene,
plot_frame = function(self, plot, i, newpage = is.null(vp), vp = NULL, widths = NULL, heights = NULL, ...) {
plot <- self$get_frame(plot, i)
plot <- ggplot_gtable(plot)
# insert changes here
logo_file <- readPNG(getURLContent('https://raw.githubusercontent.com/ajreinhard/data-viz/master/ggplot/statbutler.png'))
author_txt <- textGrob('By Anthony Reinhard', x=unit(0.065, 'npc'), gp=gpar(col='darkblue', fontfamily=font_SB, fontsize=18), hjust=0)
data_txt <- textGrob(self$data_home, x=unit(1 - (.01), 'npc'), gp=gpar(col='grey95', fontfamily=font_SB, fontsize=18), hjust=1)
footer_bg <- grid.rect(x = unit(seq(0.5,1.5,length=1000), 'npc'), gp=gpar(col = 'transparent', fill = colorRampPalette(c('grey95', 'darkblue'), space = 'rgb')(1000)), draw = F)
footer <- grobTree(footer_bg, author_txt, data_txt)
plt.final <- grid.arrange(plot, footer, heights=unit(c(1, 36), c('null','pt')))
plot <- ggdraw(plt.final) + draw_image(logo_file, x = 0.002, y = 0, hjust = 0, vjust = 0, height = 0.08, width = 0.1067 * (9/16))
if (!is.null(widths)) plot$widths <- widths
if (!is.null(heights)) plot$heights <- heights
if (newpage) grid.newpage()
grDevices::recordGraphics(
requireNamespace("gganimate", quietly = TRUE),
list(),
getNamespace("gganimate")
)
if (is.null(vp)) {
grid.draw(plot)
} else {
if (is.character(vp)) seekViewport(vp)
else pushViewport(vp)
grid.draw(plot)
upViewport()
}
invisible(NULL)
}
)
Scene2$data_home <- NULL
### the next four functions will simply duplicate existing nested gganimate functions and replace them with my personalized Scene2 function
# used to create branded videos
create_scene2 <- function(transition, view, shadow, ease, transmuters, nframes, data_home) {
if (is.null(nframes)) nframes <- 100
ggproto(NULL, Scene2, transition = transition,
view = view, shadow = shadow, ease = ease,
transmuters = transmuters, nframes = nframes,
data_home = data_home)
}
# used to create branded videos
ggplot_build2 <- gganimate:::ggplot_build.gganim
formals(ggplot_build2) <- c(formals(ggplot_build2), alist(data_home = ))
body(ggplot_build2) <- body(ggplot_build2) %>%
as.list() %>%
inset2(4,
quote(scene <- create_scene2(plot$transition, plot$view, plot$shadow,
plot$ease, plot$transmuters, plot$nframes, data_home))) %>%
as.call()
# used to create branded videos
prerender2 <- gganimate:::prerender
formals(prerender2) <- c(formals(prerender2), alist(data_home = ))
body(prerender2) <- body(prerender2) %>%
as.list() %>%
inset2(3,
quote(ggplot_build2(plot, data_home))) %>%
as.call()
# used to create branded videos
animate_SB <- gganimate:::animate.gganim
formals(animate_SB) <- c(formals(animate_SB)[-length(formals(animate_SB))], alist(data_home = ''), formals(animate_SB)[length(formals(animate_SB))])
body(animate_SB) <- body(animate_SB) %>%
as.list() %>%
inset2(8,
quote(plot <- prerender2(plot, nframes_total, data_home))) %>%
as.call()
color_SB <- c("#ff7f00", "#9932cc", "#8cff72", "#00008b", "#51dbd8", "#674b00", "#ff66cf", "#8f8f8f", "#ff0000", "#e1ed00", "#0b5209", "#636363")
NFL_pri <- c('ARI'='#97233f',
'ATL'='#a71930',
'BAL'='#241773',
'BUF'='#00338d',
'CAR'='#0085ca',
'CHI'='#0b162a',
'CIN'='#000000',
'CLE'='#fb4f14',
'DAL'='#002244',
'DEN'='#002244',
'DET'='#005a8b',
'GB'='#203731',
'HOU'='#03202f',
'IND'='#002c5f',
'JAX'='#000000',
'KC'='#e31837',
'LAC'='#002a5e',
'LA'='#003594',
'MIA'='#008e97',
'MIN'='#4f2683',
'NE'='#002244',
'NO'='#9f8958',
'NYG'='#0b2265',
'NYJ'='#125740',
'OAK'='#a5acaf',
'LV'='#a5acaf',
'PHI'='#004953',
'PIT'='#000000',
'SD'='#002244',
'SF'='#aa0000',
'SEA'='#002244',
'STL'='#002244',
'TB'='#d50a0a',
'TEN'='#002244',
'WAS'='#773141')
NFL_sec <- c('ARI'='#000000',
'ATL'='#000000',
'BAL'='#9e7c0c',
'BUF'='#c60c30',
'CAR'='#000000',
'CHI'='#c83803',
'CIN'='#fb4f14',
'CLE'='#22150c',
'DAL'='#b0b7bc',
'DEN'='#fb4f14',
'DET'='#b0b7bc',
'GB'='#ffb612',
'HOU'='#a71930',
'IND'='#a5acaf',
'JAX'='#006778',
'KC'='#ffb612',
'LAC'='#0080c6',
'LA'='#ffd100',
'MIA'='#fc4c02',
'MIN'='#ffc62f',
'NE'='#c60c30',
'NO'='#000000',
'NYG'='#a71930',
'NYJ'='#000000',
'OAK'='#000000',
'LV'='#000000',
'PHI'='#a5acaf',
'PIT'='#ffb612',
'SD'='#0073cf',
'SF'='#b3995d',
'SEA'='#69be28',
'STL'='#b3995d',
'TB'='#34302b',
'TEN'='#4b92db',
'WAS'='#ffb612')
fant_pt_avg_df %>%
mutate(
season = 2019,
exp_PPR_diff = PPR_pts - exp_PPR_pts,
exp_PPR_pts_targ = exp_PPR_pts/targets
) %>%
left_join(roster_df, by = c('receiver_id' = 'ID', 'season' = 'team.season')) %>%
mutate(abbr.name = paste0(substr(teamPlayers.firstName, 1, 1), '.', teamPlayers.lastName)) %>%
filter(!is.na(receiver_id) & targets >= 75 & teamPlayers.position == 'WR') %>%
ggplot(aes(x = PPR_pts, y = exp_PPR_pts, label = abbr.name)) +
geom_grob(aes(x = PPR_pts, y = exp_PPR_pts, label = grob_img_adj(ESPN_logo_url(team.abbr), alpha = .4), vp.height = 0.06)) +
# geom_text_repel(aes(label = abbr.name), color = 'darkblue', size = 1.3, family = font_SB, bg.color = 'white', bg.r = 0.2, point.padding = 0, min.segment.length = 10, box.padding = 0.1) +
geom_text_repel(aes(label = abbr.name), color = 'darkblue', size = 1.3, point.padding = 0, min.segment.length = 10, box.padding = 0.1) +
scale_x_continuous(limits = properLims) +
scale_y_continuous(limits = properLims) +
labs(title = 'Expected & Actual WR Fantasy Points, 2019',
subtitle = 'min. 75 Targets',
x = 'Actual PPR Fantasy Points',
y = 'Expected\nPPR\nFantasy\nPoints')
fant_pt_avg_df %>%
mutate(
season = 2019,
exp_PPR_diff = PPR_pts - exp_PPR_pts,
exp_PPR_pts_targ = exp_PPR_pts/targets
) %>%
left_join(roster_df, by = c('receiver_id' = 'ID', 'season' = 'team.season')) %>%
mutate(abbr.name = paste0(substr(teamPlayers.firstName, 1, 1), '.', teamPlayers.lastName)) %>%
filter(!is.na(receiver_id) & targets >= 75 & teamPlayers.position == 'WR') %>%
ggplot(aes(x = PPR_pts, y = exp_PPR_pts, label = abbr.name)) +
geom_grob(aes(x = PPR_pts, y = exp_PPR_pts, label = grob_img_adj(ESPN_logo_url(team.abbr), alpha = .4), vp.height = 0.06)) +
# geom_text_repel(aes(label = abbr.name), color = 'darkblue', size = 1.3, family = font_SB, bg.color = 'white', bg.r = 0.2, point.padding = 0, min.segment.length = 10, box.padding = 0.1) +
geom_text_repel(aes(label = abbr.name), color = 'darkblue', size = 1.3, point.padding = 0, min.segment.length = 10, box.padding = 0.1) +
scale_x_continuous(limits = properLims) +
scale_y_continuous(limits = properLims) +
labs(title = 'Expected & Actual WR Fantasy Points, 2019',
subtitle = 'min. 75 Targets',
x = 'Actual PPR Fantasy Points',
y = 'Expected\nPPR\nFantasy\nPoints') +
theme(plot.margin = margin(c(7.5,10,7.5,7.5), unit = 'pt'))
fant_pt_avg_df %>%
mutate(
season = 2019,
exp_PPR_diff = PPR_pts - exp_PPR_pts,
exp_PPR_pts_targ = exp_PPR_pts/targets
) %>%
left_join(roster_df, by = c('receiver_id' = 'ID', 'season' = 'team.season')) %>%
mutate(abbr.name = paste0(substr(teamPlayers.firstName, 1, 1), '.', teamPlayers.lastName)) %>%
filter(!is.na(receiver_id) & targets >= 75 & teamPlayers.position == 'WR') %>%
ggplot(aes(x = PPR_pts, y = exp_PPR_pts, label = abbr.name)) +
geom_grob(aes(x = PPR_pts, y = exp_PPR_pts, label = grob_img_adj(ESPN_logo_url(team.abbr), alpha = .4), vp.height = 0.06)) +
# geom_text_repel(aes(label = abbr.name), color = 'darkblue', size = 1.3, family = font_SB, bg.color = 'white', bg.r = 0.2, point.padding = 0, min.segment.length = 10, box.padding = 0.1) +
geom_text_repel(aes(label = abbr.name), color = 'darkblue', size = 1.3, point.padding = 0, min.segment.length = 10, box.padding = 0.1) +
scale_x_continuous(limits = properLims) +
scale_y_continuous(limits = properLims) +
labs(title = 'Expected & Actual WR Fantasy Points, 2019',
subtitle = 'min. 75 Targets',
x = 'Actual PPR Fantasy Points',
y = 'Expected\nPPR\nFantasy\nPoints') +
theme_SB +
theme(plot.margin = margin(c(7.5,10,7.5,7.5), unit = 'pt'))
proj_name <- "football"
pkgs <- c(
"devtools",
"tidyverse",
"DBI",
"odbc",
"RMariaDB",
"httr"
"readr",
"pander",
"furrr",
"na.tools",
"ggimage",
"teamcolors",
"glue",
"dplyr",
"jsonlite",
"RJSONIO",
"tictoc",
"animation",
"gt",
"png",
"DT",
"ggthemes",
"ggforce",
"ggridges",
"ggrepel",
"ggpmisc",
"ggbeeswarm",
"cowplot",
"gridExtra",
"grid",
"extrafont",
"shadowtext",
"tidytext",
"RCurl"
)
installed_packages <- pkgs %in%
rownames(installed.packages())
if (any(installed_packages == FALSE)) {
install.packages(pkgs[!installed_packages])
}
lapply(pkgs, library, character.only = TRUE)
# library("nflscrapR") # doesn't work anymore
library("nflfastR")
# library("ffscrapr")
rm(pkgs, installed_packages)
source("../initR/init.R")
fx.setdir(proj_name)
httr::GET(url = "https://fantasyfootballcalculator.com/api/v1/adp/standard?teams=10&year=2020")
glue::glue(url, type, "?teams=", team_count, "&year=", year)
url <- "https://fantasyfootballcalculator.com/api/v1/adp/"
type = "standard"
team_count = 10
year = 2020
glue::glue(url, type, "?teams=", team_count, "&year=", year)
GET(glue::glue(url, type, "?teams=", team_count, "&year=", year)) %>% content(as = "parsed", type = "application/json")
GET(glue(url, type, "?teams=", team_count, "&year=", year)) %>% content(as = "parsed", type = "application/json")
GET(glue(url, type, "?teams=", team_count, "&year=", year))
proj_name <- "football"
pkgs <- c(
"devtools",
"tidyverse",
"DBI",
"odbc",
"RMariaDB",
"httr",
"readr",
"pander",
"furrr",
"na.tools",
"ggimage",
"teamcolors",
"glue",
"dplyr",
"jsonlite",
"RJSONIO",
"tictoc",
"animation",
"gt",
"png",
"DT",
"ggthemes",
"ggforce",
"ggridges",
"ggrepel",
"ggpmisc",
"ggbeeswarm",
"cowplot",
"gridExtra",
"grid",
"extrafont",
"shadowtext",
"tidytext",
"RCurl"
)
installed_packages <- pkgs %in%
rownames(installed.packages())
if (any(installed_packages == FALSE)) {
install.packages(pkgs[!installed_packages])
}
lapply(pkgs, library, character.only = TRUE)
# library("nflscrapR") # doesn't work anymore
library("nflfastR")
# library("ffscrapr")
# Detach all packages
# lapply(paste0('package:', names(sessionInfo()$otherPkgs)), detach, character.only=TRUE, unload=TRUE)
rm(pkgs, installed_packages)
source("../initR/init.R")
fx.setdir(proj_name)
GET(glue(url, type, "?teams=", team_count, "&year=", year)) %>% content(as = "parsed", type = "application/json")
adp_df <- GET(glue(url, type, "?teams=", team_count, "&year=", year)) %>% content(as = "parsed", type = "application/json")
adp_df$players
adp_df$players %>% flatten()
adp_df$players %>% flatten()
adp_df$players %>% as.data.frame() %>% flatten()
adp_df <- adp_df$players %>% as.data.frame() %>% flatten()
View(adp_df)
adp_df <- GET(glue(url, type, "?teams=", team_count, "&year=", year)) %>% content(as = "parsed", type = "application/json")
adp_df$players %>% as.data.frame()
adp_df$players
adp_df$players[[1]]
adp_df$players %>%
unlist(recursive = FALSE)
adp_df$players %>%
unlist(recursive = FALSE) %>%
as.data.frame
adp_df$players[[1]] %>% names()
adp_df$players %>%
unlist(recursive = FALSE) %>%
as.data.frame %>%
select(., starts_with("player_id"))
adp_df$players %>%
unlist(recursive = FALSE) %>%
as.data.frame %>%
select(starts_with("player_id"))
map_dfc(adp_df$players, `[`, 1)
# devtools::install_github("mrcaseb/nflfastR")
# devtools::install_github("dynastyprocess/ffscrapr")
proj_name <- "football"
pkgs <- c(
"devtools",
"tidyverse",
"DBI",
"odbc",
"RMariaDB",
"httr",
"readr",
"pander",
"furrr",
"na.tools",
"ggimage",
"teamcolors",
"glue",
"dplyr",
"jsonlite",
"RJSONIO",
"tictoc",
"animation",
"gt",
"png",
"DT",
"ggthemes",
"ggforce",
"ggridges",
"ggrepel",
"ggpmisc",
"ggbeeswarm",
"cowplot",
"gridExtra",
"grid",
"extrafont",
"shadowtext",
"tidytext",
"RCurl"
)
installed_packages <- pkgs %in%
rownames(installed.packages())
if (any(installed_packages == FALSE)) {
install.packages(pkgs[!installed_packages])
}
lapply(pkgs, library, character.only = TRUE)
# library("nflscrapR") # doesn't work anymore
library("nflfastR")
# library("ffscrapr")
# Detach all packages
# lapply(paste0('package:', names(sessionInfo()$otherPkgs)), detach, character.only=TRUE, unload=TRUE)
rm(pkgs, installed_packages)
source("../initR/init.R")
fx.setdir(proj_name)
# Create standard objects -------------------------------------------------
source("../initR/con.R")
dbListTables(con)
dbDisconnect(con)
swid  <-  "{2BA315B4-5941-4B1C-A315-B459416B1CC1}"
espn_s2 <- "AEBtGuDXUCKk6SpqlY71qdBDW%2BYc5KGa80m%2F0EVX9NCF%2FIFBM5b8ZMKgrMovpUeUqFTp4M%2BrPbM1I4rT1Ra2oXbM847nUp25DBY9Q%2FsAPChAykF5VNEZ05VjF6Vu3thAU0WkzQeBbjkdzNGqfbmPtMNzrBy8oV7fcAlwh4X89q4XlfPNED8ppKynNj5admyBk7WaqNzQtZJLlStpyOjz3F3d5BwUtQ8kh390OPB5HEEPfiH4%2FBftKqsLF%2BlyhTFaDiM%3D"
leagueID <- "1034400"
install.packages(c("backports", "bit64", "conquer", "glue", "maptools", "mgcv", "nlme", "RMariaDB", "tidyr", "vctrs", "zip"))
roster_df <- readRDS(url('https://raw.githubusercontent.com/guga31bb/nflfastR-data/master/roster-data/roster.rds')) %>%
left_join(readRDS("../GitHub/Cloned/ajrein-NFL/nflfastR ID mapping/gsis_map.rds"), by = c('teamPlayers.gsisId' = 'gsis')) %>%
mutate(ID = ifelse(is.na(ID), teamPlayers.gsisId, ID))
url <- "https://fantasyfootballcalculator.com/api/v1/adp/"
type = "standard"
team_count = 10
year = 2020
adp_df <- GET(glue(url, type, "?teams=", team_count, "&year=", year)) %>% content(as = "parsed", type = "application/json")
View(adp_df)
adp_df$players
library(tidyverse)
library(httr)
library(jsonlite)
# library(sqldf)
library(gt)
detach(package:purrr)
library(purrr)
# Create variables --------------------------------------------------------
cookies = c(`SWID` = swid,
`espn_s2` = espn_s2)
cookie <- paste(names(cookies), cookies, sep = "=", collapse = ";")
base = "http://fantasy.espn.com/apis/v3/games/ffl/seasons/"
year = "2020"
mid = "/segments/0/leagues/"
tail = "?view=mDraftDetail&view=mLiveScoring&view=mMatchupScore&view=mPendingTransactions&view=mPositionalRatings&view=mSettings&view=mTeam&view=modular&view=mNav&view=mMatchupScore"
player_tail = "?view=kona_player_info"
wl_tail = "?view=proTeamSchedules_wl"
user_agent = "Mozilla/5.0 (Macintosh; Intel Mac OS X 10.14; rv:75.0) Gecko/20100101 Firefox/75.0"
url = paste0(base,year,mid,leagueID,tail)
ESPNget = GET (
url,
config = httr::config(cookie = cookie),
content_type_json(),
user_agent(user_agent)
)
url = paste0(base, year, mid, leagueID, player_tail)
Playerget = GET (
url,
config = httr::config(cookie = cookie),
content_type_json(),
user_agent(user_agent)
)
ESPNRaw <- rawToChar(ESPNget$content)
ESPNPlayerRaw <- rawToChar(Playerget$content)
ESPNFromJSON <- jsonlite::fromJSON(ESPNRaw)
ESPNPlayerFromJSON <- jsonlite::fromJSON(ESPNPlayerRaw)
ESPNPlayerFromJSON
ESPNPlayerFromJSON$players$player$fullName
ESPNPlayerFromJSON$players$player %>% colnames()
ESPNPlayerFromJSON$players$player %>% select(fullName, rankings)
ESPNPlayerFromJSON$players$player %>% colnames()
ESPNPlayerFromJSON$players$player$rankings %>% colnames()
ESPNPlayerFromJSON$players$player$rankings$0 %>% colnames()
ESPNPlayerFromJSON$players$player$rankings$'0' %>% colnames()
ESPNPlayerFromJSON$players$player$rankings$'1' %>% colnames()
ESPNPlayerFromJSON$players$player$rankings %>% colnames()
ESPNPlayerFromJSON$players$player %>% select("fullName", "rankings")
ESPN_players <- ESPNPlayerFromJSON$players$player %>% select("fullName", "rankings")
View(ESPN_players)
View(ESPN_players[[2]][[1]])
rm(ESPN_players)
ESPNPlayers_raw <- ESPNPlayerFromJSON$players$player %>% tibble()
ESPNPlayers_clean <- ESPNPlayers_raw %>% merge(ESPNPlayers_raw$draftRanksByRankType$PPR)
ESPNPlayers_clean
View(ESPNPlayers_clean)
ESPNPlayers_clean %>% head() %>% view()
