write.csv(y, file = paste("data/games/", userYear,"/", x, ".csv", sep = ""), row.names=FALSE)
}
}
else
{
print(
paste(
"Scraping game",
x,
sep = " "
)
)
print(
paste(
game_ids[
game_ids$game_id == x, "away_team"],
"vs",
game_ids[game_ids$game_id == x, "home_team"],
sep = " "
)
)
y <- scrape_json_play_by_play(x)
tail(y)
write.csv(y, file = paste("data/games/", userYear,"/", x, ".csv", sep = ""), row.names=FALSE)
}
xawayscore <- y$total_away_score[nrow(y)]
xawayteam <- y$away_team[1]
xhomescore <- y$total_home_score[nrow(y)]
xhometeam <- y$home_team[1]
print(paste(xawayteam, ": ", xawayscore, " @ ", xhometeam, ": ", xhomescore, sep = ""))
print(
paste(
"Last play:",
y$desc[nrow(y)],
sep=""
)
)
## add to the normal scrape functions
if (file.exists(fplayers)==TRUE & grepl("END GAME", y$desc[nrow(y)]) == TRUE)
{
xplayers <- player_game(x)
write.csv(xplayers, fplayers, row.names = FALSE)
print(paste("X =", x))
xpbp <- game_play_by_play(x)
addTargets(x)
} else {
## scrape player stats
xplayers <- player_game(x)
print(paste("X =", x))
xpbp <- game_play_by_play(x)
addTargets(x)
}
}
source("functions/scrapePBP.R")
source("functions/addTargets.R")
scrapePBP(date)
scrapePBP(date)
da
class(date)
class(game_ids$game_id)
class(game_ids$game_id[1])
game_ids$game_id[1]
currentGames <- currentGameIDs <= as.numeric(date)
currentGames
date <- 202001
date <- format(today, format="%Y%m%d")
userYear <- 2019 ##necessary for saved
userWeek <- 17 ##not necessary at the moment
seasonState <- "post"
fgame_ids <- paste("data/games/", seasonState, "_season/", seasonState, "_games_", userYear, ".csv", sep ="")
fteamabbr <- paste("data/season_total/team_abbr.csv", sep = "")
teams <- read.csv(fteamabbr)
game_ids <- read.csv(fgame_ids)
game_ids <- scrape_game_ids(userYear, type = seasonState)
write.csv(game_ids, fgame_ids)
source("functions/scrapePBP.R")
source("functions/addTargets.R")
date <- format(today, format="%Y%m%d")
userYear <- 2019 ##necessary for saved
userWeek <- 17 ##not necessary at the moment
seasonState <- "post"
fgame_ids <- paste("data/games/", seasonState, "_season/", seasonState, "_games_", userYear, ".csv", sep ="")
fteamabbr <- paste("data/season_total/team_abbr.csv", sep = "")
teams <- read.csv(fteamabbr)
game_ids <- read.csv(fgame_ids)
game_ids <- scrape_game_ids(userYear, type = seasonState)
write.csv(game_ids, fgame_ids)
source("functions/scrapePBP.R")
source("functions/addTargets.R")
## read Game IDs
game_ids <- read.csv(fgame_ids, check.names = FALSE)
## save Game IDs
# write.csv(game_ids, file = fgame_ids, row.names = FALSE)
y <- data.frame()
currentGameIDs <- game_ids$game_id
#pull games in 2019 season that match today's date
currentGames <- grep(date, currentGameIDs)
##currentGames <- currentGameIDs <= date
games_in_play <- currentGameIDs[currentGames == TRUE]
##can't figure this out yet
#
#  games_in_play <- game_ids$state_of_game[currentGames] != "POST"
#
#  nplay <- length(games_in_play)
#  nplayLoop <- 1
#
# scrape pbp of active games
# if 0 games, scrape scores
for (x in games_in_play)
{
f <- paste("data/games/", userYear, "/", x, ".csv", sep = "")
fplayers <-  paste("data/players/", userYear, "/", x, "players", ".csv", sep = "")
if (file.exists(f)==TRUE)
{
#read game csv
y <- read.csv(f, check.names=FALSE)
tail(y)
#check if y$desc contains "END GAME"
#if x has END GAME change state_of_game to POST
if (grepl("END GAME", y$desc[nrow(y)]) == TRUE)
{
print(paste("Game", x, "is over.", sep = " "))
game_ids[game_ids$game_id == x, "state_of_game"] <- "POST"
game_ids[game_ids$game_id == x, "away_score"] <- y$total_away_score[nrow(y)]
game_ids[game_ids$game_id == x, "home_score"] <- y$total_home_score[nrow(y)]
print(paste("Changing the state of game for", x, "to POST", sep = " "))
write.csv(game_ids, fgame_ids, row.names = FALSE)
}
else
{
#scrape
print(
paste(
"Scraping game ",
x,
sep = ""
)
)
print(
paste(
game_ids[game_ids$game_id == x, "away_team"],
"vs",
game_ids[game_ids$game_id == x, "home_team"],
sep = " "
)
)
y <- scrape_json_play_by_play(x)
tail(y)
game_ids$X <- NULL ## annoying glitch
if (grepl("END GAME", y$desc[nrow(y)]) == TRUE) {
print(
paste(
"Game",
x,
"is over.",
sep = " "
)
)
print(
paste(
game_ids[game_ids$game_id == x, "away_team"],
"vs",
game_ids[game_ids$game_id == x, "home_team"],
sep = " "
)
)
game_ids[game_ids$game_id == x, "state_of_game"] <- "POST"
game_ids[game_ids$game_id == x, "away_score"] <- y$total_away_score[nrow(y)]
game_ids[game_ids$game_id == x, "home_score"] <- y$total_home_score[nrow(y)]
print(paste("Changing the state of game for ", x, " to POST", sep = ""))
write.csv(game_ids, fgame_ids, row.names=FALSE)
}
write.csv(y, file = paste("data/games/", userYear,"/", x, ".csv", sep = ""), row.names=FALSE)
}
}
else
{
print(
paste(
"Scraping game",
x,
sep = " "
)
)
print(
paste(
game_ids[
game_ids$game_id == x, "away_team"],
"vs",
game_ids[game_ids$game_id == x, "home_team"],
sep = " "
)
)
y <- scrape_json_play_by_play(x)
tail(y)
write.csv(y, file = paste("data/games/", userYear,"/", x, ".csv", sep = ""), row.names=FALSE)
}
xawayscore <- y$total_away_score[nrow(y)]
xawayteam <- y$away_team[1]
xhomescore <- y$total_home_score[nrow(y)]
xhometeam <- y$home_team[1]
print(paste(xawayteam, ": ", xawayscore, " @ ", xhometeam, ": ", xhomescore, sep = ""))
print(
paste(
"Last play:",
y$desc[nrow(y)],
sep=""
)
)
## add to the normal scrape functions
if (file.exists(fplayers)==TRUE & grepl("END GAME", y$desc[nrow(y)]) == TRUE)
{
xplayers <- player_game(x)
write.csv(xplayers, fplayers, row.names = FALSE)
print(paste("X =", x))
xpbp <- game_play_by_play(x)
addTargets(x)
} else {
## scrape player stats
xplayers <- player_game(x)
print(paste("X =", x))
xpbp <- game_play_by_play(x)
addTargets(x)
}
}
View(game_ids)
scrapePBP(date)
library(nflscrapR)
library(tidyverse)
library(readr)
library(pander)
library(dplyr)
library(na.tools)
library(ggimage)
library(teamcolors) # NFL team colors and logos
library(plyr)
library(readr)
library(glue)
##library(animate)
library(animation)
library(tictoc)
library(gt) # beautiful tables
library(DT) # beautiful interactive tables
library(ggthemes) # custom pre-built themes
library(bbplot) # more themes
library(ggtext) # custom text color
library(ggforce) # better annotations
library(ggridges) # many distributions at once
library(ggrepel) # better labels
library(ggbeeswarm) # beeswarm plots
library(extrafont) # for extra fonts
##reset
setwd("~/")
gid <- paste(getwd())
gid
device <- ""
if (gid == "/Volumes/HDD/Users/colinwelsh") {
##Maverick - MBP
setwd("~/Documents/dev/football")
device <- "Maverick (MBP)"
} else if (gid == "/Users/ColinWelsh") {
##Goose - iMac
setwd("~/Documents/dev/football")
device <- "Goose (iMac)"
##add Goose
}
print(paste(device, "is ready for some football", sep = " "))
rm(gid, device)
# other dependent variables
today <- Sys.Date()
#   test date
##  date <- 202001
date <- format(today, format="%Y%m%d")
userYear <- 2019 ##necessary for saved
userWeek <- 17 ##not necessary at the moment
seasonState <- "post"
fgame_ids <- paste("data/games/", seasonState, "_season/", seasonState, "_games_", userYear, ".csv", sep ="")
fteamabbr <- paste("data/season_total/team_abbr.csv", sep = "")
teams <- read.csv(fteamabbr)
game_ids <- read.csv(fgame_ids)
game_ids <- scrape_game_ids(userYear, type = seasonState)
write.csv(game_ids, fgame_ids)
source("functions/scrapePBP.R")
source("functions/addTargets.R")
if (file.exists(fplayers)==TRUE & grepl("END GAME", y$desc[nrow(y)]) == TRUE)
{
xplayers <- player_game(x)
write.csv(xplayers, fplayers, row.names = FALSE)
print(paste("X =", x))
xpbp <- game_play_by_play(x)
addTargets(x)
} else {
## scrape player stats
xplayers <- player_game(x)
print(paste("X =", x))
xpbp <- game_play_by_play(x)
addTargets(x)
}
## scrape player stats
xplayers <- player_game(x)
print(paste("X =", x))
xpbp <- game_play_by_play(x)
addTargets(x)
## scrape player stats
xplayers <- player_game(x)
print(paste("X =", x))
xpbp <- game_play_by_play(x)
addTargets(x)
install.packages(c("broom", "callr", "gh", "jsonlite", "magick", "prettyunits", "RCurl", "rlang", "rmarkdown", "tidyr", "tidyselect", "vctrs", "XML", "yaml"))
install.packages(c("boot", "foreign", "MASS", "nlme"), lib="/Library/Frameworks/R.framework/Versions/3.6/Resources/library")
install.packages(c("boot", "foreign", "MASS", "nlme"), lib = "/Library/Frameworks/R.framework/Versions/3.6/Resources/library")
library(nflscrapR)
library(tidyverse)
library(readr)
library(pander)
library(dplyr)
library(na.tools)
library(ggimage)
library(teamcolors) # NFL team colors and logos
library(plyr)
library(readr)
library(glue)
##library(animate)
library(animation)
library(tictoc)
library(gt) # beautiful tables
library(DT) # beautiful interactive tables
library(ggthemes) # custom pre-built themes
library(bbplot) # more themes
library(ggtext) # custom text color
library(ggforce) # better annotations
library(ggridges) # many distributions at once
library(ggrepel) # better labels
library(ggbeeswarm) # beeswarm plots
library(extrafont) # for extra fonts
##reset
setwd("~/")
gid <- paste(getwd())
gid
device <- ""
if (gid == "/Volumes/HDD/Users/colinwelsh") {
##Maverick - MBP
setwd("~/Documents/dev/football")
device <- "Maverick (MBP)"
} else if (gid == "/Users/ColinWelsh") {
##Goose - iMac
setwd("~/Documents/dev/football")
device <- "Goose (iMac)"
##add Goose
}
print(paste(device, "is ready for some football", sep = " "))
rm(gid, device)
# other dependent variables
today <- Sys.Date()
#   test date
##  date <- 202001
date <- format(today, format="%Y%m%d")
userYear <- 2019 ##necessary for saved
userWeek <- 17 ##not necessary at the moment
seasonState <- "post"
fgame_ids <- paste("data/games/", seasonState, "_season/", seasonState, "_games_", userYear, ".csv", sep ="")
fteamabbr <- paste("data/season_total/team_abbr.csv", sep = "")
teams <- read.csv(fteamabbr)
game_ids <- read.csv(fgame_ids)
game_ids <- scrape_game_ids(userYear, type = seasonState)
write.csv(game_ids, fgame_ids)
source("functions/scrapePBP.R")
source("functions/addTargets.R")
date <- 202001
scrapePBP(date)
x
currentGameIDs <- game_ids$game_id
#pull games in 2019 season that match today's date
currentGames <- grep(date, currentGameIDs)
##currentGames <- currentGameIDs <= date
games_in_play <- currentGameIDs[currentGames == TRUE]
x
for (x in games_in_play)
{
f <- paste("data/games/", userYear, "/", x, ".csv", sep = "")
fplayers <-  paste("data/players/", userYear, "/", x, "players", ".csv", sep = "")
if (file.exists(f)==TRUE)
{
#read game csv
y <- read.csv(f, check.names=FALSE)
tail(y)
#check if y$desc contains "END GAME"
#if x has END GAME change state_of_game to POST
if (grepl("END GAME", y$desc[nrow(y)]) == TRUE)
{
print(paste("Game", x, "is over.", sep = " "))
game_ids[game_ids$game_id == x, "state_of_game"] <- "POST"
game_ids[game_ids$game_id == x, "away_score"] <- y$total_away_score[nrow(y)]
game_ids[game_ids$game_id == x, "home_score"] <- y$total_home_score[nrow(y)]
print(paste("Changing the state of game for", x, "to POST", sep = " "))
write.csv(game_ids, fgame_ids, row.names = FALSE)
}
else
{
#scrape
print(
paste(
"Scraping game ",
x,
sep = ""
)
)
print(
paste(
game_ids[game_ids$game_id == x, "away_team"],
"vs",
game_ids[game_ids$game_id == x, "home_team"],
sep = " "
)
)
y <- scrape_json_play_by_play(x)
tail(y)
game_ids$X <- NULL ## annoying glitch
if (grepl("END GAME", y$desc[nrow(y)]) == TRUE) {
print(
paste(
"Game",
x,
"is over.",
sep = " "
)
)
print(
paste(
game_ids[game_ids$game_id == x, "away_team"],
"vs",
game_ids[game_ids$game_id == x, "home_team"],
sep = " "
)
)
game_ids[game_ids$game_id == x, "state_of_game"] <- "POST"
game_ids[game_ids$game_id == x, "away_score"] <- y$total_away_score[nrow(y)]
game_ids[game_ids$game_id == x, "home_score"] <- y$total_home_score[nrow(y)]
print(paste("Changing the state of game for ", x, " to POST", sep = ""))
write.csv(game_ids, fgame_ids, row.names=FALSE)
}
write.csv(y, file = paste("data/games/", userYear,"/", x, ".csv", sep = ""), row.names=FALSE)
}
}
else
{
print(
paste(
"Scraping game",
x,
sep = " "
)
)
print(
paste(
game_ids[
game_ids$game_id == x, "away_team"],
"vs",
game_ids[game_ids$game_id == x, "home_team"],
sep = " "
)
)
y <- scrape_json_play_by_play(x)
tail(y)
write.csv(y, file = paste("data/games/", userYear,"/", x, ".csv", sep = ""), row.names=FALSE)
}
xawayscore <- y$total_away_score[nrow(y)]
xawayteam <- y$away_team[1]
xhomescore <- y$total_home_score[nrow(y)]
xhometeam <- y$home_team[1]
print(paste(xawayteam, ": ", xawayscore, " @ ", xhometeam, ": ", xhomescore, sep = ""))
print(
paste(
"Last play:",
y$desc[nrow(y)],
sep=""
)
)
## add to the normal scrape functions
if (file.exists(fplayers)==TRUE & grepl("END GAME", y$desc[nrow(y)]) == TRUE)
{
xplayers <- player_game(x)
write.csv(xplayers, fplayers, row.names = FALSE)
print(paste("X =", x))
xpbp <- game_play_by_play(x)
addTargets(x)
} else {
## scrape player stats
xplayers <- player_game(x)
print(paste("X =", x))
xpbp <- game_play_by_play(x)
addTargets(x)
}
}
pbpSeason <- list.files(paste("data/games/", userYear, "/", sep = ""),
pattern = "*.csv", full.names = TRUE) %>%
lapply(read_csv) %>%
bind_rows
pbpSeason
write.csv(pbpSeason, file = paste("data/season_total/", userYear,"pbp.csv", sep = ""), row.names = FALSE)
playerSeason <- list.files(paste("data/players/", userYear, "/", sep = ""),
pattern = "*.csv", full.names = TRUE) %>%
lapply(read_csv) %>%
bind_rows
playerSeason
write.csv(playerSeason, file = paste("data/season_total/", userYear, "players.csv", sep = ""), row.names = FALSE)
rosterSeason <- list.files(paste("data/teams/", userYear, "/", sep = ""),
pattern = "*.csv", full.names = TRUE) %>%
lapply(read_csv) %>%
bind_rows
rosterSeason
write.csv(rosterSeason, file = paste("data/season_total/", userYear, "roster.csv", sep = ""), row.names = FALSE)
