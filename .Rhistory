row_group.border.bottom.color = 'darkblue',
table.border.top.color = 'transparent',
table.background.color = '#38424B',
table.border.bottom.color = 'transparent',
row.striping.background_color = '#FFFFFF',
row.striping.include_table_body = TRUE
) %>% return
}
# function to set rounded plot limits
properLims <- function(vec) {
labs <- labeling::extended(min(vec, na.rm = T), max(vec, na.rm = T), m = 5)
gap <- diff(labs[1:2])
plot_max <- ifelse(rev(labs)[1] < max(vec, na.rm = T), rev(labs)[1] + gap, rev(labs)[1])
plot_min <- ifelse(labs[1] > min(vec, na.rm = T), labs[1] - gap, labs[1])
return(c(plot_min,plot_max))
}
plus_lab = function(x, accuracy = NULL, suffix = '') paste0(ifelse(x>0,'+',''),number(x, accuracy = accuracy, suffix = suffix, scale = ifelse(suffix == '%', 100, 1)))
plus_lab_format <- function (accuracy = NULL, suffix = '') function(x) plus_lab(x, accuracy = accuracy, suffix = suffix)
full_alpha_hex = function(color, alpha) {
old_rgb <- col2rgb(color)
new_rgb <- (255 - (255 - old_rgb) * alpha) / 255
return(rgb(new_rgb['red',], new_rgb['green',], new_rgb['blue',]))
}
# function to set rounded plot limits if scale_x_reverse is used
properLimsRev <- function(vec) {
labs <- labeling::extended(min(vec, na.rm = T), max(vec, na.rm = T), m = 5)
gap <- diff(labs[1:2])
plot_max <- ifelse(rev(labs)[1] < max(vec, na.rm = T), rev(labs)[1] + gap, rev(labs)[1])
plot_min <- ifelse(labs[1] > min(vec, na.rm = T), labs[1] - gap, labs[1])
return(c(plot_max,plot_min))
}
# makes a gradient if I want to fade plot borders
make_gradient <- function(deg, n = 500, col = color_cw[1], corner = F) {
rad <- deg / (180 / pi)
mat <- matrix(
data = rep(seq(0, 1, length.out = n) * cos(rad), n),
byrow = TRUE,
ncol = n
) +
matrix(
data = rep(seq(0, 1, length.out = n) * sin(rad), n),
byrow = FALSE,
ncol = n
)
mat <- mat - min(mat)
mat <- mat / max(mat)
mat <- 1 + mat * n
mat <- matrix(data = alpha(col, mat/(n+1)), ncol = n)
grid::rasterGrob(
image = mat,
width = unit(1, "npc"),
height = unit(1, "npc"),
interpolate = TRUE
)
}
# gets the limits of the x axis from a plot
axis_limits_x <- function(p) {
if (!is.null(ggplot_build(p)$layout$coord$limits$x)) {
return(ggplot_build(p)$layout$coord$limits$x)
} else if (!is.null(ggplot_build(p)$layout$panel_scales_x[[1]]$range_c$range)) {
return(ggplot_build(p)$layout$panel_scales_x[[1]]$range_c$range)
} else {
return(ggplot_build(p)$layout$panel_scales_x[[1]]$range$range)
}
}
# gets the limits of the y axis from a plot
axis_limits_y <- function(p) {
if (!is.null(ggplot_build(p)$layout$coord$limits$y)) {
return(ggplot_build(p)$layout$coord$limits$y)
} else if (!is.null(ggplot_build(p)$layout$panel_scales_y[[1]]$range_c$range)) {
return(ggplot_build(p)$layout$panel_scales_y[[1]]$range_c$range)
} else {
return(ggplot_build(p)$layout$panel_scales_y[[1]]$range$range)
}
}
# reads in an image as a grob and allows for some image alterations
grob_img_adj<-function(img_url, alpha = 0, whitewash = 0) {
return(lapply(img_url, function(x) {
if(is.na(x)) {
return(NULL)
}else{
img <- image_read(x)[[1]]
img[1,,] <- as.raw(255 - (255 - as.integer(img[1,,])) * (1-whitewash))
img[2,,] <- as.raw(255 - (255 - as.integer(img[2,,])) * (1-whitewash))
img[3,,] <- as.raw(255 - (255 - as.integer(img[3,,])) * (1-whitewash))
img[4,,] <- as.raw(as.integer(img[4,,]) * (1-alpha))
return(grid::rasterGrob(image = image_read(img)))
}
}))
}
# used to create branded videos
Scene2 <- ggproto(
"Scene2",
gganimate:::Scene,
plot_frame = function(self, plot, i, newpage = is.null(vp), vp = NULL, widths = NULL, heights = NULL, ...) {
plot <- self$get_frame(plot, i)
plot <- ggplot_gtable(plot)
# insert changes here
logo_file <- readPNG(getURLContent('https://raw.githubusercontent.com/ajreinhard/data-viz/master/ggplot/statbutler.png'))
author_txt <- textGrob('By Anthony Reinhard', x=unit(0.065, 'npc'), gp=gpar(col='darkblue', fontfamily=font_family, fontsize=18), hjust=0)
data_txt <- textGrob(self$data_home, x=unit(1 - (.01), 'npc'), gp=gpar(col='grey95', fontfamily=font_family, fontsize=18), hjust=1)
footer_bg <- grid.rect(x = unit(seq(0.5,1.5,length=1000), 'npc'), gp=gpar(col = 'transparent', fill = colorRampPalette(c('grey95', 'darkblue'), space = 'rgb')(1000)), draw = F)
footer <- grobTree(footer_bg, author_txt, data_txt)
plt.final <- grid.arrange(plot, footer, heights=unit(c(1, 36), c('null','pt')))
plot <- ggdraw(plt.final) + draw_image(logo_file, x = 0.002, y = 0, hjust = 0, vjust = 0, height = 0.08, width = 0.1067 * (9/16))
if (!is.null(widths)) plot$widths <- widths
if (!is.null(heights)) plot$heights <- heights
if (newpage) grid.newpage()
grDevices::recordGraphics(
requireNamespace("gganimate", quietly = TRUE),
list(),
getNamespace("gganimate")
)
if (is.null(vp)) {
grid.draw(plot)
} else {
if (is.character(vp)) seekViewport(vp)
else pushViewport(vp)
grid.draw(plot)
upViewport()
}
invisible(NULL)
}
)
Scene2$data_home <- NULL
### the next four functions will simply duplicate existing nested gganimate functions and replace them with my personalized Scene2 function
# used to create branded videos
create_scene2 <- function(transition, view, shadow, ease, transmuters, nframes, data_home) {
if (is.null(nframes)) nframes <- 100
ggproto(NULL, Scene2, transition = transition,
view = view, shadow = shadow, ease = ease,
transmuters = transmuters, nframes = nframes,
data_home = data_home)
}
# used to create branded videos
ggplot_build2 <- gganimate:::ggplot_build.gganim
formals(ggplot_build2) <- c(formals(ggplot_build2), alist(data_home = ))
body(ggplot_build2) <- body(ggplot_build2) %>%
as.list() %>%
inset2(4,
quote(scene <- create_scene2(plot$transition, plot$view, plot$shadow,
plot$ease, plot$transmuters, plot$nframes, data_home))) %>%
as.call()
# used to create branded videos
prerender2 <- gganimate:::prerender
formals(prerender2) <- c(formals(prerender2), alist(data_home = ))
body(prerender2) <- body(prerender2) %>%
as.list() %>%
inset2(3,
quote(ggplot_build2(plot, data_home))) %>%
as.call()
# used to create branded videos
animate_SB <- gganimate:::animate.gganim
formals(animate_SB) <- c(formals(animate_SB)[-length(formals(animate_SB))], alist(data_home = ''), formals(animate_SB)[length(formals(animate_SB))])
body(animate_SB) <- body(animate_SB) %>%
as.list() %>%
inset2(8,
quote(plot <- prerender2(plot, nframes_total, data_home))) %>%
as.call()
color_SB <-
c(
"#ff7f00", # orange
"#9932cc", # purple
"#8cff72", # green
"#00008b", # blue
"#51dbd8", # turqoise
"#674b00", # gold
"#ff66cf", # pink
"#8f8f8f",
"#ff0000",
"#e1ed00",
"#0b5209",
"#636363"
)
color_cw <-
c(
"#1D2329",
"#2C343A",
"#38424B",
"#16191C",
"#e0e0e0",
"#1AB063",
"#0580DC",
"#D64964",
"#959595"
)
NFL_pri <- c('ARI'='#97233f',
'ATL'='#a71930',
'BAL'='#241773',
'BUF'='#00338d',
'CAR'='#0085ca',
'CHI'='#0b162a',
'CIN'='#000000',
'CLE'='#fb4f14',
'DAL'='#002244',
'DEN'='#002244',
'DET'='#005a8b',
'GB'='#203731',
'HOU'='#03202f',
'IND'='#002c5f',
'JAX'='#000000',
'KC'='#e31837',
'LAC'='#002a5e',
'LA'='#003594',
'MIA'='#008e97',
'MIN'='#4f2683',
'NE'='#002244',
'NO'='#9f8958',
'NYG'='#0b2265',
'NYJ'='#125740',
'OAK'='#000000',
'LV'='#000000',
'PHI'='#004953',
'PIT'='#000000',
'SD'='#002244',
'SF'='#aa0000',
'SEA'='#002244',
'STL'='#002244',
'TB'='#d50a0a',
'TEN'='#002244',
'WAS'='#773141')
NFL_sec <- c('ARI'='#000000',
'ATL'='#000000',
'BAL'='#9e7c0c',
'BUF'='#c60c30',
'CAR'='#000000',
'CHI'='#c83803',
'CIN'='#fb4f14',
'CLE'='#22150c',
'DAL'='#b0b7bc',
'DEN'='#fb4f14',
'DET'='#b0b7bc',
'GB'='#ffb612',
'HOU'='#a71930',
'IND'='#a5acaf',
'JAX'='#006778',
'KC'='#ffb612',
'LAC'='#0080c6',
'LA'='#ffd100',
'MIA'='#fc4c02',
'MIN'='#ffc62f',
'NE'='#c60c30',
'NO'='#000000',
'NYG'='#a71930',
'NYJ'='#000000',
'OAK'='#a5acaf',
'LV'='#a5acaf',
'PHI'='#a5acaf',
'PIT'='#ffb612',
'SD'='#0073cf',
'SF'='#b3995d',
'SEA'='#69be28',
'STL'='#b3995d',
'TB'='#34302b',
'TEN'='#4b92db',
'WAS'='#ffb612')
# main cw theme
theme_cw <-  theme(
line = element_line(lineend = 'round', color = color_cw[1]),
text = element_text(family = font_family, color = color_cw[5]),
plot.background = element_rect(fill = color_cw[1], color = 'transparent'),
panel.border = element_rect(color = color_cw[1], fill = NA),
panel.background = element_rect(fill = color_cw[1], color = 'transparent'),
axis.ticks = element_line(color = color_cw[5], size = 0.5),
axis.ticks.length = unit(2.75, 'pt'),
axis.title = element_text(size = 8),
axis.text = element_text(size = 7, color = color_cw[5]),
plot.title = element_text(size = 14),
plot.subtitle = element_text(size = 8),
plot.caption = element_text(size = 5),
legend.background = element_rect(fill = color_cw[3], color = color_cw[5]),
legend.key = element_blank(),
panel.grid.minor = element_blank(),
panel.grid.major = element_line(color=color_cw[4], size = 0.3),
axis.title.y = element_text(angle = 0, vjust = 0.5),
strip.background = element_rect(fill = color_cw[5]),
strip.text = element_text(size = 6, color = color_cw[5], family = font_family),
legend.position = 'bottom',
panel.spacing.y = unit(0, 'lines'),
panel.spacing.x = unit(0.1, 'lines')
)
p <- sim_df %>%
left_join(percentile_df) %>%
left_join(WR_rank_df) %>%
mutate(
sim_pg = sim_tot / tot_gp,
pl_lab = paste0(receiver, '\n', number(perc * 100, accuracy = 0.1), ' perc.'),
posteam = factor(posteam, .tm_div_order_alt)
) %>%
group_by(posteam, receiver) %>%
mutate(obs_num = row_number()) %>%
ggplot(aes(x = sim_pg, y = tm_rnk, group = receiver, label = pl_lab)) +
facet_wrap(. ~ posteam, nrow = 4, scales = 'free') +
geom_point(aes(x = ifelse(obs_num==1, half_PPR_pg, NA), y = tm_rnk + 0.08), color = color_cw[1], fill = color_cw[8], shape = 24, size = 0.6, stroke = 0.2, na.rm = T) +
stat_density_ridges(
aes(fill = factor(stat(quantile))),
geom = 'density_ridges_gradient',
quantiles = c(.1,.25,.75,.9),
rel_min_height = 0.001,
bandwidth = 1,
calc_ecdf = T,
scale = 0.9,
color = color_cw[7],
size = 0.2,
show.legend = F
) +
#geom_boxplot(size = 0.4, color = 'darkblue', width = 0.6, outlier.alpha = 0, notchwidth = 1) +
geom_shadowtext(aes(x = ifelse(obs_num==1, 48, NA), y = tm_rnk - 0.5), hjust = 1, color = color_cw[5], bg.color = color_cw[4], #[family = font_family,]
size = 1.2, na.rm = T, bg.r = 0.2) +
scale_x_continuous(breaks = seq(0,80,10), expand = expansion(mult = 0), limits = c(0,50)) +
scale_y_reverse(expand = expansion(mult = c(0, 0.04), add = c(0.2, 0)), limits = c(4.1,0)) +
scale_fill_manual(values = c(alpha(color_cw[8], 0.5),alpha(color_cw[7], 0.5),alpha(color_cw[5], 0.5),alpha(color_cw[7], 0.5),alpha(color_cw[8], 0.5))) +
labs(title = paste0('2020 Expected 1/2 PPR Fantasy Points per Game as of Week ', my_week),
subtitle = 'Grey represents middle 50% of outcomes, Orange tails are each 10% of outcomes  |  Caret shows actual avg  |  Based on 10,000 Simulations',
x = NULL) +
theme_cw +
theme(
axis.title.y = element_blank(),
axis.text.y = element_blank(),
axis.ticks.y = element_blank(),
panel.grid.major.y = element_blank(),
axis.text = element_text(size = 4),
axis.line = element_line(color = '#e0e0e0', size = 0.5),
panel.border = element_rect(color = '#16191C', size = 0.1),
axis.ticks.length = unit(0.15, 'lines'),
axis.ticks = element_line(color = '#e0e0e0', size = 0.5),
panel.grid.minor.x = element_line('#16191C', size = 0.2),
panel.spacing.x = unit(0.5, 'lines')
) +
annotation_custom(make_gradient(deg = 270), ymin=Inf, ymax=-0.1, xmin=-Inf, xmax=Inf) +
annotation_custom(make_gradient(deg = 0), ymin=-Inf, ymax=Inf, xmin=48, xmax=Inf)
brand_plot(p, asp = 16/9, save_name = 'xfp_half_PPR_box_2020_test.png', data_home = 'Data: @nflfastR', tm_wordmarks = T)
# main cw theme
theme_cw <-  theme(
line = element_line(lineend = 'round', color = color_cw[1]),
text = element_text(family = font_family, color = color_cw[5]),
plot.background = element_rect(fill = color_cw[2], color = 'transparent'),
panel.border = element_rect(color = color_cw[1], fill = NA),
panel.background = element_rect(fill = color_cw[1], color = 'transparent'),
axis.ticks = element_line(color = color_cw[5], size = 0.5),
axis.ticks.length = unit(2.75, 'pt'),
axis.title = element_text(size = 8),
axis.text = element_text(size = 7, color = color_cw[5]),
plot.title = element_text(size = 14),
plot.subtitle = element_text(size = 8),
plot.caption = element_text(size = 5),
legend.background = element_rect(fill = color_cw[3], color = color_cw[5]),
legend.key = element_blank(),
panel.grid.minor = element_blank(),
panel.grid.major = element_line(color=color_cw[4], size = 0.3),
axis.title.y = element_text(angle = 0, vjust = 0.5),
strip.background = element_rect(fill = color_cw[5]),
strip.text = element_text(size = 6, color = color_cw[5], family = font_family),
legend.position = 'bottom',
panel.spacing.y = unit(0, 'lines'),
panel.spacing.x = unit(0.1, 'lines')
)
brand_plot(p, asp = 16/9, save_name = 'xfp_half_PPR_box_2020_test.png', data_home = 'Data: @nflfastR', tm_wordmarks = T)
p <- sim_df %>%
left_join(percentile_df) %>%
left_join(WR_rank_df) %>%
mutate(
sim_pg = sim_tot / tot_gp,
pl_lab = paste0(receiver, '\n', number(perc * 100, accuracy = 0.1), ' perc.'),
posteam = factor(posteam, .tm_div_order_alt)
) %>%
group_by(posteam, receiver) %>%
mutate(obs_num = row_number()) %>%
ggplot(aes(x = sim_pg, y = tm_rnk, group = receiver, label = pl_lab)) +
facet_wrap(. ~ posteam, nrow = 4, scales = 'free') +
geom_point(aes(x = ifelse(obs_num==1, half_PPR_pg, NA), y = tm_rnk + 0.08), color = color_cw[1], fill = color_cw[8], shape = 24, size = 0.6, stroke = 0.2, na.rm = T) +
stat_density_ridges(
aes(fill = factor(stat(quantile))),
geom = 'density_ridges_gradient',
quantiles = c(.1,.25,.75,.9),
rel_min_height = 0.001,
bandwidth = 1,
calc_ecdf = T,
scale = 0.9,
color = color_cw[7],
size = 0.2,
show.legend = F
) +
#geom_boxplot(size = 0.4, color = 'darkblue', width = 0.6, outlier.alpha = 0, notchwidth = 1) +
geom_shadowtext(aes(x = ifelse(obs_num==1, 48, NA), y = tm_rnk - 0.5), hjust = 1, color = color_cw[5], bg.color = color_cw[4], #[family = font_family,]
size = 1.2, na.rm = T, bg.r = 0.2) +
scale_x_continuous(breaks = seq(0,80,10), expand = expansion(mult = 0), limits = c(0,50)) +
scale_y_reverse(expand = expansion(mult = c(0, 0.04), add = c(0.2, 0)), limits = c(4.1,0)) +
scale_fill_manual(values = c(alpha(color_cw[8], 0.5),alpha(color_cw[7], 0.5),alpha(color_cw[5], 0.5),alpha(color_cw[7], 0.5),alpha(color_cw[8], 0.5))) +
labs(title = paste0('2020 Expected 1/2 PPR Fantasy Points per Game as of Week ', my_week),
subtitle = 'Grey represents middle 50% of outcomes, Orange tails are each 10% of outcomes  |  Caret shows actual avg  |  Based on 10,000 Simulations',
x = NULL) +
theme_cw +
theme(
axis.title.y = element_blank(),
axis.text.y = element_blank(),
axis.ticks.y = element_blank(),
panel.grid.major.y = element_blank(),
axis.text = element_text(size = 4),
axis.line = element_line(color = '#e0e0e0', size = 0.5),
panel.border = element_rect(color = '#16191C', size = 0.1),
axis.ticks.length = unit(0.15, 'lines'),
axis.ticks = element_line(color = '#e0e0e0', size = 0.5),
panel.grid.minor.x = element_line('#16191C', size = 0.2),
panel.spacing.x = unit(0.5, 'lines')
) +
annotation_custom(make_gradient(deg = 270), ymin=Inf, ymax=-0.1, xmin=-Inf, xmax=Inf) +
annotation_custom(make_gradient(deg = 0), ymin=-Inf, ymax=Inf, xmin=48, xmax=Inf)
brand_plot(p, asp = 16/9, save_name = 'xfp_half_PPR_box_2020_test.png', data_home = 'Data: @nflfastR', tm_wordmarks = T)
# main cw theme
theme_cw <-  theme(
line = element_line(lineend = 'round', color = color_cw[1]),
text = element_text(family = font_family, color = color_cw[5]),
plot.background = element_rect(fill = color_cw[1], color = 'transparent'),
panel.border = element_rect(color = color_cw[1], fill = NA),
panel.background = element_rect(fill = color_cw[2], color = 'transparent'),
axis.ticks = element_line(color = color_cw[5], size = 0.5),
axis.ticks.length = unit(2.75, 'pt'),
axis.title = element_text(size = 8),
axis.text = element_text(size = 7, color = color_cw[5]),
plot.title = element_text(size = 14),
plot.subtitle = element_text(size = 8),
plot.caption = element_text(size = 5),
legend.background = element_rect(fill = color_cw[3], color = color_cw[5]),
legend.key = element_blank(),
panel.grid.minor = element_blank(),
panel.grid.major = element_line(color=color_cw[4], size = 0.3),
axis.title.y = element_text(angle = 0, vjust = 0.5),
strip.background = element_rect(fill = color_cw[5]),
strip.text = element_text(size = 6, color = color_cw[5], family = font_family),
legend.position = 'bottom',
panel.spacing.y = unit(0, 'lines'),
panel.spacing.x = unit(0.1, 'lines')
)
p <- sim_df %>%
left_join(percentile_df) %>%
left_join(WR_rank_df) %>%
mutate(
sim_pg = sim_tot / tot_gp,
pl_lab = paste0(receiver, '\n', number(perc * 100, accuracy = 0.1), ' perc.'),
posteam = factor(posteam, .tm_div_order_alt)
) %>%
group_by(posteam, receiver) %>%
mutate(obs_num = row_number()) %>%
ggplot(aes(x = sim_pg, y = tm_rnk, group = receiver, label = pl_lab)) +
facet_wrap(. ~ posteam, nrow = 4, scales = 'free') +
geom_point(aes(x = ifelse(obs_num==1, half_PPR_pg, NA), y = tm_rnk + 0.08), color = color_cw[1], fill = color_cw[8], shape = 24, size = 0.6, stroke = 0.2, na.rm = T) +
stat_density_ridges(
aes(fill = factor(stat(quantile))),
geom = 'density_ridges_gradient',
quantiles = c(.1,.25,.75,.9),
rel_min_height = 0.001,
bandwidth = 1,
calc_ecdf = T,
scale = 0.9,
color = color_cw[7],
size = 0.2,
show.legend = F
) +
#geom_boxplot(size = 0.4, color = 'darkblue', width = 0.6, outlier.alpha = 0, notchwidth = 1) +
geom_shadowtext(aes(x = ifelse(obs_num==1, 48, NA), y = tm_rnk - 0.5), hjust = 1, color = color_cw[5], bg.color = color_cw[4], #[family = font_family,]
size = 1.2, na.rm = T, bg.r = 0.2) +
scale_x_continuous(breaks = seq(0,80,10), expand = expansion(mult = 0), limits = c(0,50)) +
scale_y_reverse(expand = expansion(mult = c(0, 0.04), add = c(0.2, 0)), limits = c(4.1,0)) +
scale_fill_manual(values = c(alpha(color_cw[8], 0.5),alpha(color_cw[7], 0.5),alpha(color_cw[5], 0.5),alpha(color_cw[7], 0.5),alpha(color_cw[8], 0.5))) +
labs(title = paste0('2020 Expected 1/2 PPR Fantasy Points per Game as of Week ', my_week),
subtitle = 'Grey represents middle 50% of outcomes, Orange tails are each 10% of outcomes  |  Caret shows actual avg  |  Based on 10,000 Simulations',
x = NULL) +
theme_cw +
theme(
axis.title.y = element_blank(),
axis.text.y = element_blank(),
axis.ticks.y = element_blank(),
panel.grid.major.y = element_blank(),
axis.text = element_text(size = 4),
axis.line = element_line(color = '#e0e0e0', size = 0.5),
panel.border = element_rect(color = '#16191C', size = 0.1),
axis.ticks.length = unit(0.15, 'lines'),
axis.ticks = element_line(color = '#e0e0e0', size = 0.5),
panel.grid.minor.x = element_line('#16191C', size = 0.2),
panel.spacing.x = unit(0.5, 'lines')
) +
annotation_custom(make_gradient(deg = 270), ymin=Inf, ymax=-0.1, xmin=-Inf, xmax=Inf) +
annotation_custom(make_gradient(deg = 0), ymin=-Inf, ymax=Inf, xmin=48, xmax=Inf)
brand_plot(p, asp = 16/9, save_name = 'xfp_half_PPR_box_2020_test.png', data_home = 'Data: @nflfastR', tm_wordmarks = T)
??ggplot_gtable
orig_plot_bld <- ggplot_gtable(ggplot_build(p))
which(sapply(orig_plot_bld$grob, function(x) x$name)=='strip')
grob_strip_index <- which(sapply(orig_plot_bld$grob, function(x) x$name)=='strip')
sapply(grob_strip_index, function(grb) {
orig_plot_bld$grobs[[grb]]$grobs[[1]]$children[[2]]$children[[1]]$label
}
)
facet_id <- sapply(grob_strip_index, function(grb) {
orig_plot_bld$grobs[[grb]]$grobs[[1]]$children[[2]]$children[[1]]$label
})
orig_plot_bld$layout$z[grob_strip_index]
orig_plot_bld$layout$z[grob_strip_index] <- 0
for (i in 1:length(facet_id)) {
team_wd <- rasterGrob(image = image_read(wordmark_url(facet_id[i])), vp = viewport(height = .8, width = .6))
tot_tree <- grobTree(team_wd)
orig_plot_bld$grobs[[grob_strip_index[i]]] <- tot_tree
}
orig_plot_bld$grobs[[grob_strip_index[i]]]
ggdraw(orig_plot_bld)
rm(orig_plot_bld)
rm(grob_strip_index)
rm(facet_id)
rm(team_wd)
rm(tot_tree)
rm(orig_plot)
pl_lab
