install.packages(pkgs[!installed_packages])
}
lapply(pkgs, library, character.only = TRUE)
library("nflscrapR")
library("nflfastR")
##install.packages(c("devtools", "tidyverse", "readr", "pander", "na.tools", "ggimage", "devtools", "teamcolors", "glue", "animate", "dplyr", "tictoc", "animation"))
##devtools::install_github(repo = "maksimhorowitz/nflscrapR")
##reset
setwd("~/")
gid <- paste(getwd())
gid
device <- ""
if (gid == "/Volumes/HDD/Users/colinwelsh") {
## Maverick - MBP
setwd("~/Documents/dev/football")
device <- "Maverick (MBP)"
} else if (gid == "/Users/ColinWelsh") {
## Goose - iMac
setwd("~/Documents/dev/football")
device <- "Goose (iMac)"
} else if (gid == "/home/rstudio-user") {
## RStudio Cloud
setwd("/cloud/project")
device <- "RStudio Cloud"
}
print(paste(device, "is ready for some football", sep = " "))
rm(gid, device)
#   Formate today for latest scrape
today <- format(Sys.Date(), "%Y%d%m")
## Create a list of Game IDs
###############
season_state <- c("pre", "reg", "post")
all_game_ids <- list.files(paste("data/games/", season_state, "_season", sep = ""),
pattern = "*.csv", full.names = TRUE) %>%
lapply(read_csv) %>%
bind_rows()
all_game_ids <- all_game_ids$game_id
all_game_ids <- all_game_ids[all_game_ids <= today]
## Remove broken games
broken_games <- c(2014081503, 2016080751)
all_game_ids <- all_game_ids[! all_game_ids %in% broken_games]
all_files <- c()
## Solved postseason year filepath bug
###############
get_t.year <- function(x) {
if(as.integer(substr(x, 5, 6)) < 3) {
invisible(as.integer(substr(x, 1, 4)) - 1)
}
else {
invisible(substr(x, 1, 4))
}
}
## Create a list of all files
###############
name_all_files <- function(x) {
t.year <- get_t.year(x)
f.pbp_x <- paste("data/games/", t.year, "/", x, ".csv", sep = "")
f.players_x <- paste("data/players/", t.year, "/", x, "players.csv", sep = "")
all_files <- append(all_files, f.pbp_x)
all_files <- append(all_files, f.players_x)
}
all_files <- all_game_ids %>% lapply(name_all_files)
all_files <- unlist(all_files)
## Scrape all files
###############
scrape_all_files <- function(x) {
if (file.exists(x) == TRUE) {
## print(paste("All", x, "files exist"))
}
if (file.exists(x) == FALSE) {
## tf.pbp_file <- paste("data/games/", t.year, "/", t.game_id, ".csv", sep = "")
## tf.player_file <- paste("data/players/", t.year, "/", t.game_id, "players.csv", sep = "")
## Game logic
if (substr(x, 6, 6) == "g") {
t.game_id <- x %>% substr(17, 26) %>% as.integer()
## game_date <- format(as.Date(substr(x, 1, 8)), "%Y-%d-%m")
t.year <- get_t.year(t.game_id)
paste("Scraping game data for", t.game_id, sep = " ") %>% print()
tf.df <- nflscrapR::scrape_json_play_by_play(t.game_id)
print("Successfully scraped pbp!")
}
## Player logic
if (substr(x, 6, 6) == "p") {
t.game_id <- x %>% substr(19, 28) %>% as.integer()
tf.pbp_file <- paste("data/games/", get_t.year(t.game_id), "/", t.game_id, ".csv", sep = "")
paste("Scraping player data for", t.game_id, sep = " ") %>% print()
tf.df <- player_game(t.game_id)
print("Successfully scraped player game!")
targets <- read_csv(tf.pbp_file) %>% filter(play_type == "pass" & receiver_player_id != "NA")
tf.targets <- tibble(
playerID = unique(targets$receiver_player_id),
targets = integer(length(unique(targets$receiver_player_id)))
)
add_targets <- function(x){
tf.targets[tf.targets$playerID == x, "targets"] <- sum(targets$receiver_player_id == x)
}
tf.targets$playerID %>% lapply(add_targets)
tf.targets$targets <- unlist(tf.targets$playerID %>% lapply(add_targets))
tf.df <- dplyr::left_join(tf.df, tf.targets, by = "playerID")
print("Successfully joined targets to player game!")
}
write.csv(tf.df, file = x, row.names = FALSE)
}
}
lapply(all_files, scrape_all_files)
library(ggimage)
x = 1
u.year <- 2010:2019
pbp <- readRDS(url(paste("https://raw.githubusercontent.com/guga31bb/nflfastR-data/master/data/play_by_play_", u.year[x], ".rds", sep = ""))) %>%
filter(game_type == 'REG') %>% clean_pbp() %>% filter(!is.na(posteam) & (rush == 1 | pass == 1))
qb_epa_play <- pbp %>% group_by(passer_player_name) %>% summarise(off_epa = mean(epa, na.rm = TRUE))
cpoe <- pbp %>% group_by(passer_player_name) %>% summarise(cpoe = mean(cpoe, na.rm = TRUE))
logos <- teams_colors_logos %>% select(team_abbr, team_logo_espn)
pbp <- readRDS(url(paste("https://raw.githubusercontent.com/guga31bb/nflfastR-data/master/data/play_by_play_", u.year[x], ".rds", sep = ""))) %>%
filter(game_type == 'REG') %>% clean_pbp() %>% filter(!is.na(posteam) & (rush == 1 | pass == 1))
offense <- pbp %>% group_by(posteam) %>% summarise(off_epa = mean(epa, na.rm = TRUE))
defense <- pbp %>% group_by(defteam) %>% summarise(def_epa = mean(epa, na.rm = TRUE))
logos <- teams_colors_logos %>% select(team_abbr, team_logo_espn)
wr_ay_data <- function(season) {
# load pbp for the choosen seasosn from nflfastR data repo
# can be multiple seasons as well
pbp <-
purrr::map_df(season, function(x) {
readRDS(url(glue::glue("https://raw.githubusercontent.com/guga31bb/nflfastR-data/master/data/play_by_play_{x}.rds")))
})
# load roster data from nflfastR data repo
roster <-
readRDS(url("https://raw.githubusercontent.com/guga31bb/nflfastR-data/master/roster-data/roster_1999_to_2019.rds"))
# compute cpoe grouped by air_yards
ay <- pbp %>%
filter(!is.na(receiver_player_id)) %>%
group_by(receiver_player_id, air_yards) %>%
summarise(count = n(), air_yards_mean = mean(air_yards))
# summarise cpoe using player ID (note that player ids are 'NA' for 'no_play' plays.
# Since we would filter those plays anyways we can use the id here)
# The correct name is being joined using the roster data
# first arranged by number of plays to filter the 30 QBs with most pass attempts
# The filter is set to 30 because we want to have 6 columns and 5 rows in the facet
summary <-
pbp %>%
filter(!is.na(receiver_player_id)) %>%
group_by(receiver_player_id) %>%
summarise(plays = n()) %>%
arrange(desc(plays)) %>%
head(30) %>%
left_join(
roster %>% filter(team.season == season) %>% select(name = teamPlayers.displayName, teamPlayers.gsisId, team.abbr, teamPlayers.headshot_url),
by = c("receiver_player_id" = "teamPlayers.gsisId")
) %>%
mutate(# some headshot urls are broken. They are checked here and set to a default
teamPlayers.headshot_url = dplyr::if_else(
RCurl::url.exists(as.character(teamPlayers.headshot_url)),
as.character(teamPlayers.headshot_url),
"http://static.nfl.com/static/content/public/image/fantasy/transparent/200x200/default.png",
)
) %>%
left_join(ay, by = "receiver_player_id") %>%
left_join(
teams_colors_logos %>% select(team_abbr, team_color, team_logo_espn),
by = c("team.abbr" = "team_abbr")
)
# create data frame used to add the logos
# arranged by name because name is used for the facet
colors_raw <-
summary %>%
group_by(receiver_player_id) %>%
summarise(team = first(team.abbr), name = first(name)) %>%
left_join(
teams_colors_logos %>% select(team_abbr, team_color),
by = c("team" = "team_abbr")
) %>%
arrange(name)
# the below used smooth algorithm uses the paramter n as the number
# of points at which to evaluate the smoother. When using color as aesthetics
# we need exactly the same number of colors (-> n times the same color per player)
n_eval <- 80
colors <-
as.data.frame(lapply(colors_raw, rep, n_eval)) %>%
arrange(name)
# mean data frame for the smoothed line of the whole league
mean <-
summary %>%
group_by(air_yards) %>%
summarise(league = mean(ay), league_count = n())
return(pbp)
return(roster)
return(ay)
return(cpoe)
return(summary)
return(colors_raw)
return(n_eval)
return(colors)
}
wr_ay_data(2019)
asp <- 1.2
plot <-
summary %>%
ggplot(aes(x = air_yards, y = ay)) +
geom_smooth(
data = mean, aes(x = air_yards, y = league, weight = league_count), n = n_eval,
color = "red", alpha = 0.7, se = FALSE, size = 0.5, linetype = "dashed"
) +
geom_smooth(
se = FALSE, alpha = 0.7, aes(weight = count), size = 0.65,
color = colors$team_color, n = n_eval
) +
geom_point(color = summary$team_color, size = summary$count / 15, alpha = 0.4) +
ggimage::geom_image(aes(x = 27.5, y = -20, image = team_logo_espn),
size = .15, by = "width", asp = asp
) +
ggimage::geom_image(aes(x = -2.5, y = -20, image = teamPlayers.headshot_url),
size = .15, by = "width", asp = asp
) +
xlim(-10, 40) + # makes sure the smoothing algorithm is evaluated between -10 and 40
coord_cartesian(xlim = c(-5, 30), ylim = c(-25, 25)) + # 'zoom in'
labs(
x = "Target Depth In Yards Thrown Beyond The Line Of Scrimmage (DOT)",
y = "Completion Percentage Over Expectation (CPOE in percentage points)",
caption = "Data: @nflfastR",
title = glue::glue("Passing Efficiency {season}"),
subtitle = "CPOE as a function of target depth. Dotsize equivalent to number of targets. Smoothed for -10 ≤ DOT ≤ 40 Yards. Red Line = League Average."
) +
theme_bw() +
theme(
axis.title = element_text(size = 10),
axis.text = element_text(size = 6),
plot.title = element_text(size = 12, hjust = 0.5, face = "bold"),
plot.subtitle = element_text(size = 10, hjust = 0.5),
plot.caption = element_text(size = 8),
legend.title = element_text(size = 8),
legend.text = element_text(size = 6),
strip.text = element_text(size = 6, hjust = 0.5, face = "bold"),
aspect.ratio = 1 / asp
) +
facet_wrap(vars(team.abbr), ncol = 6, scales = "free")
# save the plot
ggsave(glue::glue("plots/desktop/air_yard_wr_{season}.png"), dpi = 600, width = 24, height = 21, units = "cm")
# choose seasons for which the plot shall be generated
# CPOE starts in 2006
season <- 2019
asp <- 1.2
plot <-
summary %>%
ggplot(aes(x = air_yards, y = ay)) +
geom_smooth(
data = mean, aes(x = air_yards, y = league, weight = league_count), n = n_eval,
color = "red", alpha = 0.7, se = FALSE, size = 0.5, linetype = "dashed"
) +
geom_smooth(
se = FALSE, alpha = 0.7, aes(weight = count), size = 0.65,
color = colors$team_color, n = n_eval
) +
geom_point(color = summary$team_color, size = summary$count / 15, alpha = 0.4) +
ggimage::geom_image(aes(x = 27.5, y = -20, image = team_logo_espn),
size = .15, by = "width", asp = asp
) +
ggimage::geom_image(aes(x = -2.5, y = -20, image = teamPlayers.headshot_url),
size = .15, by = "width", asp = asp
) +
xlim(-10, 40) + # makes sure the smoothing algorithm is evaluated between -10 and 40
coord_cartesian(xlim = c(-5, 30), ylim = c(-25, 25)) + # 'zoom in'
labs(
x = "Target Depth In Yards Thrown Beyond The Line Of Scrimmage (DOT)",
y = "Completion Percentage Over Expectation (CPOE in percentage points)",
caption = "Data: @nflfastR",
title = glue::glue("Passing Efficiency {season}"),
subtitle = "CPOE as a function of target depth. Dotsize equivalent to number of targets. Smoothed for -10 ≤ DOT ≤ 40 Yards. Red Line = League Average."
) +
theme_bw() +
theme(
axis.title = element_text(size = 10),
axis.text = element_text(size = 6),
plot.title = element_text(size = 12, hjust = 0.5, face = "bold"),
plot.subtitle = element_text(size = 10, hjust = 0.5),
plot.caption = element_text(size = 8),
legend.title = element_text(size = 8),
legend.text = element_text(size = 6),
strip.text = element_text(size = 6, hjust = 0.5, face = "bold"),
aspect.ratio = 1 / asp
) +
facet_wrap(vars(team.abbr), ncol = 6, scales = "free")
# save the plot
ggsave(glue::glue("plots/desktop/air_yard_wr_{season}.png"), dpi = 600, width = 24, height = 21, units = "cm")
summary %>%
ggplot(aes(x = air_yards, y = ay)) +
geom_smooth(
data = mean, aes(x = air_yards, y = league, weight = league_count), n = n_eval,
color = "red", alpha = 0.7, se = FALSE, size = 0.5, linetype = "dashed"
) +
geom_smooth(
se = FALSE, alpha = 0.7, aes(weight = count), size = 0.65,
color = colors$team_color, n = n_eval
) +
geom_point(color = summary$team_color, size = summary$count / 15, alpha = 0.4) +
ggimage::geom_image(aes(x = 27.5, y = -20, image = team_logo_espn),
size = .15, by = "width", asp = asp
) +
ggimage::geom_image(aes(x = -2.5, y = -20, image = teamPlayers.headshot_url),
size = .15, by = "width", asp = asp
) +
xlim(-10, 40) + # makes sure the smoothing algorithm is evaluated between -10 and 40
coord_cartesian(xlim = c(-5, 30), ylim = c(-25, 25)) + # 'zoom in'
labs(
x = "Target Depth In Yards Thrown Beyond The Line Of Scrimmage (DOT)",
y = "Completion Percentage Over Expectation (CPOE in percentage points)",
caption = "Data: @nflfastR",
title = glue::glue("Passing Efficiency {season}"),
subtitle = "CPOE as a function of target depth. Dotsize equivalent to number of targets. Smoothed for -10 ≤ DOT ≤ 40 Yards. Red Line = League Average."
) +
theme_bw() +
theme(
axis.title = element_text(size = 10),
axis.text = element_text(size = 6),
plot.title = element_text(size = 12, hjust = 0.5, face = "bold"),
plot.subtitle = element_text(size = 10, hjust = 0.5),
plot.caption = element_text(size = 8),
legend.title = element_text(size = 8),
legend.text = element_text(size = 6),
strip.text = element_text(size = 6, hjust = 0.5, face = "bold"),
aspect.ratio = 1 / asp
) +
facet_wrap(vars(team.abbr), ncol = 6, scales = "free")
wr_ay_data(season)
summary <-
pbp %>%
filter(!is.na(receiver_player_id)) %>%
group_by(receiver_player_id) %>%
summarise(plays = n()) %>%
arrange(desc(plays)) %>%
head(30) %>%
left_join(
roster %>% filter(team.season == season) %>% select(name = teamPlayers.displayName, teamPlayers.gsisId, team.abbr, teamPlayers.headshot_url),
by = c("receiver_player_id" = "teamPlayers.gsisId")
) %>%
mutate(# some headshot urls are broken. They are checked here and set to a default
teamPlayers.headshot_url = dplyr::if_else(
RCurl::url.exists(as.character(teamPlayers.headshot_url)),
as.character(teamPlayers.headshot_url),
"http://static.nfl.com/static/content/public/image/fantasy/transparent/200x200/default.png",
)
) %>%
left_join(ay, by = "receiver_player_id") %>%
left_join(
teams_colors_logos %>% select(team_abbr, team_color, team_logo_espn),
by = c("team.abbr" = "team_abbr")
)
library(tidyverse)
library(nflfastR
)
wr_ay_data <- function(season) {
# load pbp for the choosen seasosn from nflfastR data repo
# can be multiple seasons as well
pbp <-
purrr::map_df(season, function(x) {
readRDS(url(glue::glue("https://raw.githubusercontent.com/guga31bb/nflfastR-data/master/data/play_by_play_{x}.rds")))
})
# load roster data from nflfastR data repo
roster <-
readRDS(url("https://raw.githubusercontent.com/guga31bb/nflfastR-data/master/roster-data/roster_1999_to_2019.rds"))
# compute cpoe grouped by air_yards
ay <- pbp %>%
filter(!is.na(receiver_player_id)) %>%
group_by(receiver_player_id, air_yards) %>%
summarise(count = n(), air_yards_mean = mean(air_yards))
# summarise cpoe using player ID (note that player ids are 'NA' for 'no_play' plays.
# Since we would filter those plays anyways we can use the id here)
# The correct name is being joined using the roster data
# first arranged by number of plays to filter the 30 QBs with most pass attempts
# The filter is set to 30 because we want to have 6 columns and 5 rows in the facet
summary <-
pbp %>%
filter(!is.na(receiver_player_id)) %>%
group_by(receiver_player_id) %>%
summarise(plays = n()) %>%
arrange(desc(plays)) %>%
head(30) %>%
left_join(
roster %>% filter(team.season == season) %>% select(name = teamPlayers.displayName, teamPlayers.gsisId, team.abbr, teamPlayers.headshot_url),
by = c("receiver_player_id" = "teamPlayers.gsisId")
) %>%
mutate(# some headshot urls are broken. They are checked here and set to a default
teamPlayers.headshot_url = dplyr::if_else(
RCurl::url.exists(as.character(teamPlayers.headshot_url)),
as.character(teamPlayers.headshot_url),
"http://static.nfl.com/static/content/public/image/fantasy/transparent/200x200/default.png",
)
) %>%
left_join(ay, by = "receiver_player_id") %>%
left_join(
teams_colors_logos %>% select(team_abbr, team_color, team_logo_espn),
by = c("team.abbr" = "team_abbr")
)
# create data frame used to add the logos
# arranged by name because name is used for the facet
colors_raw <-
summary %>%
group_by(receiver_player_id) %>%
summarise(team = first(team.abbr), name = first(name)) %>%
left_join(
teams_colors_logos %>% select(team_abbr, team_color),
by = c("team" = "team_abbr")
) %>%
arrange(name)
# the below used smooth algorithm uses the paramter n as the number
# of points at which to evaluate the smoother. When using color as aesthetics
# we need exactly the same number of colors (-> n times the same color per player)
n_eval <- 80
colors <-
as.data.frame(lapply(colors_raw, rep, n_eval)) %>%
arrange(name)
# mean data frame for the smoothed line of the whole league
mean <-
summary %>%
group_by(air_yards) %>%
summarise(league = mean(ay), league_count = n())
return(pbp)
return(roster)
return(ay)
return(cpoe)
return(summary)
return(colors_raw)
return(n_eval)
return(colors)
}
wr_ay_data(season)
summary <-
pbp %>%
filter(!is.na(receiver_player_id)) %>%
group_by(receiver_player_id) %>%
summarise(plays = n()) %>%
arrange(desc(plays)) %>%
head(30) %>%
left_join(
roster %>% filter(team.season == season) %>% select(name = teamPlayers.displayName, teamPlayers.gsisId, team.abbr, teamPlayers.headshot_url),
by = c("receiver_player_id" = "teamPlayers.gsisId")
) %>%
mutate(# some headshot urls are broken. They are checked here and set to a default
teamPlayers.headshot_url = dplyr::if_else(
RCurl::url.exists(as.character(teamPlayers.headshot_url)),
as.character(teamPlayers.headshot_url),
"http://static.nfl.com/static/content/public/image/fantasy/transparent/200x200/default.png",
)
) %>%
left_join(ay, by = "receiver_player_id") %>%
left_join(
teams_colors_logos %>% select(team_abbr, team_color, team_logo_espn),
by = c("team.abbr" = "team_abbr")
)
pbp <-
purrr::map_df(season, function(x) {
readRDS(url(glue::glue("https://raw.githubusercontent.com/guga31bb/nflfastR-data/master/data/play_by_play_{x}.rds")))
})
# load roster data from nflfastR data repo
roster <-
readRDS(url("https://raw.githubusercontent.com/guga31bb/nflfastR-data/master/roster-data/roster_1999_to_2019.rds"))
# compute cpoe grouped by air_yards
ay <- pbp %>%
filter(!is.na(receiver_player_id)) %>%
group_by(receiver_player_id, air_yards) %>%
summarise(count = n(), air_yards_mean = mean(air_yards))
# summarise cpoe using player ID (note that player ids are 'NA' for 'no_play' plays.
# Since we would filter those plays anyways we can use the id here)
# The correct name is being joined using the roster data
# first arranged by number of plays to filter the 30 QBs with most pass attempts
# The filter is set to 30 because we want to have 6 columns and 5 rows in the facet
summary <-
pbp %>%
filter(!is.na(receiver_player_id)) %>%
group_by(receiver_player_id) %>%
summarise(plays = n()) %>%
arrange(desc(plays)) %>%
head(30) %>%
left_join(
roster %>% filter(team.season == season) %>% select(name = teamPlayers.displayName, teamPlayers.gsisId, team.abbr, teamPlayers.headshot_url),
by = c("receiver_player_id" = "teamPlayers.gsisId")
) %>%
mutate(# some headshot urls are broken. They are checked here and set to a default
teamPlayers.headshot_url = dplyr::if_else(
RCurl::url.exists(as.character(teamPlayers.headshot_url)),
as.character(teamPlayers.headshot_url),
"http://static.nfl.com/static/content/public/image/fantasy/transparent/200x200/default.png",
)
) %>%
left_join(ay, by = "receiver_player_id") %>%
left_join(
teams_colors_logos %>% select(team_abbr, team_color, team_logo_espn),
by = c("team.abbr" = "team_abbr")
)
# create data frame used to add the logos
# arranged by name because name is used for the facet
colors_raw <-
summary %>%
group_by(receiver_player_id) %>%
summarise(team = first(team.abbr), name = first(name)) %>%
left_join(
teams_colors_logos %>% select(team_abbr, team_color),
by = c("team" = "team_abbr")
) %>%
arrange(name)
# the below used smooth algorithm uses the paramter n as the number
# of points at which to evaluate the smoother. When using color as aesthetics
# we need exactly the same number of colors (-> n times the same color per player)
n_eval <- 80
colors <-
as.data.frame(lapply(colors_raw, rep, n_eval)) %>%
arrange(name)
# mean data frame for the smoothed line of the whole league
mean <-
summary %>%
group_by(air_yards) %>%
summarise(league = mean(ay), league_count = n())
View(summary)
