geom_hline(yintercept = mean(chart_all$off_epa), color = "red", linetype = "dashed") +
geom_vline(xintercept =  mean(chart_all$def_epa), color = "red", linetype = "dashed") +
labs(x = "Offense EPA/play",
y = "Defense EPA/play",
caption = "Figure: @benbbaldwin | Data: @nflscrapR",
title = paste(year, "NFL team tiers")) +
geom_abline(slope=slope, intercept=.4, alpha=.2) +
geom_abline(slope=slope, intercept=.3, alpha=.2) +
geom_abline(slope=slope, intercept=0, alpha=.2) +
geom_abline(slope=slope, intercept=.1, alpha=.2) +
geom_abline(slope=slope, intercept=.2, alpha=.2) +
geom_abline(slope=slope, intercept=-.1, alpha=.2) +
geom_abline(slope=slope, intercept=-.2, alpha=.2) +
geom_abline(slope=slope, intercept=-.3, alpha=.2) +
theme_cw()+
scale_y_reverse() +
theme(
legend.position = c(0.99, 0.99),
legend.justification = c(1, 1) ,
plot.title = element_text(size = 16, hjust = 0.5),
#panel.grid.minor = element_blank()
)
source('plots/assets/plot_theme.R')
chart_all %>%
ggplot(aes(x = off_epa, y = def_epa)) +
geom_image(aes(image = team_logo_espn), size = 0.05, asp = 16/9) +
geom_hline(yintercept = mean(chart_all$off_epa), color = "red", linetype = "dashed") +
geom_vline(xintercept =  mean(chart_all$def_epa), color = "red", linetype = "dashed") +
labs(x = "Offense EPA/play",
y = "Defense EPA/play",
caption = "Figure: @benbbaldwin | Data: @nflscrapR",
title = paste(year, "NFL team tiers")) +
geom_abline(slope=slope, intercept=.4, alpha=.2) +
geom_abline(slope=slope, intercept=.3, alpha=.2) +
geom_abline(slope=slope, intercept=0, alpha=.2) +
geom_abline(slope=slope, intercept=.1, alpha=.2) +
geom_abline(slope=slope, intercept=.2, alpha=.2) +
geom_abline(slope=slope, intercept=-.1, alpha=.2) +
geom_abline(slope=slope, intercept=-.2, alpha=.2) +
geom_abline(slope=slope, intercept=-.3, alpha=.2) +
scale_y_reverse() +
theme_cw() +
theme(
legend.position = c(0.99, 0.99),
legend.justification = c(1, 1) ,
plot.title = element_text(size = 16, hjust = 0.5),
#panel.grid.minor = element_blank()
)
chart_all %>%
ggplot(aes(x = off_epa, y = def_epa)) +
geom_image(aes(image = team_logo_espn), size = 0.05, asp = 16/9) +
geom_hline(yintercept = mean(chart_all$off_epa), color = "red", linetype = "dashed") +
geom_vline(xintercept =  mean(chart_all$def_epa), color = "red", linetype = "dashed") +
labs(x = "Offense EPA/play",
y = "Defense EPA/play",
caption = "Figure: @benbbaldwin | Data: @nflscrapR",
title = paste(year, "NFL team tiers")) +
geom_abline(slope=slope, intercept=.4, alpha=.2) +
geom_abline(slope=slope, intercept=.3, alpha=.2) +
geom_abline(slope=slope, intercept=0, alpha=.2) +
geom_abline(slope=slope, intercept=.1, alpha=.2) +
geom_abline(slope=slope, intercept=.2, alpha=.2) +
geom_abline(slope=slope, intercept=-.1, alpha=.2) +
geom_abline(slope=slope, intercept=-.2, alpha=.2) +
geom_abline(slope=slope, intercept=-.3, alpha=.2) +
scale_y_reverse() +
theme_cw +
theme(
legend.position = c(0.99, 0.99),
legend.justification = c(1, 1) ,
plot.title = element_text(size = 16, hjust = 0.5),
#panel.grid.minor = element_blank()
)
chart_all %>%
ggplot(aes(x = off_epa, y = def_epa)) +
geom_image(aes(image = team_logo_espn), size = 0.05, asp = 16/9) +
geom_hline(yintercept = mean(chart_all$off_epa), color = "red", linetype = "dashed") +
geom_vline(xintercept =  mean(chart_all$def_epa), color = "red", linetype = "dashed") +
labs(x = "Offense EPA/play",
y = "Defense EPA/play",
caption = "Figure: @benbbaldwin | Data: @nflscrapR",
title = paste(year, "NFL team tiers")) +
geom_abline(slope=slope, intercept=.4, alpha=.2) +
geom_abline(slope=slope, intercept=.3, alpha=.2) +
geom_abline(slope=slope, intercept=0, alpha=.2) +
geom_abline(slope=slope, intercept=.1, alpha=.2) +
geom_abline(slope=slope, intercept=.2, alpha=.2) +
geom_abline(slope=slope, intercept=-.1, alpha=.2) +
geom_abline(slope=slope, intercept=-.2, alpha=.2) +
geom_abline(slope=slope, intercept=-.3, alpha=.2) +
scale_y_reverse() +
theme_cw +
theme(
axis.title.y = element_text(angle = 90),
legend.position = c(0.99, 0.99),
legend.justification = c(1, 1) ,
plot.title = element_text(size = 16, hjust = 0.5),
#panel.grid.minor = element_blank()
)
brand_plot(p, asp = 1, save_name = 'plots/desktop/high low dakota.png', data_home = 'EPA+CPOE courtesy of @benbbaldwin | Data: @nflfastR', fade_borders = 'tr')
p <- ggsave(filename = "team_tiers.png", path = "plots/desktop/", device = "png")
p <- chart_all %>%
ggplot(aes(x = off_epa, y = def_epa)) +
geom_image(aes(image = team_logo_espn), size = 0.05, asp = 16/9) +
geom_hline(yintercept = mean(chart_all$off_epa), color = "red", linetype = "dashed") +
geom_vline(xintercept =  mean(chart_all$def_epa), color = "red", linetype = "dashed") +
labs(x = "Offense EPA/play",
y = "Defense EPA/play",
caption = "Figure: @benbbaldwin | Data: @nflscrapR",
title = paste(year, "NFL team tiers")) +
geom_abline(slope=slope, intercept=.4, alpha=.2) +
geom_abline(slope=slope, intercept=.3, alpha=.2) +
geom_abline(slope=slope, intercept=0, alpha=.2) +
geom_abline(slope=slope, intercept=.1, alpha=.2) +
geom_abline(slope=slope, intercept=.2, alpha=.2) +
geom_abline(slope=slope, intercept=-.1, alpha=.2) +
geom_abline(slope=slope, intercept=-.2, alpha=.2) +
geom_abline(slope=slope, intercept=-.3, alpha=.2) +
scale_y_reverse() +
theme_cw +
theme(
axis.title.y = element_text(angle = 90),
legend.position = c(0.99, 0.99),
legend.justification = c(1, 1) ,
plot.title = element_text(size = 16, hjust = 0.5),
#panel.grid.minor = element_blank()
)
p <- ggsave(filename = "team_tiers.png", path = "plots/desktop/", device = "png")
p <- chart_all %>%
ggplot(aes(x = off_epa, y = def_epa)) +
geom_image(aes(image = team_logo_espn), size = 0.05, asp = 16/9) +
geom_hline(yintercept = mean(chart_all$off_epa), color = "red", linetype = "dashed") +
geom_vline(xintercept =  mean(chart_all$def_epa), color = "red", linetype = "dashed") +
labs(x = "Offense EPA/play",
y = "Defense EPA/play",
caption = "Data: @nflscrapR",
title = paste(year, "NFL team tiers")) +
geom_abline(slope=slope, intercept=.4, alpha=.2) +
geom_abline(slope=slope, intercept=.3, alpha=.2) +
geom_abline(slope=slope, intercept=0, alpha=.2) +
geom_abline(slope=slope, intercept=.1, alpha=.2) +
geom_abline(slope=slope, intercept=.2, alpha=.2) +
geom_abline(slope=slope, intercept=-.1, alpha=.2) +
geom_abline(slope=slope, intercept=-.2, alpha=.2) +
geom_abline(slope=slope, intercept=-.3, alpha=.2) +
scale_y_reverse() +
theme_cw +
theme(
axis.title.y = element_text(angle = 90),
legend.position = c(0.99, 0.99),
legend.justification = c(1, 1) ,
plot.title = element_text(size = 16, hjust = 0.5),
#panel.grid.minor = element_blank()
)
p <- ggsave(filename = "team_tiers.png", path = "plots/desktop/", device = "png")
library(zoo)
library(viridis)
source('plots/assets/plot_theme.R')
load(url('https://github.com/guga31bb/metrics/blob/master/dakota_model.rda?raw=true'))
roster_df <- readRDS(url('https://github.com/guga31bb/nflfastR-data/blob/master/roster-data/roster.rds?raw=true')) %>%
left_join(readRDS(url('https://github.com/ajreinhard/NFL/blob/master/nflfastR%20ID%20mapping/gsis_map.rds?raw=true')), by = c('teamPlayers.gsisId' = 'gsis')) %>%
mutate(ID = ifelse(is.na(ID), teamPlayers.gsisId, ID))
roster_df <-
readRDS(url('https://github.com/guga31bb/nflfastR-data/blob/master/roster-data/roster.rds?raw=true')
) %>%
decode_player_ids(fast = T)
pbp_df <- do.call(rbind, lapply(2006:2020, function(yr) {
readRDS(url(glue('https://github.com/guga31bb/nflfastR-data/blob/master/data/play_by_play_{yr}.rds?raw=true')))
})) %>% decode_player_ids(fast = T)
all_qb_id <- pbp_df %>%
pull(passer_id) %>% table %>%
.[which(. >= 50)] %>%
names
qb_2020_id <- pbp_df %>%
filter(season==2020) %>%
pull(passer_id) %>%
table %>%
.[which(. >= 3)] %>%
names
qb_top_bottom <- pbp_df %>%
mutate(qb_id = ifelse(is.na(passer_id), rusher_id, passer_id)) %>%
filter(qb_id %in% all_qb_id) %>%
group_by(qb_id) %>%
rename(play_cpoe = cpoe) %>%
mutate(
play_num = row_number(),
week_desc = paste0(season, ' Week ', week),
qb_epa_cap = ifelse(qb_epa <= -4.5, -4.5, qb_epa),
epa_per_play = rollapply(qb_epa_cap, 200, mean, align='right', fill=NA, na.rm = T),
cpoe = rollapply(play_cpoe, 200, mean, align='right', fill=NA, na.rm = T),
gm_list = rollapply(game_id, 200, function(x) paste(rev(unique(x)),collapse = '\n'), align='right', fill=NA),
end_game = ifelse(game_id != lead(game_id) | is.na(lead(game_id)), 1, 0),
game_num = cumsum(end_game),
last_throw = ifelse(play_num == max(play_num), 1, NA)
) %>%
ungroup %>%
mutate(dakota = mgcv::predict.gam(dakota_model, .)) %>%
group_by(qb_id) %>%
summarise(
car_plays = n(),
curr_dakota = max(last_throw * dakota, na.rm = T),
high_dakota = max(dakota, na.rm = T),
low_dakota = min(dakota, na.rm = T),
epa_per_play =  mean(epa_per_play, na.rm = T),
cpoe = mean(cpoe, na.rm = T)
) %>%
mutate(car_dakota = mgcv::predict.gam(dakota_model, .))
p <- qb_top_bottom %>%
left_join(roster_df %>% filter(team.season==2019), by = c('qb_id' = 'teamPlayers.gsisId')) %>%
filter(!is.na(team.season) & car_plays>=200 & qb_id %in% qb_2020_id) %>%
arrange(-car_dakota) %>%
mutate(rank = row_number()) %>%
ggplot(aes(x = curr_dakota, xend = high_dakota, y = rank, yend = rank)) +
geom_segment(aes(x = low_dakota), color = color_cw[5], size = 0.7) +
geom_point(aes(x = car_dakota), color = color_cw[5], shape = 8) +
geom_point(aes(fill = curr_dakota), size = 3, color = color_cw[2], shape = 21, stroke = 0.7) +
geom_shadowtext(aes(x = low_dakota - 0.005, label = teamPlayers.displayName), hjust = 1, color = color_cw[5], bg.color = color_cw[2], size = 2.2, bg.r = 0.2) +
scale_y_reverse(expand = expansion(mult = c(0.02, 0.04))) +
scale_x_continuous(limits = c(-0.15,0.4), expand = expansion(mult = 0)) +
scale_fill_viridis(option = "A") +
labs(title = 'Range of Best & Worst EPA+CPOE Composite Index' ,
subtitle = 'Rolling 200 play average | Star = Career Index, Dot = Last 200 Plays\nMin. 200 QB plays',
fill = "Index score",
x = 'EPA+CPOE Composite Index',
y = NULL) +
theme_cw +
theme(
axis.ticks.y = element_blank(),
axis.text.y = element_blank(),
panel.grid.major.y = element_blank(),
legend.position = c(.85, .22)
)
p
brand_plot(p, asp = 1, save_name = 'plots/desktop/high low dakota.png', data_home = 'EPA+CPOE courtesy of @benbbaldwin | Data: @nflfastR', fade_borders = 'tr')
devtools::install_github("mrcaseb/nflfastR")
# devtools::install_github("mrcaseb/nflfastR")
# devtools::install_github("dynastyprocess/ffscrapr")
# devtools::install_github("jthomasmock/espnscrapeR")
proj_name <- "football"
pkgs <- c(
"devtools",
"tidyverse",
"nflfastR",
"gsisdecoder",
"espnscrapeR",
"DBI",
"odbc",
"RMariaDB",
"distill",
"httr",
"readr",
"pander",
"furrr",
"na.tools",
"ggimage",
"teamcolors",
"glue",
"dplyr",
"jsonlite",
"RJSONIO",
"tictoc",
"animation",
"gt",
"reactable",
"png",
"DT",
"ggthemes",
"ggforce",
"ggridges",
"ggrepel",
"ggpmisc",
"ggbeeswarm",
"cowplot",
"gridExtra",
"grid",
"extrafont",
"shadowtext",
"tidytext",
"RCurl"
)
installed_packages <- pkgs %in%
rownames(installed.packages())
if (any(installed_packages == FALSE)) {
install.packages(pkgs[!installed_packages])
}
lapply(pkgs, library, character.only = TRUE)
# library("nflscrapR") # doesn't work anymore
library("nflfastR")
# library("ffscrapr")
# Detach all packages
# lapply(paste0('package:', names(sessionInfo()$otherPkgs)), detach, character.only=TRUE, unload=TRUE)
rm(pkgs, installed_packages)
source("../initR/init.R")
fx.setdir(proj_name)
# Create standard objects -------------------------------------------------
# Connect to DB
source("../initR/con.R")
dbListTables(con)
dbDisconnect(con)
# Fantasy variables -------------------------------------------------------
# Create variables --------------------------------------------------------
# ESPN Fantasy Football
swid  <-  "{2BA315B4-5941-4B1C-A315-B459416B1CC1}"
espn_s2 <- "AEBtGuDXUCKk6SpqlY71qdBDW%2BYc5KGa80m%2F0EVX9NCF%2FIFBM5b8ZMKgrMovpUeUqFTp4M%2BrPbM1I4rT1Ra2oXbM847nUp25DBY9Q%2FsAPChAykF5VNEZ05VjF6Vu3thAU0WkzQeBbjkdzNGqfbmPtMNzrBy8oV7fcAlwh4X89q4XlfPNED8ppKynNj5admyBk7WaqNzQtZJLlStpyOjz3F3d5BwUtQ8kh390OPB5HEEPfiH4%2FBftKqsLF%2BlyhTFaDiM%3D"
kona_v3_environment <- '{"leagueId":1034400,"seasonId":null}'
kona_v3_teamcontrol <- '{"leagueId":1034400,"seasonId":2020,"teamId":8}'
ff_fantasy_key <- "fantasy_football/data/fantasy_key.rds"
# league_id <- c("1034400", "62746259", "39973580")
# team_id <- c("8", "9", "10")
# league_name <- c("Colin's Minions", "Drinker's Slushy Beer", "Family League 3.0")
# team_name <- c("Rhule Tide", "Golden Rhule", "Matt Rhules")
# fantasy_key <- data.frame(league_id, league_name, team_id, team_name)
# fantasy_key %>% write_rds(ff_fantasy_key)
cookies = c(`SWID` = swid,
`espn_s2` = espn_s2)
# 'kona_v3_environment_season_ffl' = kona_v3_environment,
# 'kona_v3_teamcontrol_ffl' = kona_v3_teamcontrol)
cookie <- paste(names(cookies), cookies, sep = "=", collapse = ";")
# fantasy_key <- ff_fantasy_key %>% read_csv()
fantasy_key <- ff_fantasy_key %>% readRDS()
base = "https://fantasy.espn.com/apis/v3/games/ffl/seasons/"
year = Sys.Date() %>% format(format = "%Y")
mid = "/segments/0/leagues/"
leagueID <- fantasy_key$league_id[3]
tail = "?view=mDraftDetail&view=mLiveScoring&view=mMatchupScore&view=mPendingTransactions&view=mPositionalRatings&view=mSettings&view=mTeam&view=modular&view=mNav&view=mMatchupScore"
player_tail = "?view=kona_player_info"
wl_tail = "?view=proTeamSchedules_wl"
user_agent = "Mozilla/5.0 (Macintosh; Intel Mac OS X 10.14; rv:79.0) Gecko/20100101 Firefox/79.0"
pbp_df <- readRDS(url(glue('https://github.com/guga31bb/nflfastR-data/blob/master/data/play_by_play_{year}.rds?raw=true')))
pbp_df <- decode_player_ids(pbp_df, fast = T)
library(tidyverse)
library(espnscrapeR)
library(nflfastR)
library(teamcolors)
library(gt)
library(webshot)
all_win_rate <- scrape_espn_win_rate()
wide_win_rate <- all_win_rate %>%
pivot_wider(names_from = stat,
values_from = win_pct,
id_col = team) %>%
purrr::set_names(nm = c("team", "prwr", "rswr", "pbwr", "rbwr")) %>%
mutate(prwr_rk = min_rank(desc(prwr)), .before = prwr) %>%
mutate(rswr_rk = min_rank(desc(rswr)), .before = rswr) %>%
mutate(pbwr_rk = min_rank(desc(pbwr)), .before = pbwr) %>%
mutate(rbwr_rk = min_rank(desc(rbwr)), .before = rbwr) %>%
mutate(def_wr_comp_rk = (prwr_rk + rswr_rk) / 2) %>%
mutate(off_wr_comp_rk = (rbwr_rk + pbwr_rk) / 2) %>%
left_join(teams_colors_logos %>%
select(team_abbr, team_name),
by = c("team" = "team_name"))
wide_win_rate <-
wide_win_rate %>%
select(team_abbr, team, prwr_rk, prwr, rswr_rk, rswr, def_wr_comp_rk, pbwr_rk, pbwr, rbwr_rk, rbwr, off_wr_comp_rk)
View(wide_win_rate)
all_win_rate %>%
pivot_wider(names_from = stat,
values_from = win_pct,
id_col = team) %>%
purrr::set_names(nm = c("team", "prwr", "rswr", "pbwr", "rbwr")) %>%
mutate(prwr_rk = min_rank(desc(prwr)), .before = prwr) %>%
mutate(rswr_rk = min_rank(desc(rswr)), .before = rswr) %>%
mutate(pbwr_rk = min_rank(desc(pbwr)), .before = pbwr) %>%
mutate(rbwr_rk = min_rank(desc(rbwr)), .before = rbwr) %>%
mutate(def_wr_comp_rk = (prwr_rk + rswr_rk) / 2) %>%
mutate(off_wr_comp_rk = (rbwr_rk + pbwr_rk) / 2) %>%
left_join(teams_colors_logos %>%
select(team_abbr, team_name),
by = c("team" = "team_name"))
all_win_rate
teams_colors_logos
teams_colors_logos$team_abbr
wide_win_rate <- all_win_rate %>%
pivot_wider(names_from = stat,
values_from = win_pct,
id_col = team) %>%
purrr::set_names(nm = c("team", "prwr", "rswr", "pbwr", "rbwr")) %>%
mutate(prwr_rk = min_rank(desc(prwr)), .before = prwr) %>%
mutate(rswr_rk = min_rank(desc(rswr)), .before = rswr) %>%
mutate(pbwr_rk = min_rank(desc(pbwr)), .before = pbwr) %>%
mutate(rbwr_rk = min_rank(desc(rbwr)), .before = rbwr) %>%
mutate(def_wr_comp_rk = (prwr_rk + rswr_rk) / 2) %>%
mutate(off_wr_comp_rk = (rbwr_rk + pbwr_rk) / 2) %>%
left_join(teams_colors_logos %>% filter(team_abbr != "LAR") %>%
select(team_abbr, team_name),
by = c("team" = "team_name"))
wide_win_rate <-
wide_win_rate %>%
select(team_abbr, team, prwr_rk, prwr, rswr_rk, rswr, def_wr_comp_rk, pbwr_rk, pbwr, rbwr_rk, rbwr, off_wr_comp_rk)
wide_win_rate %>%
summarize(across(!contains("rk"), mean)) %>%
mutate(team = "NFL")
gt_tab <- wide_win_rate %>%
arrange(def_wr_comp_rk) %>%
gt(rowname_col = "team") %>%
grand_summary_rows(
columns = c(4,6,9,11),
fns = list(`NFL AVERAGE` = ~mean(.)),
formatter = fmt_percent,
decimals = 0
) %>%
data_color(
columns = contains("rk"),
colors = scales::col_numeric(
# palette = c("#7fbf7b", "#f7f7f7", "#af8dc3")
palette = c("#ff7f00", "#f7f7f7"),
domain = c(1, 32)
)
) %>%
text_transform(
locations = cells_body(vars(team_abbr)),
fn = function(x) web_image(url = paste0('https://a.espncdn.com/i/teamlogos/nfl/500/',x,'.png'))
) %>%
cols_label(
team_abbr = "",
prwr_rk = "RK",
prwr = "Pass Rush",
pbwr_rk = "RK",
pbwr = "Pass Block",
rswr_rk = "RK",
rswr = "Run Stop",
rbwr_rk = "RK",
rbwr = "Run Block",
off_wr_comp_rk = "Off. Composite RK",
def_wr_comp_rk = "Def. Composite RK"
) %>%
opt_all_caps() %>%
cols_width(
vars(team) ~ px(225),
columns = contains("r_rk") ~ px(50),
columns = contains("comp") ~ px(130),
everything() ~ px(100)
) %>%
tab_style(
style = cell_borders(
sides = "left",
color = "darkblue",
weight = px(3)
),
locations = list(
cells_body(
columns = c(3,5,7,8,9,11,12)
),
cells_grand_summary(
columns = 3
)
)
) %>%
tab_style(
style = cell_text(
weight = "bold",
color = "dimgray"
),
locations = cells_body(
vars(team_abbr, team)
)
) %>%
tab_spanner(
label = "DEFENSE",
columns = 3:7
) %>%
tab_spanner(
label = "OFFENSE",
columns = 8:12
) %>%
tab_source_note(
source_note = md("**Data:** ESPN")
) %>%
fmt_percent(columns = c(4, 6, 9, 11), decimals = 0) %>%
cols_align(align = "center", columns = 2:ncol(wide_win_rate)) %>%
cols_align(align = "left", columns = c(1,2)) %>%
tab_header(
title = "2020 NFL pass-rushing, run-stopping, blocking leaderboard: Win rate rankings",
subtitle = "Data through week 3"
) %>%
tab_style(
style = cell_borders(
sides = "bottom",
color = "darkblue",
weight = px(3)
),
locations = list(
cells_body(
rows = nrow(.$`_data`)
)
)
) %>%
tab_options(
table.font.color = 'darkblue',
heading.align = "left",
table.border.bottom.color = "transparent",
table.border.bottom.width = px(3),
table.border.top.color = "transparent",
table.border.top.width = px(3),
column_labels.border.bottom.color = "darkblue",
column_labels.border.bottom.width = px(3),
heading.title.font.size = px(30),
heading.title.font.weight = "bold",
heading.subtitle.font.size = px(20),
heading.border.bottom.color = "transparent",
heading.border.bottom.width = px(3),
table_body.hlines.color = "#ededed",
grand_summary_row.border.color = "darkblue",
grand_summary_row.border.width = px(3)
) %>%
opt_table_font(font = google_font(name = "Chivo"))
gt::gtsave(gt_tab, filename = "espn_winrate.png", path = "plots/desktop/")
gt::gtsave(gt_tab, filename = "espn_winrate.png", path = "plots/desktop/", expand = 10)
gt::gtsave(gt_tab, filename = "espn_winrate.png", path = "plots/desktop/", expand = 20)
gt::gtsave(gt_tab, filename = "espn_winrate.png", path = "plots/desktop/", expand = 40)
gt::gtsave(gt_tab, filename = "espn_winrate.png", path = "plots/desktop/", zoom = 1)
View(wide_win_rate)
