print(paste("X =", x))
xpbp <- game_play_by_play(x)
addTargets(x)
}
}
}
xplayers
date <- format(today, format="%Y%m%d")
userYear <- 2019 ##necessary for saved
userWeek <- 17 ##not necessary at the moment
seasonState <- "post"
fgame_ids <- paste("data/games/", seasonState, "_season/", seasonState, "_games_", userYear, ".csv", sep ="")
fteamabbr <- paste("data/season_total/team_abbr.csv", sep = "")
teams <- read.csv(fteamabbr)
game_ids <- read.csv(fgame_ids)
game_ids <- scrape_game_ids(userYear, type = seasonState)
write.csv(game_ids, fgame_ids)
source("functions/scrapePBP.R")
source("functions/addTargets.R")
scrapePBP(date)
View(x.pbp)
game_ids
epa_play <- pbpSeason %>%
filter(pass == 1) %>%
group_by(posteam) %>%
summarize(
n = n(),
epa_per_db = sum(epa, na.rm = TRUE) / n,
success_rate = sum(epa) / n
)
# clean up the data for further analysis
pbp_rp <- pbpSeason %>%
# grab only penalties, pass, and run plays
filter(!is.na(epa), play_type == "no_play" | play_type == "pass" | play_type == "run") %>%
# create pass, rush and success columns
mutate(
pass = if_else(str_detect(desc, "(pass)|(sacked)|(scramble)"), 1, 0),
rush = if_else(str_detect(desc, "(left end)|(left tackle)|(left guard)|(up the middle)|(right guard)|(right tackle)|(right end)") & pass == 0, 1, 0),
success = ifelse(epa > 0, 1, 0)
) %>%
# filter to only pass or rush plays
filter(pass == 1 | rush == 1) %>%
mutate(
passer_player_name = ifelse(play_type == "no_play" & pass == 1,
str_extract(desc, "(?<=\\s)[A-Z][a-z]*\\.\\s?[A-Z][A-z]+(\\s(I{2,3})|(IV))?(?=\\s((pass)|(sack)|(scramble)))"),
passer_player_name
),
receiver_player_name = ifelse(play_type == "no_play" & str_detect(desc, "pass"),
str_extract(
desc,
"(?<=to\\s)[A-Z][a-z]*\\.\\s?[A-Z][A-z]+(\\s(I{2,3})|(IV))?"
),
receiver_player_name
),
rusher_player_name = ifelse(play_type == "no_play" & rush == 1,
str_extract(desc, "(?<=\\s)[A-Z][a-z]*\\.\\s?[A-Z][A-z]+(\\s(I{2,3})|(IV))?(?=\\s((left end)|(left tackle)|(left guard)|      (up the middle)|(right guard)|(right tackle)|(right end)))"),
rusher_player_name
)
) %>%
mutate(
name = if_else(!is.na(passer_player_name), passer_player_name, rusher_player_name),
rusher = rusher_player_name,
receiver = receiver_player_name,
play = 1
)
epa_play <- pbp_rp %>%
filter(pass == 1) %>%
group_by(posteam) %>%
summarize(
n = n(),
epa_per_db = sum(epa, na.rm = TRUE) / n,
success_rate = sum(epa) / n
)
schotty <- pbp_rp %>%
filter(wp > .20 & wp < .80 & down <= 2 & qtr <= 2 & half_seconds_remaining > 120) %>%
group_by(posteam) %>%
summarize(mean_pass = mean(pass),
plays = n()) %>%
arrange(mean_pass)
schotty
pkgs <- c("devtools", "tidyverse", "readr",
"pander", "na.tools", "ggimage",
"devtools", "teamcolors", "glue",
"animate", "dplyr", "tictoc",
"animation", "gt", "DT",
"ggthemes", "bbplot", "ggtext",
"ggforce", "ggridges", "ggrepel",
"ggbeeswarm", "extrafont")
install.packages(pkgs)
install.packages(pkgs)
library(nflscrapR)
library(tidyverse)
library(readr)
library(pander)
library(dplyr)
library(na.tools)
library(ggimage)
library(teamcolors) # NFL team colors and logos
library(plyr)
library(readr)
library(glue)
##library(animate)
library(animation)
library(tictoc)
library(gt) # beautiful tables
library(DT) # beautiful interactive tables
library(ggthemes) # custom pre-built themes
library(bbplot) # more themes
library(ggtext) # custom text color
library(ggforce) # better annotations
library(ggridges) # many distributions at once
library(ggrepel) # better labels
library(ggbeeswarm) # beeswarm plots
library(extrafont) # for extra fonts
schotty <- pbp_rp %>%
filter(wp > .20 & wp < .80 & down <= 2 & qtr <= 2 & half_seconds_remaining > 120) %>%
group_by(posteam) %>%
summarize(mean_pass = mean(pass),
plays = n()) %>%
arrange(mean_pass)
schotty
pbp_rp %>%
mutate(
stick_throw = case_when(
air_yards < ydstogo ~ "Short of Sticks",
air_yards == ydstogo ~ "At Stick",
air_yards > ydstogo ~ "Past Stick",
TRUE ~ NA_character_
)
) %>%
select(air_yards, ydstogo, stick_throw) %>%
filter(!is.na(air_yards))
pbp_rp <- pbpSeason %>%
# grab only penalties, pass, and run plays
filter(!is.na(epa), play_type == "no_play" | play_type == "pass" | play_type == "run") %>%
# create pass, rush and success columns
mutate(
pass = if_else(str_detect(desc, "(pass)|(sacked)|(scramble)"), 1, 0),
rush = if_else(str_detect(desc, "(left end)|(left tackle)|(left guard)|(up the middle)|(right guard)|(right tackle)|(right end)") & pass == 0, 1, 0),
success = ifelse(epa > 0, 1, 0)
) %>%
# filter to only pass or rush plays
filter(pass == 1 | rush == 1) %>%
mutate(
passer_player_name = ifelse(play_type == "no_play" & pass == 1,
str_extract(desc, "(?<=\\s)[A-Z][a-z]*\\.\\s?[A-Z][A-z]+(\\s(I{2,3})|(IV))?(?=\\s((pass)|(sack)|(scramble)))"),
passer_player_name
),
receiver_player_name = ifelse(play_type == "no_play" & str_detect(desc, "pass"),
str_extract(
desc,
"(?<=to\\s)[A-Z][a-z]*\\.\\s?[A-Z][A-z]+(\\s(I{2,3})|(IV))?"
),
receiver_player_name
),
rusher_player_name = ifelse(play_type == "no_play" & rush == 1,
str_extract(desc, "(?<=\\s)[A-Z][a-z]*\\.\\s?[A-Z][A-z]+(\\s(I{2,3})|(IV))?(?=\\s((left end)|(left tackle)|(left guard)|      (up the middle)|(right guard)|(right tackle)|(right end)))"),
rusher_player_name
)
) %>%
mutate(
name = if_else(!is.na(passer_player_name), passer_player_name, rusher_player_name),
rusher = rusher_player_name,
receiver = receiver_player_name,
play = 1
)
View(pbp_rp)
schotty <- pbp_rp %>%
filter(wp > .20 & wp < .80 & down <= 2 & qtr <= 2 & half_seconds_remaining > 120) %>%
group_by(posteam) %>%
summarize(mean_pass = mean(pass),
plays = n()) %>%
arrange(mean_pass)
rlang::last_error()
conflicts()
schotty <- pbp_rp %>%
filter(wp > .20 & wp < .80 & down <= 2 & qtr <= 2 & half_seconds_remaining > 120) %>%
group_by(posteam) %>%
summarize(mean_pass = mean(pass),
plays = dplyr::n()) %>%
arrange(mean_pass)
rlang::last_error()
rlang::last_trace()
schotty <- pbp_rp %>%
filter(wp > .20 & wp < .80 & down <= 2 & qtr <= 2 & half_seconds_remaining > 120) %>%
group_by(posteam) %>%
summarize(mean_pass = mean(pass),
plays = dplyr::summarise(count = n()) %>%
arrange(mean_pass)
}
schotty <- pbp_rp %>%
filter(wp > .20 & wp < .80 & down <= 2 & qtr <= 2 & half_seconds_remaining > 120) %>%
group_by(posteam) %>%
summarize(mean_pass = mean(pass),
plays = dplyr::summarise(count = n())) %>%
arrange(mean_pass)
schotty <- pbp_rp %>%
filter(wp > .20 & wp < .80 & down <= 2 & qtr <= 2 & half_seconds_remaining > 120) %>%
group_by(posteam) %>%
summarise(mean_pass = mean(pass),
plays = dplyr::summarise(count = n())) %>%
arrange(mean_pass)
schotty <- pbp_rp %>%
filter(wp > .20 & wp < .80 & down <= 2 & qtr <= 2 & half_seconds_remaining > 120) %>%
group_by(posteam) %>%
summarise(mean_pass = mean(pass),
plays = n()) %>%
arrange(mean_pass)
detach(pkgs)
detach("package:animation", unload = TRUE)
detach("package:bitops", unload = TRUE)
detach(deatach: pkgs)
detach(package:readr)
detach(package:pander)
detach(package:na.tols)
detach(package:na.tools)
detach(package:plyr)
library(nflscrapR)
library(tidyverse)
library(readr)
library(pander)
library(dplyr)
library(na.tools)
library(ggimage)
library(teamcolors) # NFL team colors and logos
library(plyr)
library(readr)
library(glue)
##library(animate)
library(animation)
library(tictoc)
library(gt) # beautiful tables
library(DT) # beautiful interactive tables
library(ggthemes) # custom pre-built themes
library(bbplot) # more themes
library(ggtext) # custom text color
library(ggforce) # better annotations
library(ggridges) # many distributions at once
library(ggrepel) # better labels
library(ggbeeswarm) # beeswarm plots
library(extrafont) # for extra fonts
detach(package:plyr)
schotty <- pbp_rp %>%
filter(wp > .20 & wp < .80 & down <= 2 & qtr <= 2 & half_seconds_remaining > 120) %>%
group_by(posteam) %>%
summarise(mean_pass = mean(pass),
plays = n()) %>%
arrange(mean_pass)
View(schotty)
View(pbp_rp)
schotty <- pbp_rp %>%
filter(wp > .20 & wp < .80 & down <= 2 & qtr <= 2 & half_seconds_remaining > 120 & posteam != APR | NPR) %>%
group_by(posteam) %>%
summarise(mean_pass = mean(pass),
plays = n()) %>%
arrange(mean_pass)
View(schotty)
filter(wp > .20 & wp < .80 & down <= 2 & qtr <= 2 & half_seconds_remaining > 120 & posteam !== APR | NPR) %>%
schotty <- pbp_rp %>%
filter(wp > .20 & wp < .80 & down <= 2 & qtr <= 2 & half_seconds_remaining > 120 & posteam != "APR" | "NPR") %>%
group_by(posteam) %>%
summarise(mean_pass = mean(pass),
plays = n()) %>%
arrange(mean_pass)
schotty <- pbp_rp %>%
filter(wp > .20 & wp < .80 & down <= 2 & qtr <= 2 & half_seconds_remaining > 120) %>%
filter(posteam != "APR" | "NPR")
group_by(posteam) %>%
summarise(mean_pass = mean(pass),
plays = n()) %>%
arrange(mean_pass)
schotty <- pbp_rp %>%
filter(posteam != "APR" | "NPR") %>%
filter(wp > .20 & wp < .80 & down <= 2 & qtr <= 2 & half_seconds_remaining > 120) %>%
group_by(posteam) %>%
summarise(mean_pass = mean(pass),
plays = n()) %>%
arrange(mean_pass)
schotty <- pbp_rp %>%
filter(wp > .20 & wp < .80 & down <= 2 & qtr <= 2 & half_seconds_remaining > 120) %>%
filter(posteam != "APR" | "NPR") %>%
group_by(posteam) %>%
summarise(mean_pass = mean(pass),
plays = n()) %>%
arrange(mean_pass)
schotty <- pbp_rp %>%
filter(wp > .20 & wp < .80 & down <= 2 & qtr <= 2 & half_seconds_remaining > 120) %>%
filter(posteam != "APR" | posteam != "NPR") %>%
group_by(posteam) %>%
summarise(mean_pass = mean(pass),
plays = n()) %>%
arrange(mean_pass)
View(schotty)
schotty <- pbp_rp %>%
filter(wp > .20 & wp < .80 & down <= 2 & qtr <= 2 & half_seconds_remaining > 120 & posteam != "APR" | posteam != "NPR") %>%
group_by(posteam) %>%
summarise(mean_pass = mean(pass),
plays = n()) %>%
arrange(mean_pass)
View(schotty)
schotty <- pbp_rp %>%
filter(wp > .20 & wp < .80 & down <= 2 & qtr <= 2 & half_seconds_remaining > 120 & !posteam %in% c("APR", "NPR") %>%
group_by(posteam) %>%
summarise(mean_pass = mean(pass),
plays = n()) %>%
arrange(mean_pass)
View(schotty)
View(schotty)
schotty <- pbp_rp %>%
filter(wp > .20 & wp < .80 & down <= 2 & qtr <= 2 & half_seconds_remaining > 120 & !posteam %in% c("APR", "NPR") %>%
group_by(posteam) %>%
summarise(mean_pass = mean(pass),
plays = n()) %>%
arrange(mean_pass)
schotty <- pbp_rp %>%
filter(wp > .20 & wp < .80 & down <= 2 & qtr <= 2 & half_seconds_remaining > 120 & !posteam %in% c("APR", "NPR")) %>%
group_by(posteam) %>%
summarise(mean_pass = mean(pass),
plays = n()) %>%
arrange(mean_pass)
View(schotty)
ggplot(schotty, aes(x = reorder(posteam,-mean_pass), y = mean_pass)) +
geom_text(aes(label = posteam))
theme_538 <- function(base_size = 12, font = "Lato") {
# Text setting
txt <- element_text(size = base_size + 2, colour = "black", face = "plain")
bold_txt <- element_text(
size = base_size + 2, colour = "black",
family = "Montserrat", face = "bold"
)
large_txt <- element_text(size = base_size + 4, color = "black", face = "bold")
theme_minimal(base_size = base_size, base_family = font) +
theme(
# Legend Settings
legend.key = element_blank(),
legend.background = element_blank(),
legend.position = "bottom",
legend.direction = "horizontal",
legend.box = "vertical",
# Backgrounds
strip.background = element_blank(),
strip.text = large_txt,
plot.background = element_blank(),
plot.margin = unit(c(1, 1, 1, 1), "lines"),
# Axis & Titles
text = txt,
axis.text = txt,
axis.ticks = element_blank(),
axis.line = element_blank(),
axis.title = bold_txt,
plot.title = large_txt,
# Panel
panel.grid = element_line(colour = NULL),
panel.grid.major = element_line(colour = "#D2D2D2"),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
panel.border = element_blank()
)
}
ggplot(schotty, aes(x = reorder(posteam, -mean_pass), y = mean_pass)) +
geom_text(aes(label = posteam)) +
theme_538()
pkgs <- c("devtools", "tidyverse", "readr",
"pander", "na.tools", "ggimage",
"devtools", "teamcolors", "glue",
"animate", "dplyr", "tictoc",
"animation", "gt", "DT",
"ggthemes", "bbplot", "ggtext",
"ggforce", "ggridges", "ggrepel",
"ggbeeswarm", "extrafont")
install.packages(pkgs)
install.packages(pkgs)
library(nflscrapR)
library(tidyverse)
library(readr)
library(pander)
library(dplyr)
library(na.tools)
library(ggimage)
library(teamcolors) # NFL team colors and logos
library(plyr)
library(readr)
library(glue)
##library(animate)
library(animation)
library(tictoc)
library(gt) # beautiful tables
library(DT) # beautiful interactive tables
library(ggthemes) # custom pre-built themes
library(bbplot) # more themes
library(ggtext) # custom text color
library(ggforce) # better annotations
library(ggridges) # many distributions at once
library(ggrepel) # better labels
library(ggbeeswarm) # beeswarm plots
library(extrafont) # for extra fonts
theme_538 <- function(base_size = 12, font = "Lato") {
# Text setting
txt <- element_text(size = base_size + 2, colour = "black", face = "plain")
bold_txt <- element_text(
size = base_size + 2, colour = "black",
family = "Montserrat", face = "bold"
)
large_txt <- element_text(size = base_size + 4, color = "black", face = "bold")
theme_minimal(base_size = base_size, base_family = font) +
theme(
# Legend Settings
legend.key = element_blank(),
legend.background = element_blank(),
legend.position = "bottom",
legend.direction = "horizontal",
legend.box = "vertical",
# Backgrounds
strip.background = element_blank(),
strip.text = large_txt,
plot.background = element_blank(),
plot.margin = unit(c(1, 1, 1, 1), "lines"),
# Axis & Titles
text = txt,
axis.text = txt,
axis.ticks = element_blank(),
axis.line = element_blank(),
axis.title = bold_txt,
plot.title = large_txt,
# Panel
panel.grid = element_line(colour = NULL),
panel.grid.major = element_line(colour = "#D2D2D2"),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
panel.border = element_blank()
)
}
ggplot(schotty, aes(x = reorder(posteam, -mean_pass), y = mean_pass)) +
geom_text(aes(label = posteam)) +
theme_538()
theme_fivethirtyeight <- function(base_size = 12, base_family = "sans") {
colors <- deframe(ggthemes::ggthemes_data[["fivethirtyeight"]])
(theme_foundation(base_size = base_size, base_family = base_family)
+ theme(
line = element_line(colour = "black"),
rect = element_rect(
fill = colors["Light Gray"],
linetype = 0, colour = NA
),
text = element_text(colour = colors["Dark Gray"]),
axis.title = element_blank(),
axis.text = element_text(),
axis.ticks = element_blank(),
axis.line = element_blank(),
legend.background = element_rect(),
legend.position = "bottom",
legend.direction = "horizontal",
legend.box = "vertical",
panel.grid = element_line(colour = NULL),
panel.grid.major =
element_line(colour = colors["Medium Gray"]),
panel.grid.minor = element_blank(),
plot.title = element_text(hjust = 0, size = rel(1.5), face = "bold"),
plot.margin = unit(c(1, 1, 1, 1), "lines"),
strip.background = element_rect()
))
}
theme_538 <- function(base_size = 12, font = "Lato") {
# Text setting
txt <- element_text(size = base_size + 2, colour = "black", face = "plain")
bold_txt <- element_text(
size = base_size + 2, colour = "black",
family = "Montserrat", face = "bold"
)
large_txt <- element_text(size = base_size + 4, color = "black", face = "bold")
theme_minimal(base_size = base_size, base_family = font) +
theme(
# Legend Settings
legend.key = element_blank(),
legend.background = element_blank(),
legend.position = "bottom",
legend.direction = "horizontal",
legend.box = "vertical",
# Backgrounds
strip.background = element_blank(),
strip.text = large_txt,
plot.background = element_blank(),
plot.margin = unit(c(1, 1, 1, 1), "lines"),
# Axis & Titles
text = txt,
axis.text = txt,
axis.ticks = element_blank(),
axis.line = element_blank(),
axis.title = bold_txt,
plot.title = large_txt,
# Panel
panel.grid = element_line(colour = NULL),
panel.grid.major = element_line(colour = "#D2D2D2"),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
panel.border = element_blank()
)
}
ggplot(schotty, aes(x = reorder(posteam, -mean_pass), y = mean_pass)) +
geom_text(aes(label = posteam)) +
theme_538()
wr_duel <- pbp_rp %>%
filter(receiver %in% posteam == "KC") %>%
group_by(game_date, receiver) %>%
summarize(mean_epa = mean(epa, na.rm = TRUE))
ggplot(
wr_duel,
aes(x = game_date, y = mean_epa, color = receiver)
) +
geom_line(size = 1)
source('~/.active-rstudio-document')
source('~/Documents/dev/football/playground.R')
