columns = contains("rk"),
colors = scales::col_numeric(
# palette = c("#7fbf7b", "#f7f7f7", "#af8dc3")
palette = c("#ff7f00", "#f7f7f7"),
domain = c(1, 32)
)
) %>%
text_transform(
locations = cells_body(vars(team_abbr)),
fn = function(x) web_image(url = paste0('https://a.espncdn.com/i/teamlogos/nfl/500/',x,'.png'))
) %>%
cols_label(
team_abbr = "",
prwr_rk = "RK",
prwr = "Pass Rush",
pbwr_rk = "RK",
pbwr = "Pass Block",
rswr_rk = "RK",
rswr = "Run Stop",
rbwr_rk = "RK",
rbwr = "Run Block",
off_wr_comp_rk = "Off. Composite RK",
def_wr_comp_rk = "Def. Composite RK"
) %>%
opt_all_caps() %>%
cols_width(
vars(team_abbr) ~ px(150),
columns = contains("r_rk") ~ px(40),
columns = contains("comp") ~ px(130),
everything() ~ px(100)
) %>%
tab_style(
style = cell_borders(
sides = "left",
color = "darkblue",
weight = px(3)
),
locations = list(
cells_body(
# columns = c(3,5,7,8,9,11,12)
columns = c("prwr_rk","rswr_rk","def_wr_comp_rk","pbwr_rk","rbwr_rk","off_wr_comp_rk")
),
cells_grand_summary(
columns = 3
)
)
) %>%
tab_style(
style = cell_text(
weight = "bold",
color = "dimgray"
),
locations = cells_body(
vars(team_abbr)
)
) %>%
tab_spanner(
label = "DEFENSE",
columns = 2:6
) %>%
tab_spanner(
label = "OFFENSE",
columns = 7:11
) %>%
tab_source_note(
source_note = md("**Data:** ESPN")
) %>%
fmt_percent(columns = c("prwr", "rswr", "pbwr", "rbwr"), decimals = 0) %>%
cols_align(align = "center", columns = 1:ncol(wide_win_rate)) %>%
cols_align(align = "left", columns = c(1)) %>%
tab_header(
title = "2020 NFL pass-rushing, run-stopping, blocking leaderboard: Win rate rankings",
subtitle = "Data through week 3"
) %>%
tab_style(
style = cell_borders(
sides = "bottom",
color = "darkblue",
weight = px(3)
),
locations = list(
cells_body(
rows = nrow(.$`_data`)
)
)
) %>%
tab_options(
table.font.color = 'darkblue',
heading.align = "left",
table.border.bottom.color = "transparent",
table.border.bottom.width = px(3),
table.border.top.color = "transparent",
table.border.top.width = px(3),
column_labels.border.bottom.color = "darkblue",
column_labels.border.bottom.width = px(3),
heading.title.font.size = px(30),
heading.title.font.weight = "bold",
heading.subtitle.font.size = px(20),
heading.border.bottom.color = "transparent",
heading.border.bottom.width = px(3),
table_body.hlines.color = "#ededed",
grand_summary_row.border.color = "darkblue",
grand_summary_row.border.width = px(3)
) %>%
opt_table_font(font = google_font(name = "Chivo"))
gt_tab
View(wide_win_rate)
gt_tab <- wide_win_rate %>%
arrange(def_wr_comp_rk) %>%
gt(rowname_col = "team") %>%
grand_summary_rows(
columns = c("prwr","rswr","pbwr","rbwr"),
fns = list(`NFL AVERAGE` = ~mean(.)),
formatter = fmt_percent,
decimals = 0
) %>%
data_color(
columns = contains("rk"),
colors = scales::col_numeric(
# palette = c("#7fbf7b", "#f7f7f7", "#af8dc3")
palette = c("#ff7f00", "#f7f7f7"),
domain = c(1, 32)
)
) %>%
text_transform(
locations = cells_body(vars(team_abbr)),
fn = function(x) web_image(url = paste0('https://a.espncdn.com/i/teamlogos/nfl/500/',x,'.png'))
) %>%
cols_label(
team_abbr = "",
prwr_rk = "RK",
prwr = "Pass Rush",
pbwr_rk = "RK",
pbwr = "Pass Block",
rswr_rk = "RK",
rswr = "Run Stop",
rbwr_rk = "RK",
rbwr = "Run Block",
off_wr_comp_rk = "Off. Composite RK",
def_wr_comp_rk = "Def. Composite RK"
) %>%
opt_all_caps() %>%
cols_width(
vars(team_abbr) ~ px(150),
columns = contains("r_rk") ~ px(40),
columns = contains("comp") ~ px(130),
everything() ~ px(100)
) %>%
tab_style(
style = cell_borders(
sides = "left",
color = "darkblue",
weight = px(3)
),
locations = list(
cells_body(
# columns = c(3,5,7,8,9,11,12)
columns = c("prwr_rk","rswr_rk","def_wr_comp_rk","pbwr_rk","rbwr_rk","off_wr_comp_rk")
),
cells_grand_summary(
columns = 3
)
)
) %>%
tab_style(
style = cell_text(
weight = "bold",
color = "dimgray"
),
locations = cells_body(
vars(team_abbr)
)
) %>%
tab_spanner(
label = "DEFENSE",
columns = 2:6
) %>%
tab_spanner(
label = "OFFENSE",
columns = 7:11
) %>%
tab_source_note(
source_note = md("**Data:** ESPN")
) %>%
fmt_percent(columns = c("prwr", "rswr", "pbwr", "rbwr"), decimals = 0) %>%
cols_align(align = "center", columns = 1:ncol(wide_win_rate)) %>%
cols_align(align = "left", columns = c(1)) %>%
tab_header(
title = "2020 NFL pass-rushing, run-stopping, blocking leaderboard: Win rate rankings",
subtitle = "Data through week 3"
) %>%
tab_style(
style = cell_borders(
sides = "bottom",
color = "darkblue",
weight = px(3)
),
locations = list(
cells_body(
rows = nrow(.$`_data`)
)
)
) %>%
tab_options(
table.font.color = 'darkblue',
heading.align = "left",
table.border.bottom.color = "transparent",
table.border.bottom.width = px(3),
table.border.top.color = "transparent",
table.border.top.width = px(3),
column_labels.border.bottom.color = "darkblue",
column_labels.border.bottom.width = px(3),
heading.title.font.size = px(30),
heading.title.font.weight = "bold",
heading.subtitle.font.size = px(20),
heading.border.bottom.color = "transparent",
heading.border.bottom.width = px(3),
table_body.hlines.color = "#ededed",
grand_summary_row.border.color = "darkblue",
grand_summary_row.border.width = px(3)
) %>%
opt_table_font(font = google_font(name = "Chivo"))
gt_tab
source("fantasy_football/ff_init.R")
fonts()
library(ggplot2)
library(gridExtra)
library(grid)
library(png)
library(cowplot)
library(colorspace)
library(extrafont)
library(RCurl)
library(ggpmisc)
library(magick)
library(ggimage)
library(shadowtext)
library(ggrepel)
library(scales)
library(magrittr)
library(tidyverse)
library(gganimate)
library(gt)
fonts()
length(grep('HP Simplified',fonts()))>0
?fonts
?extrafont
fonttable()
font_import()
?google_font
pkgs <- c(
"ggplot2",
"gridExtra",
"grid",
"png",
"cowplot",
"colorspace",
"extrafont",
"RCurl",
"ggpmisc",
"magick",
"ggimage",
"shadowtext",
"ggrepel",
"scales",
"magrittr",
"tidyverse",
"gganimate",
"gt",
"showtext"
)
installed_packages <- pkgs %in%
rownames(installed.packages())
if (any(installed_packages == FALSE)) {
install.packages(pkgs[!installed_packages])
}
lapply(pkgs, library, character.only = TRUE)
?sysfonts
??sysfonts
font_family <- font_add_google("Chivo", "chivo")
library(tidyverse)
source('https://raw.githubusercontent.com/mrcaseb/nflfastR/master/R/utils.R')
source('https://github.com/mrcaseb/nflfastR/raw/master/R/helper_add_xyac.R')
source('https://github.com/mrcaseb/nflfastR/raw/master/R/helper_add_nflscrapr_mutations.R')
source('fantasy_football/xyac/add_xyac_old.R')
# YAC Distribution Function -----------------------------------------------
# duplicate the add_xyac() function that we sourced above
add_xyac_dist <- add_xyac
# separate each block of code in the add_xyac_dist() function into blocks
add_xyac_blocks <- body(add_xyac_dist) %>% as.list
# we want to remove lines 51 to 62 from the 5th item in the list
add_xyac_blocks[[2]] <- add_xyac_blocks[[2]] %>%
format %>%
.[-(61:72)] %>%
paste(collapse = '\n') %>%
str2lang
# replace the body of add_xyac_dist() with our new edited function
body(add_xyac_dist) <- add_xyac_blocks %>% as.call
# Data --------------------------------------------------------------------
# pbp_df <- readRDS(url('https://raw.githubusercontent.com/guga31bb/nflfastR-data/master/data/play_by_play_2020.rds'))
pbp_df <- readRDS(url('https://raw.githubusercontent.com/guga31bb/nflfastR-data/master/data/play_by_play_2020.rds'))
# source('https://github.com/ajreinhard/data-viz/raw/master/ggplot/plot_SB.R')
source('plots/scripts/plot_theme.R')
my_week <- 4
quick_rost <- readRDS(url('https://raw.githubusercontent.com/guga31bb/nflfastR-raw/master/roster/roster.rds'))
# quick_rost %>%
#   filter(Pos == 'TE' & (No >= 90 | No <= 79) & No != 0 & Status == 'ACT') %>%
#   view
# #pull(No) %>% table
#
# quick_rost %>%
#   filter(Pos == 'WR' & (No >= 90 | (No <= 79 & No >= 20) | No <= 9)  & No != 0 & Status == 'ACT') %>%
#   view
#
# quick_rost %>%
#   filter(((No < 90 & No > 79) | (No > 20 & No < 9)) & Status == 'ACT' & (Pos != 'WR' & Pos != 'TE')) %>%
#   #pull(Pos) %>% table
#   view
fant_pt_dist_df <- pbp_df %>%
filter(pass_attempt==1 & season_type=='REG' & two_point_attempt==0 & !is.na(receiver_id) & !is.na(cp) & ((receiver_jersey_number < 90 & receiver_jersey_number > 79) | (receiver_jersey_number < 20 & receiver_jersey_number > 9))) %>%
add_xyac_dist %>%
select(season = season.x, game_id, play_id, posteam = posteam.x, receiver, receiver_id, yardline_100 = yardline_100.x, air_yards = air_yards.x, actual_yards_gained = yards_gained, complete_pass, cp, yac_prob = prob, gain) %>%
mutate(
gain = ifelse(yardline_100==air_yards, yardline_100, gain),
yac_prob = ifelse(yardline_100==air_yards, 1, yac_prob),
PPR_points = 1 + gain/10 + ifelse(gain == yardline_100, 6, 0),
half_PPR_points = .5 + gain/10 + ifelse(gain == yardline_100, 6, 0),
catch_run_prob = cp * yac_prob,
exp_PPR_points = PPR_points * catch_run_prob,
exp_half_PPR_points = half_PPR_points * catch_run_prob,
actual_outcome = ifelse(actual_yards_gained==gain & complete_pass==1, 1, 0),
actual_PPR_points = ifelse(actual_outcome==1, PPR_points, 0),
actual_half_PPR_points = ifelse(actual_outcome==1, half_PPR_points, 0),
target = 0,
game_played = 0
)
fant_pt_dist_df <- nflfastR::decode_player_ids(fant_pt_dist_df)
incomplete_df <- fant_pt_dist_df %>%
mutate(
gain = 0,
PPR_points = 0,
half_PPR_points = 0,
yac_prob = 0,
exp_PPR_points = 0,
exp_half_PPR_points = 0,
complete_pass = 0,
catch_run_prob = 1 - cp,
actual_outcome = NA,
actual_PPR_points = NA,
actual_half_PPR_points = NA,
target = 1
) %>%
distinct %>%
group_by(game_id, receiver) %>%
mutate(game_played = ifelse(row_number()==1,1,0)) %>%
ungroup
WR_rank_df <- rbind(incomplete_df, fant_pt_dist_df) %>%
group_by(posteam, receiver) %>%
summarize(
receiver_id = unique(receiver_id),
tot_PPR = sum(actual_PPR_points, na.rm = T),
tot_half_PPR = sum(actual_half_PPR_points, na.rm = T),
tot_targ = sum(target),
tot_gp = sum(game_played),
PPR_pg = tot_PPR / tot_gp,
half_PPR_pg = tot_half_PPR / tot_gp
) %>%
# ungroup %>%
arrange(-tot_targ) %>%
#slice(1:25)
left_join(
sleep.players %>%
select(position, sportradar_id, gsis_id, espn_id, headshot_url),
by = c("receiver_id" = "gsis_id")
) %>%
left_join(espn.players %>%
select(id, status, onTeamId),
by = c("espn_id" = "id")) %>%
# filter(status != "ONTEAM") %>% #Use to search through FA's
mutate(tm_rnk = row_number()) %>%
filter(tm_rnk <= 4)
# make a data frame to loop around
sampling_df <- rbind(incomplete_df, fant_pt_dist_df) %>%
right_join(WR_rank_df %>% select(posteam, receiver)) %>%
select(season, game_id, play_id, posteam, receiver, catch_run_prob, half_PPR_points) %>%
group_by(game_id, play_id)
# do sim
sim_df <- do.call(rbind, lapply(1:5000, function(x) {
sampling_df %>%
mutate(sim_res = sample(half_PPR_points, 1, prob = catch_run_prob)) %>%
select(season, game_id, play_id, posteam, receiver, sim_res) %>%
distinct %>%
group_by(posteam, receiver) %>%
summarize(sim_tot = sum(sim_res, na.rm = T), .groups = 'drop') %>%
return
}))
sim_df <- sim_df %>% mutate(sim = 1)
# calculate how many points were actually scored
actual_df <- fant_pt_dist_df %>%
group_by(posteam, receiver) %>%
summarize(sim_tot = sum(actual_half_PPR_points, na.rm = T), .groups = 'drop') %>%
mutate(sim = 0)
# figure out what percentile the actual values fall in
percentile_df <- rbind(sim_df, actual_df) %>%
group_by(posteam, receiver) %>%
mutate(perc = percent_rank(sim_tot)) %>%
filter(sim == 0) %>%
mutate(sim_tot = NULL, sim = NULL)
color_cw <- c("#1D2329", "#2C343A", "#38424B", "#16191C", "#e0e0e0", "#1AB063", "#0580DC", "#D64964")
source('plots/scripts/plot_theme.R')
p <- sim_df %>%
left_join(percentile_df) %>%
left_join(WR_rank_df) %>%
mutate(
sim_pg = sim_tot / tot_gp,
pl_lab = paste0(receiver, '\n', number(perc * 100, accuracy = 0.1), ' perc.'),
posteam = factor(posteam, .tm_div_order_alt)
) %>%
group_by(posteam, receiver) %>%
mutate(obs_num = row_number()) %>%
ggplot(aes(x = sim_pg, y = tm_rnk, group = receiver, label = pl_lab)) +
facet_wrap(. ~ posteam, nrow = 4, scales = 'free') +
geom_point(aes(x = ifelse(obs_num==1, half_PPR_pg, NA), y = tm_rnk + 0.08), color = 'darkblue', fill = color_cw[1], shape = 24, size = 0.6, stroke = 0.2, na.rm = T) +
stat_density_ridges(
aes(fill = factor(stat(quantile))),
geom = 'density_ridges_gradient',
quantiles = c(.1,.25,.75,.9),
rel_min_height = 0.001,
bandwidth = 1,
calc_ecdf = T,
scale = 0.9,
color = 'grey50',
size = 0.2,
show.legend = F
) +
#geom_boxplot(size = 0.4, color = 'darkblue', width = 0.6, outlier.alpha = 0, notchwidth = 1) +
geom_shadowtext(aes(x = ifelse(obs_num==1, 48, NA), y = tm_rnk - 0.5), hjust = 1, color = 'darkblue', bg.color = 'white', family = "Helvetica", size = 1.2, na.rm = T, bg.r = 0.2) +
scale_x_continuous(breaks = seq(0,80,10), expand = expansion(mult = 0), limits = c(0,50)) +
scale_y_reverse(expand = expansion(mult = c(0, 0.04), add = c(0.2, 0)), limits = c(4.1,0)) +
scale_fill_manual(values = c(alpha(color_cw[1], 0.4),alpha(color_cw[4], 0.4),alpha('grey60', 0.4),alpha(color_cw[4], 0.4),alpha(color_cw[1], 0.4))) +
labs(title = paste0('2020 Expected 1/2 PPR Fantasy Points per Game as of Week ', my_week),
subtitle = 'Grey represents middle 50% of outcomes, Orange tails are each 10% of outcomes  |  Caret shows actual avg  |  Based on 10,000 Simulations',
x = NULL) +
theme_cw +
theme(
axis.title.y = element_blank(),
axis.text.y = element_blank(),
axis.ticks.y = element_blank(),
panel.grid.major.y = element_blank(),
axis.text = element_text(size = 4),
axis.line = element_line(color = '#e0e0e0', size = 0.5),
panel.border = element_rect(color = '#16191C', size = 0.1),
axis.ticks.length = unit(0.15, 'lines'),
axis.ticks = element_line(color = '#e0e0e0', size = 0.5),
panel.grid.minor.x = element_line('#16191C', size = 0.2),
panel.spacing.x = unit(0.5, 'lines')
) +
annotation_custom(make_gradient(deg = 270), ymin=Inf, ymax=-0.1, xmin=-Inf, xmax=Inf) +
annotation_custom(make_gradient(deg = 0), ymin=-Inf, ymax=Inf, xmin=48, xmax=Inf)
library(ggridges)
source('plots/scripts/plot_theme.R')
p <- sim_df %>%
left_join(percentile_df) %>%
left_join(WR_rank_df) %>%
mutate(
sim_pg = sim_tot / tot_gp,
pl_lab = paste0(receiver, '\n', number(perc * 100, accuracy = 0.1), ' perc.'),
posteam = factor(posteam, .tm_div_order_alt)
) %>%
group_by(posteam, receiver) %>%
mutate(obs_num = row_number()) %>%
ggplot(aes(x = sim_pg, y = tm_rnk, group = receiver, label = pl_lab)) +
facet_wrap(. ~ posteam, nrow = 4, scales = 'free') +
geom_point(aes(x = ifelse(obs_num==1, half_PPR_pg, NA), y = tm_rnk + 0.08), color = 'darkblue', fill = color_cw[1], shape = 24, size = 0.6, stroke = 0.2, na.rm = T) +
stat_density_ridges(
aes(fill = factor(stat(quantile))),
geom = 'density_ridges_gradient',
quantiles = c(.1,.25,.75,.9),
rel_min_height = 0.001,
bandwidth = 1,
calc_ecdf = T,
scale = 0.9,
color = 'grey50',
size = 0.2,
show.legend = F
) +
#geom_boxplot(size = 0.4, color = 'darkblue', width = 0.6, outlier.alpha = 0, notchwidth = 1) +
geom_shadowtext(aes(x = ifelse(obs_num==1, 48, NA), y = tm_rnk - 0.5), hjust = 1, color = 'darkblue', bg.color = 'white', family = "Helvetica", size = 1.2, na.rm = T, bg.r = 0.2) +
scale_x_continuous(breaks = seq(0,80,10), expand = expansion(mult = 0), limits = c(0,50)) +
scale_y_reverse(expand = expansion(mult = c(0, 0.04), add = c(0.2, 0)), limits = c(4.1,0)) +
scale_fill_manual(values = c(alpha(color_cw[1], 0.4),alpha(color_cw[4], 0.4),alpha('grey60', 0.4),alpha(color_cw[4], 0.4),alpha(color_cw[1], 0.4))) +
labs(title = paste0('2020 Expected 1/2 PPR Fantasy Points per Game as of Week ', my_week),
subtitle = 'Grey represents middle 50% of outcomes, Orange tails are each 10% of outcomes  |  Caret shows actual avg  |  Based on 10,000 Simulations',
x = NULL) +
theme_cw +
theme(
axis.title.y = element_blank(),
axis.text.y = element_blank(),
axis.ticks.y = element_blank(),
panel.grid.major.y = element_blank(),
axis.text = element_text(size = 4),
axis.line = element_line(color = '#e0e0e0', size = 0.5),
panel.border = element_rect(color = '#16191C', size = 0.1),
axis.ticks.length = unit(0.15, 'lines'),
axis.ticks = element_line(color = '#e0e0e0', size = 0.5),
panel.grid.minor.x = element_line('#16191C', size = 0.2),
panel.spacing.x = unit(0.5, 'lines')
) +
annotation_custom(make_gradient(deg = 270), ymin=Inf, ymax=-0.1, xmin=-Inf, xmax=Inf) +
annotation_custom(make_gradient(deg = 0), ymin=-Inf, ymax=Inf, xmin=48, xmax=Inf)
brand_plot(p, asp = 16/9, save_name = 'test_xfp_half_PPR_box_2020.png', data_home = 'Data: @nflfastR', tm_wordmarks = T)
brand_plot(p, asp = 16/9, save_name = 'xfp_half_PPR_box_2020_test.png', data_home = 'Data: @nflfastR', tm_wordmarks = T)
